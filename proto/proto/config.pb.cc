// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#include "proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace khiin {
namespace proto {
constexpr BoolValue::BoolValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct BoolValueDefaultTypeInternal {
  constexpr BoolValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolValueDefaultTypeInternal() {}
  union {
    BoolValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolValueDefaultTypeInternal _BoolValue_default_instance_;
constexpr KeyConfiguration::KeyConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telex_t2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t7_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t8_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t9_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_khin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alt_hyphen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nasal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dot_above_right_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dots_below_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_uppercase_nasal_(nullptr)
  , use_digits_as_fallback_(nullptr){}
struct KeyConfigurationDefaultTypeInternal {
  constexpr KeyConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyConfigurationDefaultTypeInternal() {}
  union {
    KeyConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyConfigurationDefaultTypeInternal _KeyConfiguration_default_instance_;
constexpr AppConfig::AppConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ime_enabled_(nullptr)
  , key_config_(nullptr)
  , telex_enabled_(nullptr)
  , dotted_khin_(nullptr)
  , autokhin_(nullptr)
  , easy_ch_(nullptr)
  , uppercase_nasal_(nullptr)
  , input_mode_(0)

  , default_punctuation_(0)
{}
struct AppConfigDefaultTypeInternal {
  constexpr AppConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDefaultTypeInternal() {}
  union {
    AppConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDefaultTypeInternal _AppConfig_default_instance_;
}  // namespace proto
}  // namespace khiin
namespace khiin {
namespace proto {
bool InputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InputMode_strings[4] = {};

static const char InputMode_names[] =
  "IM_BASIC"
  "IM_CONTINUOUS"
  "IM_PRO"
  "IM_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InputMode_entries[] = {
  { {InputMode_names + 0, 8}, 2 },
  { {InputMode_names + 8, 13}, 1 },
  { {InputMode_names + 21, 6}, 3 },
  { {InputMode_names + 27, 14}, 0 },
};

static const int InputMode_entries_by_number[] = {
  3, // 0 -> IM_UNSPECIFIED
  1, // 1 -> IM_CONTINUOUS
  0, // 2 -> IM_BASIC
  2, // 3 -> IM_PRO
};

const std::string& InputMode_Name(
    InputMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InputMode_entries,
          InputMode_entries_by_number,
          4, InputMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InputMode_entries,
      InputMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InputMode_strings[idx].get();
}
bool InputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InputMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<InputMode>(int_value);
  }
  return success;
}
bool DefaultPunctuation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultPunctuation_strings[3] = {};

static const char DefaultPunctuation_names[] =
  "PUNCT_HALF"
  "PUNCT_UNSPECIFIED"
  "PUNCT_WHOLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DefaultPunctuation_entries[] = {
  { {DefaultPunctuation_names + 0, 10}, 1 },
  { {DefaultPunctuation_names + 10, 17}, 0 },
  { {DefaultPunctuation_names + 27, 11}, 2 },
};

static const int DefaultPunctuation_entries_by_number[] = {
  1, // 0 -> PUNCT_UNSPECIFIED
  0, // 1 -> PUNCT_HALF
  2, // 2 -> PUNCT_WHOLE
};

const std::string& DefaultPunctuation_Name(
    DefaultPunctuation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DefaultPunctuation_entries,
          DefaultPunctuation_entries_by_number,
          3, DefaultPunctuation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DefaultPunctuation_entries,
      DefaultPunctuation_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DefaultPunctuation_strings[idx].get();
}
bool DefaultPunctuation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DefaultPunctuation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DefaultPunctuation_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DefaultPunctuation>(int_value);
  }
  return success;
}

// ===================================================================

class BoolValue::_Internal {
 public:
};

BoolValue::BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.BoolValue)
}
BoolValue::BoolValue(const BoolValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:khiin.proto.BoolValue)
}

void BoolValue::SharedCtor() {
value_ = false;
}

BoolValue::~BoolValue() {
  // @@protoc_insertion_point(destructor:khiin.proto.BoolValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void BoolValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolValue::ArenaDtor(void* object) {
  BoolValue* _this = reinterpret_cast< BoolValue* >(object);
  (void)_this;
}
void BoolValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolValue::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* BoolValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.BoolValue)
  return target;
}

size_t BoolValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.BoolValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoolValue*>(
      &from));
}

void BoolValue::MergeFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoolValue::CopyFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolValue::IsInitialized() const {
  return true;
}

void BoolValue::InternalSwap(BoolValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string BoolValue::GetTypeName() const {
  return "khiin.proto.BoolValue";
}


// ===================================================================

class KeyConfiguration::_Internal {
 public:
  static const ::khiin::proto::BoolValue& enable_uppercase_nasal(const KeyConfiguration* msg);
  static const ::khiin::proto::BoolValue& use_digits_as_fallback(const KeyConfiguration* msg);
};

const ::khiin::proto::BoolValue&
KeyConfiguration::_Internal::enable_uppercase_nasal(const KeyConfiguration* msg) {
  return *msg->enable_uppercase_nasal_;
}
const ::khiin::proto::BoolValue&
KeyConfiguration::_Internal::use_digits_as_fallback(const KeyConfiguration* msg) {
  return *msg->use_digits_as_fallback_;
}
KeyConfiguration::KeyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.KeyConfiguration)
}
KeyConfiguration::KeyConfiguration(const KeyConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  telex_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t2().empty()) {
    telex_t2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t2(), 
      GetArenaForAllocation());
  }
  telex_t3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t3().empty()) {
    telex_t3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t3(), 
      GetArenaForAllocation());
  }
  telex_t5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t5().empty()) {
    telex_t5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t5(), 
      GetArenaForAllocation());
  }
  telex_t6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t6().empty()) {
    telex_t6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t6(), 
      GetArenaForAllocation());
  }
  telex_t7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t7().empty()) {
    telex_t7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t7(), 
      GetArenaForAllocation());
  }
  telex_t8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t8().empty()) {
    telex_t8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t8(), 
      GetArenaForAllocation());
  }
  telex_t9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t9().empty()) {
    telex_t9_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t9(), 
      GetArenaForAllocation());
  }
  telex_khin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_khin().empty()) {
    telex_khin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_khin(), 
      GetArenaForAllocation());
  }
  alt_hyphen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alt_hyphen().empty()) {
    alt_hyphen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alt_hyphen(), 
      GetArenaForAllocation());
  }
  nasal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nasal().empty()) {
    nasal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nasal(), 
      GetArenaForAllocation());
  }
  dot_above_right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dot_above_right().empty()) {
    dot_above_right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dot_above_right(), 
      GetArenaForAllocation());
  }
  dots_below_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dots_below().empty()) {
    dots_below_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dots_below(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enable_uppercase_nasal()) {
    enable_uppercase_nasal_ = new ::khiin::proto::BoolValue(*from.enable_uppercase_nasal_);
  } else {
    enable_uppercase_nasal_ = nullptr;
  }
  if (from._internal_has_use_digits_as_fallback()) {
    use_digits_as_fallback_ = new ::khiin::proto::BoolValue(*from.use_digits_as_fallback_);
  } else {
    use_digits_as_fallback_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:khiin.proto.KeyConfiguration)
}

void KeyConfiguration::SharedCtor() {
telex_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_khin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alt_hyphen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nasal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dot_above_right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dots_below_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_uppercase_nasal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_digits_as_fallback_) -
    reinterpret_cast<char*>(&enable_uppercase_nasal_)) + sizeof(use_digits_as_fallback_));
}

KeyConfiguration::~KeyConfiguration() {
  // @@protoc_insertion_point(destructor:khiin.proto.KeyConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void KeyConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  telex_t2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_khin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_hyphen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nasal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dot_above_right_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dots_below_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enable_uppercase_nasal_;
  if (this != internal_default_instance()) delete use_digits_as_fallback_;
}

void KeyConfiguration::ArenaDtor(void* object) {
  KeyConfiguration* _this = reinterpret_cast< KeyConfiguration* >(object);
  (void)_this;
}
void KeyConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.KeyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  telex_t2_.ClearToEmpty();
  telex_t3_.ClearToEmpty();
  telex_t5_.ClearToEmpty();
  telex_t6_.ClearToEmpty();
  telex_t7_.ClearToEmpty();
  telex_t8_.ClearToEmpty();
  telex_t9_.ClearToEmpty();
  telex_khin_.ClearToEmpty();
  alt_hyphen_.ClearToEmpty();
  nasal_.ClearToEmpty();
  dot_above_right_.ClearToEmpty();
  dots_below_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && enable_uppercase_nasal_ != nullptr) {
    delete enable_uppercase_nasal_;
  }
  enable_uppercase_nasal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && use_digits_as_fallback_ != nullptr) {
    delete use_digits_as_fallback_;
  }
  use_digits_as_fallback_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* KeyConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string telex_t2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_telex_t2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_telex_t3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_telex_t5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_telex_t6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t7 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_telex_t7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t8 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_telex_t8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_telex_t9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_khin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_telex_khin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alt_hyphen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_alt_hyphen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nasal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_nasal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dot_above_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dot_above_right();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dots_below = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_dots_below();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue enable_uppercase_nasal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_uppercase_nasal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue use_digits_as_fallback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_digits_as_fallback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.KeyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string telex_t2 = 1;
  if (!this->_internal_telex_t2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t2().data(), static_cast<int>(this->_internal_telex_t2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t2");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_telex_t2(), target);
  }

  // string telex_t3 = 2;
  if (!this->_internal_telex_t3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t3().data(), static_cast<int>(this->_internal_telex_t3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t3");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_telex_t3(), target);
  }

  // string telex_t5 = 3;
  if (!this->_internal_telex_t5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t5().data(), static_cast<int>(this->_internal_telex_t5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t5");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_telex_t5(), target);
  }

  // string telex_t6 = 4;
  if (!this->_internal_telex_t6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t6().data(), static_cast<int>(this->_internal_telex_t6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_telex_t6(), target);
  }

  // string telex_t7 = 5;
  if (!this->_internal_telex_t7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t7().data(), static_cast<int>(this->_internal_telex_t7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t7");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_telex_t7(), target);
  }

  // string telex_t8 = 6;
  if (!this->_internal_telex_t8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t8().data(), static_cast<int>(this->_internal_telex_t8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t8");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_telex_t8(), target);
  }

  // string telex_t9 = 7;
  if (!this->_internal_telex_t9().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t9().data(), static_cast<int>(this->_internal_telex_t9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t9");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_telex_t9(), target);
  }

  // string telex_khin = 8;
  if (!this->_internal_telex_khin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_khin().data(), static_cast<int>(this->_internal_telex_khin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_khin");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_telex_khin(), target);
  }

  // string alt_hyphen = 9;
  if (!this->_internal_alt_hyphen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alt_hyphen().data(), static_cast<int>(this->_internal_alt_hyphen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.alt_hyphen");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_alt_hyphen(), target);
  }

  // string nasal = 10;
  if (!this->_internal_nasal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nasal().data(), static_cast<int>(this->_internal_nasal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.nasal");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nasal(), target);
  }

  // string dot_above_right = 11;
  if (!this->_internal_dot_above_right().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dot_above_right().data(), static_cast<int>(this->_internal_dot_above_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.dot_above_right");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dot_above_right(), target);
  }

  // string dots_below = 12;
  if (!this->_internal_dots_below().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dots_below().data(), static_cast<int>(this->_internal_dots_below().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.dots_below");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dots_below(), target);
  }

  // .khiin.proto.BoolValue enable_uppercase_nasal = 13;
  if (this->_internal_has_enable_uppercase_nasal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::enable_uppercase_nasal(this), target, stream);
  }

  // .khiin.proto.BoolValue use_digits_as_fallback = 14;
  if (this->_internal_has_use_digits_as_fallback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::use_digits_as_fallback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.KeyConfiguration)
  return target;
}

size_t KeyConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.KeyConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string telex_t2 = 1;
  if (!this->_internal_telex_t2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t2());
  }

  // string telex_t3 = 2;
  if (!this->_internal_telex_t3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t3());
  }

  // string telex_t5 = 3;
  if (!this->_internal_telex_t5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t5());
  }

  // string telex_t6 = 4;
  if (!this->_internal_telex_t6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t6());
  }

  // string telex_t7 = 5;
  if (!this->_internal_telex_t7().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t7());
  }

  // string telex_t8 = 6;
  if (!this->_internal_telex_t8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t8());
  }

  // string telex_t9 = 7;
  if (!this->_internal_telex_t9().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t9());
  }

  // string telex_khin = 8;
  if (!this->_internal_telex_khin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_khin());
  }

  // string alt_hyphen = 9;
  if (!this->_internal_alt_hyphen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alt_hyphen());
  }

  // string nasal = 10;
  if (!this->_internal_nasal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nasal());
  }

  // string dot_above_right = 11;
  if (!this->_internal_dot_above_right().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dot_above_right());
  }

  // string dots_below = 12;
  if (!this->_internal_dots_below().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dots_below());
  }

  // .khiin.proto.BoolValue enable_uppercase_nasal = 13;
  if (this->_internal_has_enable_uppercase_nasal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_uppercase_nasal_);
  }

  // .khiin.proto.BoolValue use_digits_as_fallback = 14;
  if (this->_internal_has_use_digits_as_fallback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_digits_as_fallback_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KeyConfiguration*>(
      &from));
}

void KeyConfiguration::MergeFrom(const KeyConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.KeyConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_telex_t2().empty()) {
    _internal_set_telex_t2(from._internal_telex_t2());
  }
  if (!from._internal_telex_t3().empty()) {
    _internal_set_telex_t3(from._internal_telex_t3());
  }
  if (!from._internal_telex_t5().empty()) {
    _internal_set_telex_t5(from._internal_telex_t5());
  }
  if (!from._internal_telex_t6().empty()) {
    _internal_set_telex_t6(from._internal_telex_t6());
  }
  if (!from._internal_telex_t7().empty()) {
    _internal_set_telex_t7(from._internal_telex_t7());
  }
  if (!from._internal_telex_t8().empty()) {
    _internal_set_telex_t8(from._internal_telex_t8());
  }
  if (!from._internal_telex_t9().empty()) {
    _internal_set_telex_t9(from._internal_telex_t9());
  }
  if (!from._internal_telex_khin().empty()) {
    _internal_set_telex_khin(from._internal_telex_khin());
  }
  if (!from._internal_alt_hyphen().empty()) {
    _internal_set_alt_hyphen(from._internal_alt_hyphen());
  }
  if (!from._internal_nasal().empty()) {
    _internal_set_nasal(from._internal_nasal());
  }
  if (!from._internal_dot_above_right().empty()) {
    _internal_set_dot_above_right(from._internal_dot_above_right());
  }
  if (!from._internal_dots_below().empty()) {
    _internal_set_dots_below(from._internal_dots_below());
  }
  if (from._internal_has_enable_uppercase_nasal()) {
    _internal_mutable_enable_uppercase_nasal()->::khiin::proto::BoolValue::MergeFrom(from._internal_enable_uppercase_nasal());
  }
  if (from._internal_has_use_digits_as_fallback()) {
    _internal_mutable_use_digits_as_fallback()->::khiin::proto::BoolValue::MergeFrom(from._internal_use_digits_as_fallback());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void KeyConfiguration::CopyFrom(const KeyConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.KeyConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyConfiguration::IsInitialized() const {
  return true;
}

void KeyConfiguration::InternalSwap(KeyConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t2_, lhs_arena,
      &other->telex_t2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t3_, lhs_arena,
      &other->telex_t3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t5_, lhs_arena,
      &other->telex_t5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t6_, lhs_arena,
      &other->telex_t6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t7_, lhs_arena,
      &other->telex_t7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t8_, lhs_arena,
      &other->telex_t8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t9_, lhs_arena,
      &other->telex_t9_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_khin_, lhs_arena,
      &other->telex_khin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alt_hyphen_, lhs_arena,
      &other->alt_hyphen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nasal_, lhs_arena,
      &other->nasal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dot_above_right_, lhs_arena,
      &other->dot_above_right_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dots_below_, lhs_arena,
      &other->dots_below_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyConfiguration, use_digits_as_fallback_)
      + sizeof(KeyConfiguration::use_digits_as_fallback_)
      - PROTOBUF_FIELD_OFFSET(KeyConfiguration, enable_uppercase_nasal_)>(
          reinterpret_cast<char*>(&enable_uppercase_nasal_),
          reinterpret_cast<char*>(&other->enable_uppercase_nasal_));
}

std::string KeyConfiguration::GetTypeName() const {
  return "khiin.proto.KeyConfiguration";
}


// ===================================================================

class AppConfig::_Internal {
 public:
  static const ::khiin::proto::BoolValue& ime_enabled(const AppConfig* msg);
  static const ::khiin::proto::KeyConfiguration& key_config(const AppConfig* msg);
  static const ::khiin::proto::BoolValue& telex_enabled(const AppConfig* msg);
  static const ::khiin::proto::BoolValue& dotted_khin(const AppConfig* msg);
  static const ::khiin::proto::BoolValue& autokhin(const AppConfig* msg);
  static const ::khiin::proto::BoolValue& easy_ch(const AppConfig* msg);
  static const ::khiin::proto::BoolValue& uppercase_nasal(const AppConfig* msg);
};

const ::khiin::proto::BoolValue&
AppConfig::_Internal::ime_enabled(const AppConfig* msg) {
  return *msg->ime_enabled_;
}
const ::khiin::proto::KeyConfiguration&
AppConfig::_Internal::key_config(const AppConfig* msg) {
  return *msg->key_config_;
}
const ::khiin::proto::BoolValue&
AppConfig::_Internal::telex_enabled(const AppConfig* msg) {
  return *msg->telex_enabled_;
}
const ::khiin::proto::BoolValue&
AppConfig::_Internal::dotted_khin(const AppConfig* msg) {
  return *msg->dotted_khin_;
}
const ::khiin::proto::BoolValue&
AppConfig::_Internal::autokhin(const AppConfig* msg) {
  return *msg->autokhin_;
}
const ::khiin::proto::BoolValue&
AppConfig::_Internal::easy_ch(const AppConfig* msg) {
  return *msg->easy_ch_;
}
const ::khiin::proto::BoolValue&
AppConfig::_Internal::uppercase_nasal(const AppConfig* msg) {
  return *msg->uppercase_nasal_;
}
AppConfig::AppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.AppConfig)
}
AppConfig::AppConfig(const AppConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_ime_enabled()) {
    ime_enabled_ = new ::khiin::proto::BoolValue(*from.ime_enabled_);
  } else {
    ime_enabled_ = nullptr;
  }
  if (from._internal_has_key_config()) {
    key_config_ = new ::khiin::proto::KeyConfiguration(*from.key_config_);
  } else {
    key_config_ = nullptr;
  }
  if (from._internal_has_telex_enabled()) {
    telex_enabled_ = new ::khiin::proto::BoolValue(*from.telex_enabled_);
  } else {
    telex_enabled_ = nullptr;
  }
  if (from._internal_has_dotted_khin()) {
    dotted_khin_ = new ::khiin::proto::BoolValue(*from.dotted_khin_);
  } else {
    dotted_khin_ = nullptr;
  }
  if (from._internal_has_autokhin()) {
    autokhin_ = new ::khiin::proto::BoolValue(*from.autokhin_);
  } else {
    autokhin_ = nullptr;
  }
  if (from._internal_has_easy_ch()) {
    easy_ch_ = new ::khiin::proto::BoolValue(*from.easy_ch_);
  } else {
    easy_ch_ = nullptr;
  }
  if (from._internal_has_uppercase_nasal()) {
    uppercase_nasal_ = new ::khiin::proto::BoolValue(*from.uppercase_nasal_);
  } else {
    uppercase_nasal_ = nullptr;
  }
  ::memcpy(&input_mode_, &from.input_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_punctuation_) -
    reinterpret_cast<char*>(&input_mode_)) + sizeof(default_punctuation_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.AppConfig)
}

void AppConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ime_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_punctuation_) -
    reinterpret_cast<char*>(&ime_enabled_)) + sizeof(default_punctuation_));
}

AppConfig::~AppConfig() {
  // @@protoc_insertion_point(destructor:khiin.proto.AppConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void AppConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ime_enabled_;
  if (this != internal_default_instance()) delete key_config_;
  if (this != internal_default_instance()) delete telex_enabled_;
  if (this != internal_default_instance()) delete dotted_khin_;
  if (this != internal_default_instance()) delete autokhin_;
  if (this != internal_default_instance()) delete easy_ch_;
  if (this != internal_default_instance()) delete uppercase_nasal_;
}

void AppConfig::ArenaDtor(void* object) {
  AppConfig* _this = reinterpret_cast< AppConfig* >(object);
  (void)_this;
}
void AppConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.AppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ime_enabled_ != nullptr) {
    delete ime_enabled_;
  }
  ime_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_config_ != nullptr) {
    delete key_config_;
  }
  key_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && telex_enabled_ != nullptr) {
    delete telex_enabled_;
  }
  telex_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dotted_khin_ != nullptr) {
    delete dotted_khin_;
  }
  dotted_khin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && autokhin_ != nullptr) {
    delete autokhin_;
  }
  autokhin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && easy_ch_ != nullptr) {
    delete easy_ch_;
  }
  easy_ch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uppercase_nasal_ != nullptr) {
    delete uppercase_nasal_;
  }
  uppercase_nasal_ = nullptr;
  ::memset(&input_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_punctuation_) -
      reinterpret_cast<char*>(&input_mode_)) + sizeof(default_punctuation_));
  _internal_metadata_.Clear<std::string>();
}

const char* AppConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.BoolValue ime_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ime_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.KeyConfiguration key_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.InputMode input_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_mode(static_cast<::khiin::proto::InputMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue telex_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_telex_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue dotted_khin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dotted_khin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue autokhin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_autokhin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.DefaultPunctuation default_punctuation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_punctuation(static_cast<::khiin::proto::DefaultPunctuation>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue easy_ch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_easy_ch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.BoolValue uppercase_nasal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uppercase_nasal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.AppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.BoolValue ime_enabled = 1;
  if (this->_internal_has_ime_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ime_enabled(this), target, stream);
  }

  // .khiin.proto.KeyConfiguration key_config = 2;
  if (this->_internal_has_key_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_config(this), target, stream);
  }

  // .khiin.proto.InputMode input_mode = 3;
  if (this->_internal_input_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_input_mode(), target);
  }

  // .khiin.proto.BoolValue telex_enabled = 4;
  if (this->_internal_has_telex_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::telex_enabled(this), target, stream);
  }

  // .khiin.proto.BoolValue dotted_khin = 5;
  if (this->_internal_has_dotted_khin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dotted_khin(this), target, stream);
  }

  // .khiin.proto.BoolValue autokhin = 6;
  if (this->_internal_has_autokhin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::autokhin(this), target, stream);
  }

  // .khiin.proto.DefaultPunctuation default_punctuation = 7;
  if (this->_internal_default_punctuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_default_punctuation(), target);
  }

  // .khiin.proto.BoolValue easy_ch = 8;
  if (this->_internal_has_easy_ch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::easy_ch(this), target, stream);
  }

  // .khiin.proto.BoolValue uppercase_nasal = 9;
  if (this->_internal_has_uppercase_nasal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::uppercase_nasal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.AppConfig)
  return target;
}

size_t AppConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.AppConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.proto.BoolValue ime_enabled = 1;
  if (this->_internal_has_ime_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ime_enabled_);
  }

  // .khiin.proto.KeyConfiguration key_config = 2;
  if (this->_internal_has_key_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_config_);
  }

  // .khiin.proto.BoolValue telex_enabled = 4;
  if (this->_internal_has_telex_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telex_enabled_);
  }

  // .khiin.proto.BoolValue dotted_khin = 5;
  if (this->_internal_has_dotted_khin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dotted_khin_);
  }

  // .khiin.proto.BoolValue autokhin = 6;
  if (this->_internal_has_autokhin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *autokhin_);
  }

  // .khiin.proto.BoolValue easy_ch = 8;
  if (this->_internal_has_easy_ch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *easy_ch_);
  }

  // .khiin.proto.BoolValue uppercase_nasal = 9;
  if (this->_internal_has_uppercase_nasal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uppercase_nasal_);
  }

  // .khiin.proto.InputMode input_mode = 3;
  if (this->_internal_input_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_mode());
  }

  // .khiin.proto.DefaultPunctuation default_punctuation = 7;
  if (this->_internal_default_punctuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_punctuation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppConfig*>(
      &from));
}

void AppConfig::MergeFrom(const AppConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.AppConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ime_enabled()) {
    _internal_mutable_ime_enabled()->::khiin::proto::BoolValue::MergeFrom(from._internal_ime_enabled());
  }
  if (from._internal_has_key_config()) {
    _internal_mutable_key_config()->::khiin::proto::KeyConfiguration::MergeFrom(from._internal_key_config());
  }
  if (from._internal_has_telex_enabled()) {
    _internal_mutable_telex_enabled()->::khiin::proto::BoolValue::MergeFrom(from._internal_telex_enabled());
  }
  if (from._internal_has_dotted_khin()) {
    _internal_mutable_dotted_khin()->::khiin::proto::BoolValue::MergeFrom(from._internal_dotted_khin());
  }
  if (from._internal_has_autokhin()) {
    _internal_mutable_autokhin()->::khiin::proto::BoolValue::MergeFrom(from._internal_autokhin());
  }
  if (from._internal_has_easy_ch()) {
    _internal_mutable_easy_ch()->::khiin::proto::BoolValue::MergeFrom(from._internal_easy_ch());
  }
  if (from._internal_has_uppercase_nasal()) {
    _internal_mutable_uppercase_nasal()->::khiin::proto::BoolValue::MergeFrom(from._internal_uppercase_nasal());
  }
  if (from._internal_input_mode() != 0) {
    _internal_set_input_mode(from._internal_input_mode());
  }
  if (from._internal_default_punctuation() != 0) {
    _internal_set_default_punctuation(from._internal_default_punctuation());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AppConfig::CopyFrom(const AppConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.AppConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConfig::IsInitialized() const {
  return true;
}

void AppConfig::InternalSwap(AppConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppConfig, default_punctuation_)
      + sizeof(AppConfig::default_punctuation_)
      - PROTOBUF_FIELD_OFFSET(AppConfig, ime_enabled_)>(
          reinterpret_cast<char*>(&ime_enabled_),
          reinterpret_cast<char*>(&other->ime_enabled_));
}

std::string AppConfig::GetTypeName() const {
  return "khiin.proto.AppConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::khiin::proto::BoolValue* Arena::CreateMaybeMessage< ::khiin::proto::BoolValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::BoolValue >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::KeyConfiguration* Arena::CreateMaybeMessage< ::khiin::proto::KeyConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::KeyConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::AppConfig* Arena::CreateMaybeMessage< ::khiin::proto::AppConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::AppConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
