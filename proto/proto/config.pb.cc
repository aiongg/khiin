// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#include "proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace khiin {
namespace proto {
constexpr KeyConfiguration::KeyConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telex_t2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t7_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t8_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_t9_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , telex_khin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alt_hyphen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nasal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dot_above_right_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dots_below_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_uppercase_nasal_(false)
  , use_digits_as_fallback_(false){}
struct KeyConfigurationDefaultTypeInternal {
  constexpr KeyConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyConfigurationDefaultTypeInternal() {}
  union {
    KeyConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyConfigurationDefaultTypeInternal _KeyConfiguration_default_instance_;
constexpr AppConfig::AppConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_config_(nullptr)
  , input_mode_(0)
{}
struct AppConfigDefaultTypeInternal {
  constexpr AppConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDefaultTypeInternal() {}
  union {
    AppConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDefaultTypeInternal _AppConfig_default_instance_;
}  // namespace proto
}  // namespace khiin
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fconfig_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t2_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t3_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t5_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t6_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t7_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t8_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_t9_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, telex_khin_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, alt_hyphen_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, nasal_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, dot_above_right_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, dots_below_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, enable_uppercase_nasal_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyConfiguration, use_digits_as_fallback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::AppConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::AppConfig, key_config_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::AppConfig, input_mode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::khiin::proto::KeyConfiguration)},
  { 20, -1, -1, sizeof(::khiin::proto::AppConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_KeyConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_AppConfig_default_instance_),
};

const char descriptor_table_protodef_proto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto/config.proto\022\013khiin.proto\"\264\002\n\020Ke"
  "yConfiguration\022\020\n\010telex_t2\030\001 \001(\t\022\020\n\010tele"
  "x_t3\030\002 \001(\t\022\020\n\010telex_t5\030\003 \001(\t\022\020\n\010telex_t6"
  "\030\004 \001(\t\022\020\n\010telex_t7\030\005 \001(\t\022\020\n\010telex_t8\030\006 \001"
  "(\t\022\020\n\010telex_t9\030\007 \001(\t\022\022\n\ntelex_khin\030\010 \001(\t"
  "\022\022\n\nalt_hyphen\030\t \001(\t\022\r\n\005nasal\030\n \001(\t\022\027\n\017d"
  "ot_above_right\030\013 \001(\t\022\022\n\ndots_below\030\014 \001(\t"
  "\022\036\n\026enable_uppercase_nasal\030\r \001(\010\022\036\n\026use_"
  "digits_as_fallback\030\016 \001(\010\"j\n\tAppConfig\0221\n"
  "\nkey_config\030\001 \001(\0132\035.khiin.proto.KeyConfi"
  "guration\022*\n\ninput_mode\030\002 \001(\0162\026.khiin.pro"
  "to.InputMode*Z\n\tInputMode\022\022\n\016IM_UNSPECIF"
  "IED\020\000\022\014\n\010IM_ALPHA\020\001\022\021\n\rIM_CONTINUOUS\020\002\022\014"
  "\n\010IM_BASIC\020\003\022\n\n\006IM_PRO\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconfig_2eproto = {
  false, false, 552, descriptor_table_protodef_proto_2fconfig_2eproto, "proto/config.proto", 
  &descriptor_table_proto_2fconfig_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fconfig_2eproto::offsets,
  file_level_metadata_proto_2fconfig_2eproto, file_level_enum_descriptors_proto_2fconfig_2eproto, file_level_service_descriptors_proto_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fconfig_2eproto_getter() {
  return &descriptor_table_proto_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fconfig_2eproto(&descriptor_table_proto_2fconfig_2eproto);
namespace khiin {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fconfig_2eproto);
  return file_level_enum_descriptors_proto_2fconfig_2eproto[0];
}
bool InputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KeyConfiguration::_Internal {
 public:
};

KeyConfiguration::KeyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.KeyConfiguration)
}
KeyConfiguration::KeyConfiguration(const KeyConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  telex_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t2().empty()) {
    telex_t2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t2(), 
      GetArenaForAllocation());
  }
  telex_t3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t3().empty()) {
    telex_t3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t3(), 
      GetArenaForAllocation());
  }
  telex_t5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t5().empty()) {
    telex_t5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t5(), 
      GetArenaForAllocation());
  }
  telex_t6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t6().empty()) {
    telex_t6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t6(), 
      GetArenaForAllocation());
  }
  telex_t7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t7().empty()) {
    telex_t7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t7(), 
      GetArenaForAllocation());
  }
  telex_t8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t8().empty()) {
    telex_t8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t8(), 
      GetArenaForAllocation());
  }
  telex_t9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_t9().empty()) {
    telex_t9_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_t9(), 
      GetArenaForAllocation());
  }
  telex_khin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_telex_khin().empty()) {
    telex_khin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_telex_khin(), 
      GetArenaForAllocation());
  }
  alt_hyphen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alt_hyphen().empty()) {
    alt_hyphen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alt_hyphen(), 
      GetArenaForAllocation());
  }
  nasal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nasal().empty()) {
    nasal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nasal(), 
      GetArenaForAllocation());
  }
  dot_above_right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dot_above_right().empty()) {
    dot_above_right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dot_above_right(), 
      GetArenaForAllocation());
  }
  dots_below_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dots_below().empty()) {
    dots_below_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dots_below(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_uppercase_nasal_, &from.enable_uppercase_nasal_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_digits_as_fallback_) -
    reinterpret_cast<char*>(&enable_uppercase_nasal_)) + sizeof(use_digits_as_fallback_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.KeyConfiguration)
}

void KeyConfiguration::SharedCtor() {
telex_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_t9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
telex_khin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alt_hyphen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nasal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dot_above_right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dots_below_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_uppercase_nasal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_digits_as_fallback_) -
    reinterpret_cast<char*>(&enable_uppercase_nasal_)) + sizeof(use_digits_as_fallback_));
}

KeyConfiguration::~KeyConfiguration() {
  // @@protoc_insertion_point(destructor:khiin.proto.KeyConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  telex_t2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_t9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telex_khin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_hyphen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nasal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dot_above_right_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dots_below_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyConfiguration::ArenaDtor(void* object) {
  KeyConfiguration* _this = reinterpret_cast< KeyConfiguration* >(object);
  (void)_this;
}
void KeyConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.KeyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  telex_t2_.ClearToEmpty();
  telex_t3_.ClearToEmpty();
  telex_t5_.ClearToEmpty();
  telex_t6_.ClearToEmpty();
  telex_t7_.ClearToEmpty();
  telex_t8_.ClearToEmpty();
  telex_t9_.ClearToEmpty();
  telex_khin_.ClearToEmpty();
  alt_hyphen_.ClearToEmpty();
  nasal_.ClearToEmpty();
  dot_above_right_.ClearToEmpty();
  dots_below_.ClearToEmpty();
  ::memset(&enable_uppercase_nasal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_digits_as_fallback_) -
      reinterpret_cast<char*>(&enable_uppercase_nasal_)) + sizeof(use_digits_as_fallback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string telex_t2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_telex_t2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_telex_t3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_telex_t5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t5"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_telex_t6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t6"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t7 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_telex_t7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t7"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t8 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_telex_t8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t8"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_t9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_telex_t9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_t9"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string telex_khin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_telex_khin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.telex_khin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alt_hyphen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_alt_hyphen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.alt_hyphen"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nasal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_nasal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.nasal"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dot_above_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dot_above_right();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.dot_above_right"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dots_below = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_dots_below();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.KeyConfiguration.dots_below"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_uppercase_nasal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          enable_uppercase_nasal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_digits_as_fallback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          use_digits_as_fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.KeyConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string telex_t2 = 1;
  if (!this->_internal_telex_t2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t2().data(), static_cast<int>(this->_internal_telex_t2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t2");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_telex_t2(), target);
  }

  // string telex_t3 = 2;
  if (!this->_internal_telex_t3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t3().data(), static_cast<int>(this->_internal_telex_t3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t3");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_telex_t3(), target);
  }

  // string telex_t5 = 3;
  if (!this->_internal_telex_t5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t5().data(), static_cast<int>(this->_internal_telex_t5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t5");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_telex_t5(), target);
  }

  // string telex_t6 = 4;
  if (!this->_internal_telex_t6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t6().data(), static_cast<int>(this->_internal_telex_t6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_telex_t6(), target);
  }

  // string telex_t7 = 5;
  if (!this->_internal_telex_t7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t7().data(), static_cast<int>(this->_internal_telex_t7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t7");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_telex_t7(), target);
  }

  // string telex_t8 = 6;
  if (!this->_internal_telex_t8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t8().data(), static_cast<int>(this->_internal_telex_t8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t8");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_telex_t8(), target);
  }

  // string telex_t9 = 7;
  if (!this->_internal_telex_t9().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_t9().data(), static_cast<int>(this->_internal_telex_t9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_t9");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_telex_t9(), target);
  }

  // string telex_khin = 8;
  if (!this->_internal_telex_khin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telex_khin().data(), static_cast<int>(this->_internal_telex_khin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.telex_khin");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_telex_khin(), target);
  }

  // string alt_hyphen = 9;
  if (!this->_internal_alt_hyphen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alt_hyphen().data(), static_cast<int>(this->_internal_alt_hyphen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.alt_hyphen");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_alt_hyphen(), target);
  }

  // string nasal = 10;
  if (!this->_internal_nasal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nasal().data(), static_cast<int>(this->_internal_nasal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.nasal");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nasal(), target);
  }

  // string dot_above_right = 11;
  if (!this->_internal_dot_above_right().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dot_above_right().data(), static_cast<int>(this->_internal_dot_above_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.dot_above_right");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dot_above_right(), target);
  }

  // string dots_below = 12;
  if (!this->_internal_dots_below().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dots_below().data(), static_cast<int>(this->_internal_dots_below().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.KeyConfiguration.dots_below");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dots_below(), target);
  }

  // bool enable_uppercase_nasal = 13;
  if (this->_internal_enable_uppercase_nasal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_enable_uppercase_nasal(), target);
  }

  // bool use_digits_as_fallback = 14;
  if (this->_internal_use_digits_as_fallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_use_digits_as_fallback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.KeyConfiguration)
  return target;
}

size_t KeyConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.KeyConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string telex_t2 = 1;
  if (!this->_internal_telex_t2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t2());
  }

  // string telex_t3 = 2;
  if (!this->_internal_telex_t3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t3());
  }

  // string telex_t5 = 3;
  if (!this->_internal_telex_t5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t5());
  }

  // string telex_t6 = 4;
  if (!this->_internal_telex_t6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t6());
  }

  // string telex_t7 = 5;
  if (!this->_internal_telex_t7().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t7());
  }

  // string telex_t8 = 6;
  if (!this->_internal_telex_t8().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t8());
  }

  // string telex_t9 = 7;
  if (!this->_internal_telex_t9().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_t9());
  }

  // string telex_khin = 8;
  if (!this->_internal_telex_khin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telex_khin());
  }

  // string alt_hyphen = 9;
  if (!this->_internal_alt_hyphen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alt_hyphen());
  }

  // string nasal = 10;
  if (!this->_internal_nasal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nasal());
  }

  // string dot_above_right = 11;
  if (!this->_internal_dot_above_right().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dot_above_right());
  }

  // string dots_below = 12;
  if (!this->_internal_dots_below().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dots_below());
  }

  // bool enable_uppercase_nasal = 13;
  if (this->_internal_enable_uppercase_nasal() != 0) {
    total_size += 1 + 1;
  }

  // bool use_digits_as_fallback = 14;
  if (this->_internal_use_digits_as_fallback() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyConfiguration::GetClassData() const { return &_class_data_; }

void KeyConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyConfiguration *>(to)->MergeFrom(
      static_cast<const KeyConfiguration &>(from));
}


void KeyConfiguration::MergeFrom(const KeyConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.KeyConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_telex_t2().empty()) {
    _internal_set_telex_t2(from._internal_telex_t2());
  }
  if (!from._internal_telex_t3().empty()) {
    _internal_set_telex_t3(from._internal_telex_t3());
  }
  if (!from._internal_telex_t5().empty()) {
    _internal_set_telex_t5(from._internal_telex_t5());
  }
  if (!from._internal_telex_t6().empty()) {
    _internal_set_telex_t6(from._internal_telex_t6());
  }
  if (!from._internal_telex_t7().empty()) {
    _internal_set_telex_t7(from._internal_telex_t7());
  }
  if (!from._internal_telex_t8().empty()) {
    _internal_set_telex_t8(from._internal_telex_t8());
  }
  if (!from._internal_telex_t9().empty()) {
    _internal_set_telex_t9(from._internal_telex_t9());
  }
  if (!from._internal_telex_khin().empty()) {
    _internal_set_telex_khin(from._internal_telex_khin());
  }
  if (!from._internal_alt_hyphen().empty()) {
    _internal_set_alt_hyphen(from._internal_alt_hyphen());
  }
  if (!from._internal_nasal().empty()) {
    _internal_set_nasal(from._internal_nasal());
  }
  if (!from._internal_dot_above_right().empty()) {
    _internal_set_dot_above_right(from._internal_dot_above_right());
  }
  if (!from._internal_dots_below().empty()) {
    _internal_set_dots_below(from._internal_dots_below());
  }
  if (from._internal_enable_uppercase_nasal() != 0) {
    _internal_set_enable_uppercase_nasal(from._internal_enable_uppercase_nasal());
  }
  if (from._internal_use_digits_as_fallback() != 0) {
    _internal_set_use_digits_as_fallback(from._internal_use_digits_as_fallback());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyConfiguration::CopyFrom(const KeyConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.KeyConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyConfiguration::IsInitialized() const {
  return true;
}

void KeyConfiguration::InternalSwap(KeyConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t2_, lhs_arena,
      &other->telex_t2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t3_, lhs_arena,
      &other->telex_t3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t5_, lhs_arena,
      &other->telex_t5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t6_, lhs_arena,
      &other->telex_t6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t7_, lhs_arena,
      &other->telex_t7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t8_, lhs_arena,
      &other->telex_t8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_t9_, lhs_arena,
      &other->telex_t9_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &telex_khin_, lhs_arena,
      &other->telex_khin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alt_hyphen_, lhs_arena,
      &other->alt_hyphen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nasal_, lhs_arena,
      &other->nasal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dot_above_right_, lhs_arena,
      &other->dot_above_right_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dots_below_, lhs_arena,
      &other->dots_below_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyConfiguration, use_digits_as_fallback_)
      + sizeof(KeyConfiguration::use_digits_as_fallback_)
      - PROTOBUF_FIELD_OFFSET(KeyConfiguration, enable_uppercase_nasal_)>(
          reinterpret_cast<char*>(&enable_uppercase_nasal_),
          reinterpret_cast<char*>(&other->enable_uppercase_nasal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fconfig_2eproto_getter, &descriptor_table_proto_2fconfig_2eproto_once,
      file_level_metadata_proto_2fconfig_2eproto[0]);
}

// ===================================================================

class AppConfig::_Internal {
 public:
  static const ::khiin::proto::KeyConfiguration& key_config(const AppConfig* msg);
};

const ::khiin::proto::KeyConfiguration&
AppConfig::_Internal::key_config(const AppConfig* msg) {
  return *msg->key_config_;
}
AppConfig::AppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.AppConfig)
}
AppConfig::AppConfig(const AppConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_config()) {
    key_config_ = new ::khiin::proto::KeyConfiguration(*from.key_config_);
  } else {
    key_config_ = nullptr;
  }
  input_mode_ = from.input_mode_;
  // @@protoc_insertion_point(copy_constructor:khiin.proto.AppConfig)
}

void AppConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_mode_) -
    reinterpret_cast<char*>(&key_config_)) + sizeof(input_mode_));
}

AppConfig::~AppConfig() {
  // @@protoc_insertion_point(destructor:khiin.proto.AppConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_config_;
}

void AppConfig::ArenaDtor(void* object) {
  AppConfig* _this = reinterpret_cast< AppConfig* >(object);
  (void)_this;
}
void AppConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.AppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_config_ != nullptr) {
    delete key_config_;
  }
  key_config_ = nullptr;
  input_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.KeyConfiguration key_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.InputMode input_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_input_mode(static_cast<::khiin::proto::InputMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.AppConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.KeyConfiguration key_config = 1;
  if (this->_internal_has_key_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_config(this), target, stream);
  }

  // .khiin.proto.InputMode input_mode = 2;
  if (this->_internal_input_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_input_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.AppConfig)
  return target;
}

size_t AppConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.AppConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.proto.KeyConfiguration key_config = 1;
  if (this->_internal_has_key_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_config_);
  }

  // .khiin.proto.InputMode input_mode = 2;
  if (this->_internal_input_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppConfig::GetClassData() const { return &_class_data_; }

void AppConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppConfig *>(to)->MergeFrom(
      static_cast<const AppConfig &>(from));
}


void AppConfig::MergeFrom(const AppConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.AppConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_config()) {
    _internal_mutable_key_config()->::khiin::proto::KeyConfiguration::MergeFrom(from._internal_key_config());
  }
  if (from._internal_input_mode() != 0) {
    _internal_set_input_mode(from._internal_input_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppConfig::CopyFrom(const AppConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.AppConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConfig::IsInitialized() const {
  return true;
}

void AppConfig::InternalSwap(AppConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppConfig, input_mode_)
      + sizeof(AppConfig::input_mode_)
      - PROTOBUF_FIELD_OFFSET(AppConfig, key_config_)>(
          reinterpret_cast<char*>(&key_config_),
          reinterpret_cast<char*>(&other->key_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fconfig_2eproto_getter, &descriptor_table_proto_2fconfig_2eproto_once,
      file_level_metadata_proto_2fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::khiin::proto::KeyConfiguration* Arena::CreateMaybeMessage< ::khiin::proto::KeyConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::KeyConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::AppConfig* Arena::CreateMaybeMessage< ::khiin::proto::AppConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::AppConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
