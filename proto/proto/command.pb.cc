// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/command.proto

#include "proto/command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace khiin {
namespace proto {
constexpr KeyEvent::KeyEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modifier_keys_()
  , _modifier_keys_cached_byte_size_(0)
  , key_code_(0)
  , special_key_(0)
{}
struct KeyEventDefaultTypeInternal {
  constexpr KeyEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyEventDefaultTypeInternal() {}
  union {
    KeyEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_event_(nullptr)
  , config_(nullptr)
  , type_(0)

  , candidate_id_(0)
  , cursor_position_(0){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Preedit_Segment::Preedit_Segment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct Preedit_SegmentDefaultTypeInternal {
  constexpr Preedit_SegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Preedit_SegmentDefaultTypeInternal() {}
  union {
    Preedit_Segment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Preedit_SegmentDefaultTypeInternal _Preedit_Segment_default_instance_;
constexpr Preedit::Preedit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_()
  , cursor_position_(0){}
struct PreeditDefaultTypeInternal {
  constexpr PreeditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreeditDefaultTypeInternal() {}
  union {
    Preedit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreeditDefaultTypeInternal _Preedit_default_instance_;
constexpr Candidate::Candidate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , category_(0)
{}
struct CandidateDefaultTypeInternal {
  constexpr CandidateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateDefaultTypeInternal() {}
  union {
    Candidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateDefaultTypeInternal _Candidate_default_instance_;
constexpr CandidateList::CandidateList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidates_()
  , focused_(0){}
struct CandidateListDefaultTypeInternal {
  constexpr CandidateListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateListDefaultTypeInternal() {}
  union {
    CandidateList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateListDefaultTypeInternal _CandidateList_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preedit_(nullptr)
  , candidate_list_(nullptr)
  , error_(0)

  , edit_state_(0)

  , consumable_(false){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr Command::Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(nullptr)
  , response_(nullptr){}
struct CommandDefaultTypeInternal {
  constexpr CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace proto
}  // namespace khiin
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcommand_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fcommand_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyEvent, key_code_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyEvent, special_key_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::KeyEvent, modifier_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, type_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, key_event_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, cursor_position_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Request, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit_Segment, status_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit_Segment, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit, segments_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Preedit, cursor_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, id_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, value_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, key_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, annotation_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Candidate, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::CandidateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::CandidateList, candidates_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::CandidateList, focused_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, error_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, preedit_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, candidate_list_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, edit_state_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Response, consumable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Command, request_),
  PROTOBUF_FIELD_OFFSET(::khiin::proto::Command, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::khiin::proto::KeyEvent)},
  { 9, -1, -1, sizeof(::khiin::proto::Request)},
  { 20, -1, -1, sizeof(::khiin::proto::Preedit_Segment)},
  { 28, -1, -1, sizeof(::khiin::proto::Preedit)},
  { 36, -1, -1, sizeof(::khiin::proto::Candidate)},
  { 47, -1, -1, sizeof(::khiin::proto::CandidateList)},
  { 55, -1, -1, sizeof(::khiin::proto::Response)},
  { 66, -1, -1, sizeof(::khiin::proto::Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_KeyEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Preedit_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Preedit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Candidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_CandidateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::khiin::proto::_Command_default_instance_),
};

const char descriptor_table_protodef_proto_2fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/command.proto\022\013khiin.proto\032\022prot"
  "o/config.proto\"{\n\010KeyEvent\022\020\n\010key_code\030\001"
  " \001(\005\022,\n\013special_key\030\002 \001(\0162\027.khiin.proto."
  "SpecialKey\022/\n\rmodifier_keys\030\003 \003(\0162\030.khii"
  "n.proto.ModifierKey\"\262\001\n\007Request\022&\n\004type\030"
  "\001 \001(\0162\030.khiin.proto.CommandType\022(\n\tkey_e"
  "vent\030\002 \001(\0132\025.khiin.proto.KeyEvent\022\024\n\014can"
  "didate_id\030\003 \001(\005\022\027\n\017cursor_position\030\004 \001(\005"
  "\022&\n\006config\030\005 \001(\0132\026.khiin.proto.AppConfig"
  "\"\230\001\n\007Preedit\022.\n\010segments\030\001 \003(\0132\034.khiin.p"
  "roto.Preedit.Segment\022\027\n\017cursor_position\030"
  "\002 \001(\005\032D\n\007Segment\022*\n\006status\030\001 \001(\0162\032.khiin"
  ".proto.SegmentStatus\022\r\n\005value\030\002 \001(\t\"\274\001\n\t"
  "Candidate\022\n\n\002id\030\001 \001(\005\022\r\n\005value\030\002 \001(\t\022\013\n\003"
  "key\030\003 \001(\t\022\022\n\nannotation\030\004 \001(\t\0221\n\010categor"
  "y\030\005 \001(\0162\037.khiin.proto.Candidate.Category"
  "\"@\n\010Category\022\016\n\nCCAT_BASIC\020\000\022\021\n\rCCAT_EXT"
  "ENDED\020\001\022\021\n\rCCAT_FALLBACK\020\002\"L\n\rCandidateL"
  "ist\022*\n\ncandidates\030\001 \003(\0132\026.khiin.proto.Ca"
  "ndidate\022\017\n\007focused\030\002 \001(\005\"\314\001\n\010Response\022%\n"
  "\005error\030\001 \001(\0162\026.khiin.proto.ErrorCode\022%\n\007"
  "preedit\030\002 \001(\0132\024.khiin.proto.Preedit\0222\n\016c"
  "andidate_list\030\003 \001(\0132\032.khiin.proto.Candid"
  "ateList\022*\n\nedit_state\030\004 \001(\0162\026.khiin.prot"
  "o.EditState\022\022\n\nconsumable\030\005 \001(\010\"Y\n\007Comma"
  "nd\022%\n\007request\030\001 \001(\0132\024.khiin.proto.Reques"
  "t\022\'\n\010response\030\002 \001(\0132\025.khiin.proto.Respon"
  "se*\321\001\n\nSpecialKey\022\013\n\007SK_NONE\020\000\022\014\n\010SK_SPA"
  "CE\020\001\022\014\n\010SK_ENTER\020\002\022\n\n\006SK_ESC\020\003\022\020\n\014SK_BAC"
  "KSPACE\020\004\022\n\n\006SK_TAB\020\005\022\013\n\007SK_LEFT\020\006\022\t\n\005SK_"
  "UP\020\007\022\014\n\010SK_RIGHT\020\010\022\013\n\007SK_DOWN\020\t\022\013\n\007SK_PG"
  "UP\020\n\022\013\n\007SK_PGDN\020\013\022\013\n\007SK_HOME\020\014\022\n\n\006SK_END"
  "\020\r\022\n\n\006SK_DEL\020\016*I\n\013ModifierKey\022\r\n\tMODK_NO"
  "NE\020\000\022\r\n\tMODK_CTRL\020\001\022\014\n\010MODK_ALT\020\002\022\016\n\nMOD"
  "K_SHIFT\020\003*\301\002\n\013CommandType\022\023\n\017CMD_UNSPECI"
  "FIED\020\000\022\020\n\014CMD_SEND_KEY\020\001\022\016\n\nCMD_REVERT\020\002"
  "\022\r\n\tCMD_RESET\020\003\022\016\n\nCMD_COMMIT\020\004\022\030\n\024CMD_S"
  "ELECT_CANDIDATE\020\005\022\027\n\023CMD_FOCUS_CANDIDATE"
  "\020\006\022\031\n\025CMD_SWITCH_INPUT_MODE\020\007\022\024\n\020CMD_PLA"
  "CE_CURSOR\020\010\022\017\n\013CMD_DISABLE\020\t\022\016\n\nCMD_ENAB"
  "LE\020\n\022\022\n\016CMD_SET_CONFIG\020\013\022\025\n\021CMD_TEST_SEN"
  "D_KEY\020\014\022\023\n\017CMD_LIST_EMOJIS\020\r\022\027\n\023CMD_RESE"
  "T_USER_DATA\020\016*T\n\rSegmentStatus\022\017\n\013SS_UNM"
  "ARKED\020\000\022\020\n\014SS_COMPOSING\020\001\022\020\n\014SS_CONVERTE"
  "D\020\002\022\016\n\nSS_FOCUSED\020\003*\035\n\tErrorCode\022\006\n\002OK\020\000"
  "\022\010\n\004FAIL\020\001*O\n\tEditState\022\014\n\010ES_EMPTY\020\000\022\020\n"
  "\014ES_COMPOSING\020\001\022\020\n\014ES_CONVERTED\020\002\022\020\n\014ES_"
  "SELECTING\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fcommand_2eproto_deps[1] = {
  &::descriptor_table_proto_2fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommand_2eproto = {
  false, false, 1899, descriptor_table_protodef_proto_2fcommand_2eproto, "proto/command.proto", 
  &descriptor_table_proto_2fcommand_2eproto_once, descriptor_table_proto_2fcommand_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_proto_2fcommand_2eproto::offsets,
  file_level_metadata_proto_2fcommand_2eproto, file_level_enum_descriptors_proto_2fcommand_2eproto, file_level_service_descriptors_proto_2fcommand_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fcommand_2eproto_getter() {
  return &descriptor_table_proto_2fcommand_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fcommand_2eproto(&descriptor_table_proto_2fcommand_2eproto);
namespace khiin {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Candidate_Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[0];
}
bool Candidate_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Candidate_Category Candidate::CCAT_BASIC;
constexpr Candidate_Category Candidate::CCAT_EXTENDED;
constexpr Candidate_Category Candidate::CCAT_FALLBACK;
constexpr Candidate_Category Candidate::Category_MIN;
constexpr Candidate_Category Candidate::Category_MAX;
constexpr int Candidate::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[1];
}
bool SpecialKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModifierKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[2];
}
bool ModifierKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[3];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[4];
}
bool SegmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[5];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommand_2eproto);
  return file_level_enum_descriptors_proto_2fcommand_2eproto[6];
}
bool EditState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class KeyEvent::_Internal {
 public:
};

KeyEvent::KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  modifier_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      modifier_keys_(from.modifier_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.KeyEvent)
}

void KeyEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&special_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:khiin.proto.KeyEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyEvent::ArenaDtor(void* object) {
  KeyEvent* _this = reinterpret_cast< KeyEvent* >(object);
  (void)_this;
}
void KeyEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&special_key_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.SpecialKey special_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_special_key(static_cast<::khiin::proto::SpecialKey>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .khiin.proto.ModifierKey modifier_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_modifier_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_modifier_keys(static_cast<::khiin::proto::ModifierKey>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key_code = 1;
  if (this->_internal_key_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_code(), target);
  }

  // .khiin.proto.SpecialKey special_key = 2;
  if (this->_internal_special_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_special_key(), target);
  }

  // repeated .khiin.proto.ModifierKey modifier_keys = 3;
  {
    int byte_size = _modifier_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, modifier_keys_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.KeyEvent)
  return target;
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.KeyEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.proto.ModifierKey modifier_keys = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modifier_keys(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _modifier_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 key_code = 1;
  if (this->_internal_key_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key_code());
  }

  // .khiin.proto.SpecialKey special_key = 2;
  if (this->_internal_special_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyEvent::GetClassData() const { return &_class_data_; }

void KeyEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyEvent *>(to)->MergeFrom(
      static_cast<const KeyEvent &>(from));
}


void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  if (from._internal_key_code() != 0) {
    _internal_set_key_code(from._internal_key_code());
  }
  if (from._internal_special_key() != 0) {
    _internal_set_special_key(from._internal_special_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::InternalSwap(KeyEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyEvent, special_key_)
      + sizeof(KeyEvent::special_key_)
      - PROTOBUF_FIELD_OFFSET(KeyEvent, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[0]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::khiin::proto::KeyEvent& key_event(const Request* msg);
  static const ::khiin::proto::AppConfig& config(const Request* msg);
};

const ::khiin::proto::KeyEvent&
Request::_Internal::key_event(const Request* msg) {
  return *msg->key_event_;
}
const ::khiin::proto::AppConfig&
Request::_Internal::config(const Request* msg) {
  return *msg->config_;
}
void Request::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_event()) {
    key_event_ = new ::khiin::proto::KeyEvent(*from.key_event_);
  } else {
    key_event_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::khiin::proto::AppConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursor_position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cursor_position_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Request)
}

void Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cursor_position_) -
    reinterpret_cast<char*>(&key_event_)) + sizeof(cursor_position_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:khiin.proto.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_event_;
  if (this != internal_default_instance()) delete config_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_event_ != nullptr) {
    delete key_event_;
  }
  key_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_position_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cursor_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::khiin::proto::CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.KeyEvent key_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 candidate_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cursor_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.AppConfig config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.CommandType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .khiin.proto.KeyEvent key_event = 2;
  if (this->_internal_has_key_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_event(this), target, stream);
  }

  // int32 candidate_id = 3;
  if (this->_internal_candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_candidate_id(), target);
  }

  // int32 cursor_position = 4;
  if (this->_internal_cursor_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cursor_position(), target);
  }

  // .khiin.proto.AppConfig config = 5;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.proto.KeyEvent key_event = 2;
  if (this->_internal_has_key_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_event_);
  }

  // .khiin.proto.AppConfig config = 5;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .khiin.proto.CommandType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 candidate_id = 3;
  if (this->_internal_candidate_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_candidate_id());
  }

  // int32 cursor_position = 4;
  if (this->_internal_cursor_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cursor_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_event()) {
    _internal_mutable_key_event()->::khiin::proto::KeyEvent::MergeFrom(from._internal_key_event());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::khiin::proto::AppConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  if (from._internal_cursor_position() != 0) {
    _internal_set_cursor_position(from._internal_cursor_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, cursor_position_)
      + sizeof(Request::cursor_position_)
      - PROTOBUF_FIELD_OFFSET(Request, key_event_)>(
          reinterpret_cast<char*>(&key_event_),
          reinterpret_cast<char*>(&other->key_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[1]);
}

// ===================================================================

class Preedit_Segment::_Internal {
 public:
};

Preedit_Segment::Preedit_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Preedit.Segment)
}
Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Preedit.Segment)
}

void Preedit_Segment::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

Preedit_Segment::~Preedit_Segment() {
  // @@protoc_insertion_point(destructor:khiin.proto.Preedit.Segment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Preedit_Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Preedit_Segment::ArenaDtor(void* object) {
  Preedit_Segment* _this = reinterpret_cast< Preedit_Segment* >(object);
  (void)_this;
}
void Preedit_Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preedit_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preedit_Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.SegmentStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::khiin::proto::SegmentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.Preedit.Segment.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit_Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.SegmentStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.Preedit.Segment.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Preedit.Segment)
  return target;
}

size_t Preedit_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Preedit.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .khiin.proto.SegmentStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Preedit_Segment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Preedit_Segment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Preedit_Segment::GetClassData() const { return &_class_data_; }

void Preedit_Segment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Preedit_Segment *>(to)->MergeFrom(
      static_cast<const Preedit_Segment &>(from));
}


void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  return true;
}

void Preedit_Segment::InternalSwap(Preedit_Segment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Preedit_Segment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[2]);
}

// ===================================================================

class Preedit::_Internal {
 public:
};

Preedit::Preedit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Preedit)
}
Preedit::Preedit(const Preedit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cursor_position_ = from.cursor_position_;
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Preedit)
}

void Preedit::SharedCtor() {
cursor_position_ = 0;
}

Preedit::~Preedit() {
  // @@protoc_insertion_point(destructor:khiin.proto.Preedit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Preedit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Preedit::ArenaDtor(void* object) {
  Preedit* _this = reinterpret_cast< Preedit* >(object);
  (void)_this;
}
void Preedit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preedit::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  cursor_position_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preedit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .khiin.proto.Preedit.Segment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 cursor_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .khiin.proto.Preedit.Segment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  // int32 cursor_position = 2;
  if (this->_internal_cursor_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cursor_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Preedit)
  return target;
}

size_t Preedit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Preedit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.proto.Preedit.Segment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 cursor_position = 2;
  if (this->_internal_cursor_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cursor_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Preedit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Preedit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Preedit::GetClassData() const { return &_class_data_; }

void Preedit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Preedit *>(to)->MergeFrom(
      static_cast<const Preedit &>(from));
}


void Preedit::MergeFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from._internal_cursor_position() != 0) {
    _internal_set_cursor_position(from._internal_cursor_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Preedit::CopyFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  return true;
}

void Preedit::InternalSwap(Preedit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  swap(cursor_position_, other->cursor_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Preedit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[3]);
}

// ===================================================================

class Candidate::_Internal {
 public:
};

Candidate::Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Candidate)
}
Candidate::Candidate(const Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation().empty()) {
    annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Candidate)
}

void Candidate::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
}

Candidate::~Candidate() {
  // @@protoc_insertion_point(destructor:khiin.proto.Candidate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candidate::ArenaDtor(void* object) {
  Candidate* _this = reinterpret_cast< Candidate* >(object);
  (void)_this;
}
void Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_.ClearToEmpty();
  annotation_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.Candidate.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.Candidate.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_annotation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "khiin.proto.Candidate.annotation"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.Candidate.Category category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::khiin::proto::Candidate_Category>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.Candidate.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.Candidate.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string annotation = 4;
  if (!this->_internal_annotation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation().data(), static_cast<int>(this->_internal_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.proto.Candidate.annotation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_annotation(), target);
  }

  // .khiin.proto.Candidate.Category category = 5;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Candidate)
  return target;
}

size_t Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Candidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string annotation = 4;
  if (!this->_internal_annotation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .khiin.proto.Candidate.Category category = 5;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Candidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Candidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Candidate::GetClassData() const { return &_class_data_; }

void Candidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Candidate *>(to)->MergeFrom(
      static_cast<const Candidate &>(from));
}


void Candidate::MergeFrom(const Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_annotation().empty()) {
    _internal_set_annotation(from._internal_annotation());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_category() != 0) {
    _internal_set_category(from._internal_category());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Candidate::CopyFrom(const Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidate::IsInitialized() const {
  return true;
}

void Candidate::InternalSwap(Candidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotation_, lhs_arena,
      &other->annotation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candidate, category_)
      + sizeof(Candidate::category_)
      - PROTOBUF_FIELD_OFFSET(Candidate, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candidate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[4]);
}

// ===================================================================

class CandidateList::_Internal {
 public:
};

CandidateList::CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.CandidateList)
}
CandidateList::CandidateList(const CandidateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  focused_ = from.focused_;
  // @@protoc_insertion_point(copy_constructor:khiin.proto.CandidateList)
}

void CandidateList::SharedCtor() {
focused_ = 0;
}

CandidateList::~CandidateList() {
  // @@protoc_insertion_point(destructor:khiin.proto.CandidateList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidateList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CandidateList::ArenaDtor(void* object) {
  CandidateList* _this = reinterpret_cast< CandidateList* >(object);
  (void)_this;
}
void CandidateList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  focused_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .khiin.proto.Candidate candidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 focused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          focused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .khiin.proto.Candidate candidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candidates(i), target, stream);
  }

  // int32 focused = 2;
  if (this->_internal_focused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_focused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.CandidateList)
  return target;
}

size_t CandidateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.CandidateList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.proto.Candidate candidates = 1;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 focused = 2;
  if (this->_internal_focused() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_focused());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidateList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidateList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidateList::GetClassData() const { return &_class_data_; }

void CandidateList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CandidateList *>(to)->MergeFrom(
      static_cast<const CandidateList &>(from));
}


void CandidateList::MergeFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from._internal_focused() != 0) {
    _internal_set_focused(from._internal_focused());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidateList::CopyFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {
  return true;
}

void CandidateList::InternalSwap(CandidateList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  candidates_.InternalSwap(&other->candidates_);
  swap(focused_, other->focused_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[5]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::khiin::proto::Preedit& preedit(const Response* msg);
  static const ::khiin::proto::CandidateList& candidate_list(const Response* msg);
};

const ::khiin::proto::Preedit&
Response::_Internal::preedit(const Response* msg) {
  return *msg->preedit_;
}
const ::khiin::proto::CandidateList&
Response::_Internal::candidate_list(const Response* msg) {
  return *msg->candidate_list_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preedit()) {
    preedit_ = new ::khiin::proto::Preedit(*from.preedit_);
  } else {
    preedit_ = nullptr;
  }
  if (from._internal_has_candidate_list()) {
    candidate_list_ = new ::khiin::proto::CandidateList(*from.candidate_list_);
  } else {
    candidate_list_ = nullptr;
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&consumable_) -
    reinterpret_cast<char*>(&error_)) + sizeof(consumable_));
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Response)
}

void Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preedit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consumable_) -
    reinterpret_cast<char*>(&preedit_)) + sizeof(consumable_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:khiin.proto.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preedit_;
  if (this != internal_default_instance()) delete candidate_list_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preedit_ != nullptr) {
    delete preedit_;
  }
  preedit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && candidate_list_ != nullptr) {
    delete candidate_list_;
  }
  candidate_list_ = nullptr;
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consumable_) -
      reinterpret_cast<char*>(&error_)) + sizeof(consumable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::khiin::proto::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.Preedit preedit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preedit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.CandidateList candidate_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.EditState edit_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edit_state(static_cast<::khiin::proto::EditState>(val));
        } else
          goto handle_unusual;
        continue;
      // bool consumable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          consumable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // .khiin.proto.Preedit preedit = 2;
  if (this->_internal_has_preedit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preedit(this), target, stream);
  }

  // .khiin.proto.CandidateList candidate_list = 3;
  if (this->_internal_has_candidate_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::candidate_list(this), target, stream);
  }

  // .khiin.proto.EditState edit_state = 4;
  if (this->_internal_edit_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_edit_state(), target);
  }

  // bool consumable = 5;
  if (this->_internal_consumable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_consumable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.proto.Preedit preedit = 2;
  if (this->_internal_has_preedit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preedit_);
  }

  // .khiin.proto.CandidateList candidate_list = 3;
  if (this->_internal_has_candidate_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_list_);
  }

  // .khiin.proto.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // .khiin.proto.EditState edit_state = 4;
  if (this->_internal_edit_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edit_state());
  }

  // bool consumable = 5;
  if (this->_internal_consumable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preedit()) {
    _internal_mutable_preedit()->::khiin::proto::Preedit::MergeFrom(from._internal_preedit());
  }
  if (from._internal_has_candidate_list()) {
    _internal_mutable_candidate_list()->::khiin::proto::CandidateList::MergeFrom(from._internal_candidate_list());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_edit_state() != 0) {
    _internal_set_edit_state(from._internal_edit_state());
  }
  if (from._internal_consumable() != 0) {
    _internal_set_consumable(from._internal_consumable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, consumable_)
      + sizeof(Response::consumable_)
      - PROTOBUF_FIELD_OFFSET(Response, preedit_)>(
          reinterpret_cast<char*>(&preedit_),
          reinterpret_cast<char*>(&other->preedit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[6]);
}

// ===================================================================

class Command::_Internal {
 public:
  static const ::khiin::proto::Request& request(const Command* msg);
  static const ::khiin::proto::Response& response(const Command* msg);
};

const ::khiin::proto::Request&
Command::_Internal::request(const Command* msg) {
  return *msg->request_;
}
const ::khiin::proto::Response&
Command::_Internal::response(const Command* msg) {
  return *msg->response_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.proto.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::khiin::proto::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::khiin::proto::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:khiin.proto.Command)
}

void Command::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&request_)) + sizeof(response_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:khiin.proto.Command)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.proto.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.proto.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.proto.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.proto.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.proto.Request request = 1;
  if (this->_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .khiin.proto.Response response = 2;
  if (this->_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.proto.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.proto.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.proto.Request request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .khiin.proto.Response response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }

void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command *>(to)->MergeFrom(
      static_cast<const Command &>(from));
}


void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.proto.Command)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _internal_mutable_request()->::khiin::proto::Request::MergeFrom(from._internal_request());
  }
  if (from._internal_has_response()) {
    _internal_mutable_response()->::khiin::proto::Response::MergeFrom(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.proto.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, response_)
      + sizeof(Command::response_)
      - PROTOBUF_FIELD_OFFSET(Command, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcommand_2eproto_getter, &descriptor_table_proto_2fcommand_2eproto_once,
      file_level_metadata_proto_2fcommand_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::khiin::proto::KeyEvent* Arena::CreateMaybeMessage< ::khiin::proto::KeyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::KeyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Request* Arena::CreateMaybeMessage< ::khiin::proto::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Preedit_Segment* Arena::CreateMaybeMessage< ::khiin::proto::Preedit_Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Preedit_Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Preedit* Arena::CreateMaybeMessage< ::khiin::proto::Preedit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Preedit >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Candidate* Arena::CreateMaybeMessage< ::khiin::proto::Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::CandidateList* Arena::CreateMaybeMessage< ::khiin::proto::CandidateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::CandidateList >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Response* Arena::CreateMaybeMessage< ::khiin::proto::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::proto::Command* Arena::CreateMaybeMessage< ::khiin::proto::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::proto::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
