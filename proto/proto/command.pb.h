// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommand_2eproto;
namespace khiin {
namespace proto {
class Candidate;
struct CandidateDefaultTypeInternal;
extern CandidateDefaultTypeInternal _Candidate_default_instance_;
class CandidateList;
struct CandidateListDefaultTypeInternal;
extern CandidateListDefaultTypeInternal _CandidateList_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class KeyEvent;
struct KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class Preedit;
struct PreeditDefaultTypeInternal;
extern PreeditDefaultTypeInternal _Preedit_default_instance_;
class Preedit_Segment;
struct Preedit_SegmentDefaultTypeInternal;
extern Preedit_SegmentDefaultTypeInternal _Preedit_Segment_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> ::khiin::proto::Candidate* Arena::CreateMaybeMessage<::khiin::proto::Candidate>(Arena*);
template<> ::khiin::proto::CandidateList* Arena::CreateMaybeMessage<::khiin::proto::CandidateList>(Arena*);
template<> ::khiin::proto::Command* Arena::CreateMaybeMessage<::khiin::proto::Command>(Arena*);
template<> ::khiin::proto::KeyEvent* Arena::CreateMaybeMessage<::khiin::proto::KeyEvent>(Arena*);
template<> ::khiin::proto::Preedit* Arena::CreateMaybeMessage<::khiin::proto::Preedit>(Arena*);
template<> ::khiin::proto::Preedit_Segment* Arena::CreateMaybeMessage<::khiin::proto::Preedit_Segment>(Arena*);
template<> ::khiin::proto::Request* Arena::CreateMaybeMessage<::khiin::proto::Request>(Arena*);
template<> ::khiin::proto::Response* Arena::CreateMaybeMessage<::khiin::proto::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace khiin {
namespace proto {

enum Candidate_Category : int {
  Candidate_Category_CCAT_BASIC = 0,
  Candidate_Category_CCAT_EXTENDED = 1,
  Candidate_Category_CCAT_FALLBACK = 2,
  Candidate_Category_Candidate_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Candidate_Category_Candidate_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Candidate_Category_IsValid(int value);
constexpr Candidate_Category Candidate_Category_Category_MIN = Candidate_Category_CCAT_BASIC;
constexpr Candidate_Category Candidate_Category_Category_MAX = Candidate_Category_CCAT_FALLBACK;
constexpr int Candidate_Category_Category_ARRAYSIZE = Candidate_Category_Category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Candidate_Category_descriptor();
template<typename T>
inline const std::string& Candidate_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Candidate_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Candidate_Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Candidate_Category_descriptor(), enum_t_value);
}
inline bool Candidate_Category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Candidate_Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Candidate_Category>(
    Candidate_Category_descriptor(), name, value);
}
enum SpecialKey : int {
  SK_NONE = 0,
  SK_SPACE = 1,
  SK_ENTER = 2,
  SK_ESC = 3,
  SK_BACKSPACE = 4,
  SK_TAB = 5,
  SK_LEFT = 6,
  SK_UP = 7,
  SK_RIGHT = 8,
  SK_DOWN = 9,
  SK_PGUP = 10,
  SK_PGDN = 11,
  SK_HOME = 12,
  SK_END = 13,
  SK_DEL = 14,
  SpecialKey_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpecialKey_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpecialKey_IsValid(int value);
constexpr SpecialKey SpecialKey_MIN = SK_NONE;
constexpr SpecialKey SpecialKey_MAX = SK_DEL;
constexpr int SpecialKey_ARRAYSIZE = SpecialKey_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialKey_descriptor();
template<typename T>
inline const std::string& SpecialKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpecialKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpecialKey_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpecialKey_descriptor(), enum_t_value);
}
inline bool SpecialKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpecialKey* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpecialKey>(
    SpecialKey_descriptor(), name, value);
}
enum ModifierKey : int {
  MODK_NONE = 0,
  MODK_CTRL = 1,
  MODK_ALT = 2,
  MODK_SHIFT = 3,
  ModifierKey_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModifierKey_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModifierKey_IsValid(int value);
constexpr ModifierKey ModifierKey_MIN = MODK_NONE;
constexpr ModifierKey ModifierKey_MAX = MODK_SHIFT;
constexpr int ModifierKey_ARRAYSIZE = ModifierKey_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModifierKey_descriptor();
template<typename T>
inline const std::string& ModifierKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModifierKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModifierKey_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModifierKey_descriptor(), enum_t_value);
}
inline bool ModifierKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModifierKey* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModifierKey>(
    ModifierKey_descriptor(), name, value);
}
enum CommandType : int {
  CMD_UNSPECIFIED = 0,
  CMD_SEND_KEY = 1,
  CMD_REVERT = 2,
  CMD_RESET = 3,
  CMD_COMMIT = 4,
  CMD_SELECT_CANDIDATE = 5,
  CMD_FOCUS_CANDIDATE = 6,
  CMD_SWITCH_INPUT_MODE = 7,
  CMD_PLACE_CURSOR = 8,
  CMD_DISABLE = 9,
  CMD_ENABLE = 10,
  CMD_SET_CONFIG = 11,
  CMD_TEST_SEND_KEY = 12,
  CMD_LIST_EMOJIS = 13,
  CMD_RESET_USER_DATA = 14,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = CMD_UNSPECIFIED;
constexpr CommandType CommandType_MAX = CMD_RESET_USER_DATA;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor();
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandType_descriptor(), enum_t_value);
}
inline bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
enum SegmentStatus : int {
  SS_UNMARKED = 0,
  SS_COMPOSING = 1,
  SS_CONVERTED = 2,
  SS_FOCUSED = 3,
  SegmentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SegmentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SegmentStatus_IsValid(int value);
constexpr SegmentStatus SegmentStatus_MIN = SS_UNMARKED;
constexpr SegmentStatus SegmentStatus_MAX = SS_FOCUSED;
constexpr int SegmentStatus_ARRAYSIZE = SegmentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentStatus_descriptor();
template<typename T>
inline const std::string& SegmentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SegmentStatus_descriptor(), enum_t_value);
}
inline bool SegmentStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SegmentStatus>(
    SegmentStatus_descriptor(), name, value);
}
enum ErrorCode : int {
  OK = 0,
  FAIL = 1,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = OK;
constexpr ErrorCode ErrorCode_MAX = FAIL;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum EditState : int {
  ES_EMPTY = 0,
  ES_COMPOSING = 1,
  ES_CONVERTED = 2,
  ES_SELECTING = 3,
  EditState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EditState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EditState_IsValid(int value);
constexpr EditState EditState_MIN = ES_EMPTY;
constexpr EditState EditState_MAX = ES_SELECTING;
constexpr int EditState_ARRAYSIZE = EditState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EditState_descriptor();
template<typename T>
inline const std::string& EditState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EditState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EditState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EditState_descriptor(), enum_t_value);
}
inline bool EditState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EditState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EditState>(
    EditState_descriptor(), name, value);
}
// ===================================================================

class KeyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.KeyEvent) */ {
 public:
  inline KeyEvent() : KeyEvent(nullptr) {}
  ~KeyEvent() override;
  explicit constexpr KeyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyEvent(const KeyEvent& from);
  KeyEvent(KeyEvent&& from) noexcept
    : KeyEvent() {
    *this = ::std::move(from);
  }

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyEvent& operator=(KeyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyEvent& a, KeyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyEvent* New() const final {
    return new KeyEvent();
  }

  KeyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.KeyEvent";
  }
  protected:
  explicit KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifierKeysFieldNumber = 3,
    kKeyCodeFieldNumber = 1,
    kSpecialKeyFieldNumber = 2,
  };
  // repeated .khiin.proto.ModifierKey modifier_keys = 3;
  int modifier_keys_size() const;
  private:
  int _internal_modifier_keys_size() const;
  public:
  void clear_modifier_keys();
  private:
  ::khiin::proto::ModifierKey _internal_modifier_keys(int index) const;
  void _internal_add_modifier_keys(::khiin::proto::ModifierKey value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_modifier_keys();
  public:
  ::khiin::proto::ModifierKey modifier_keys(int index) const;
  void set_modifier_keys(int index, ::khiin::proto::ModifierKey value);
  void add_modifier_keys(::khiin::proto::ModifierKey value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& modifier_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_modifier_keys();

  // int32 key_code = 1;
  void clear_key_code();
  ::PROTOBUF_NAMESPACE_ID::int32 key_code() const;
  void set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_code() const;
  void _internal_set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .khiin.proto.SpecialKey special_key = 2;
  void clear_special_key();
  ::khiin::proto::SpecialKey special_key() const;
  void set_special_key(::khiin::proto::SpecialKey value);
  private:
  ::khiin::proto::SpecialKey _internal_special_key() const;
  void _internal_set_special_key(::khiin::proto::SpecialKey value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.KeyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> modifier_keys_;
  mutable std::atomic<int> _modifier_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_code_;
  int special_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return new Request();
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyEventFieldNumber = 2,
    kConfigFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCandidateIdFieldNumber = 3,
    kCursorPositionFieldNumber = 4,
  };
  // .khiin.proto.KeyEvent key_event = 2;
  bool has_key_event() const;
  private:
  bool _internal_has_key_event() const;
  public:
  void clear_key_event();
  const ::khiin::proto::KeyEvent& key_event() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::KeyEvent* release_key_event();
  ::khiin::proto::KeyEvent* mutable_key_event();
  void set_allocated_key_event(::khiin::proto::KeyEvent* key_event);
  private:
  const ::khiin::proto::KeyEvent& _internal_key_event() const;
  ::khiin::proto::KeyEvent* _internal_mutable_key_event();
  public:
  void unsafe_arena_set_allocated_key_event(
      ::khiin::proto::KeyEvent* key_event);
  ::khiin::proto::KeyEvent* unsafe_arena_release_key_event();

  // .khiin.proto.AppConfig config = 5;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::khiin::proto::AppConfig& config() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::AppConfig* release_config();
  ::khiin::proto::AppConfig* mutable_config();
  void set_allocated_config(::khiin::proto::AppConfig* config);
  private:
  const ::khiin::proto::AppConfig& _internal_config() const;
  ::khiin::proto::AppConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::khiin::proto::AppConfig* config);
  ::khiin::proto::AppConfig* unsafe_arena_release_config();

  // .khiin.proto.CommandType type = 1;
  void clear_type();
  ::khiin::proto::CommandType type() const;
  void set_type(::khiin::proto::CommandType value);
  private:
  ::khiin::proto::CommandType _internal_type() const;
  void _internal_set_type(::khiin::proto::CommandType value);
  public:

  // int32 candidate_id = 3;
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cursor_position = 4;
  void clear_cursor_position();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position() const;
  void set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor_position() const;
  void _internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::proto::KeyEvent* key_event_;
  ::khiin::proto::AppConfig* config_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Preedit_Segment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Preedit.Segment) */ {
 public:
  inline Preedit_Segment() : Preedit_Segment(nullptr) {}
  ~Preedit_Segment() override;
  explicit constexpr Preedit_Segment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Preedit_Segment(const Preedit_Segment& from);
  Preedit_Segment(Preedit_Segment&& from) noexcept
    : Preedit_Segment() {
    *this = ::std::move(from);
  }

  inline Preedit_Segment& operator=(const Preedit_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Preedit_Segment& operator=(Preedit_Segment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Preedit_Segment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Preedit_Segment* internal_default_instance() {
    return reinterpret_cast<const Preedit_Segment*>(
               &_Preedit_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Preedit_Segment& a, Preedit_Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Preedit_Segment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Preedit_Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Preedit_Segment* New() const final {
    return new Preedit_Segment();
  }

  Preedit_Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Preedit_Segment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Preedit_Segment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Preedit_Segment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preedit_Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Preedit.Segment";
  }
  protected:
  explicit Preedit_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .khiin.proto.SegmentStatus status = 1;
  void clear_status();
  ::khiin::proto::SegmentStatus status() const;
  void set_status(::khiin::proto::SegmentStatus value);
  private:
  ::khiin::proto::SegmentStatus _internal_status() const;
  void _internal_set_status(::khiin::proto::SegmentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.Preedit.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Preedit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Preedit) */ {
 public:
  inline Preedit() : Preedit(nullptr) {}
  ~Preedit() override;
  explicit constexpr Preedit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Preedit(const Preedit& from);
  Preedit(Preedit&& from) noexcept
    : Preedit() {
    *this = ::std::move(from);
  }

  inline Preedit& operator=(const Preedit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Preedit& operator=(Preedit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Preedit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Preedit* internal_default_instance() {
    return reinterpret_cast<const Preedit*>(
               &_Preedit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Preedit& a, Preedit& b) {
    a.Swap(&b);
  }
  inline void Swap(Preedit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Preedit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Preedit* New() const final {
    return new Preedit();
  }

  Preedit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Preedit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Preedit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Preedit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preedit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Preedit";
  }
  protected:
  explicit Preedit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Preedit_Segment Segment;

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
    kCaretFieldNumber = 2,
    kFocusedCaretFieldNumber = 3,
  };
  // repeated .khiin.proto.Preedit.Segment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::khiin::proto::Preedit_Segment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Preedit_Segment >*
      mutable_segments();
  private:
  const ::khiin::proto::Preedit_Segment& _internal_segments(int index) const;
  ::khiin::proto::Preedit_Segment* _internal_add_segments();
  public:
  const ::khiin::proto::Preedit_Segment& segments(int index) const;
  ::khiin::proto::Preedit_Segment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Preedit_Segment >&
      segments() const;

  // int32 caret = 2;
  void clear_caret();
  ::PROTOBUF_NAMESPACE_ID::int32 caret() const;
  void set_caret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_caret() const;
  void _internal_set_caret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 focused_caret = 3;
  void clear_focused_caret();
  ::PROTOBUF_NAMESPACE_ID::int32 focused_caret() const;
  void set_focused_caret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focused_caret() const;
  void _internal_set_focused_caret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.Preedit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Preedit_Segment > segments_;
  ::PROTOBUF_NAMESPACE_ID::int32 caret_;
  ::PROTOBUF_NAMESPACE_ID::int32 focused_caret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Candidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Candidate) */ {
 public:
  inline Candidate() : Candidate(nullptr) {}
  ~Candidate() override;
  explicit constexpr Candidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Candidate(const Candidate& from);
  Candidate(Candidate&& from) noexcept
    : Candidate() {
    *this = ::std::move(from);
  }

  inline Candidate& operator=(const Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candidate& operator=(Candidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Candidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Candidate* internal_default_instance() {
    return reinterpret_cast<const Candidate*>(
               &_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Candidate& a, Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(Candidate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candidate* New() const final {
    return new Candidate();
  }

  Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Candidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Candidate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Candidate";
  }
  protected:
  explicit Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Candidate_Category Category;
  static constexpr Category CCAT_BASIC =
    Candidate_Category_CCAT_BASIC;
  static constexpr Category CCAT_EXTENDED =
    Candidate_Category_CCAT_EXTENDED;
  static constexpr Category CCAT_FALLBACK =
    Candidate_Category_CCAT_FALLBACK;
  static inline bool Category_IsValid(int value) {
    return Candidate_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    Candidate_Category_Category_MIN;
  static constexpr Category Category_MAX =
    Candidate_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    Candidate_Category_Category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Category_descriptor() {
    return Candidate_Category_descriptor();
  }
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return Candidate_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Category* value) {
    return Candidate_Category_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 3,
    kAnnotationFieldNumber = 4,
    kIdFieldNumber = 1,
    kCategoryFieldNumber = 5,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string annotation = 4;
  void clear_annotation();
  const std::string& annotation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation();
  PROTOBUF_MUST_USE_RESULT std::string* release_annotation();
  void set_allocated_annotation(std::string* annotation);
  private:
  const std::string& _internal_annotation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation(const std::string& value);
  std::string* _internal_mutable_annotation();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .khiin.proto.Candidate.Category category = 5;
  void clear_category();
  ::khiin::proto::Candidate_Category category() const;
  void set_category(::khiin::proto::Candidate_Category value);
  private:
  ::khiin::proto::Candidate_Category _internal_category() const;
  void _internal_set_category(::khiin::proto::Candidate_Category value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.Candidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class CandidateList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.CandidateList) */ {
 public:
  inline CandidateList() : CandidateList(nullptr) {}
  ~CandidateList() override;
  explicit constexpr CandidateList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidateList(const CandidateList& from);
  CandidateList(CandidateList&& from) noexcept
    : CandidateList() {
    *this = ::std::move(from);
  }

  inline CandidateList& operator=(const CandidateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateList& operator=(CandidateList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidateList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidateList* internal_default_instance() {
    return reinterpret_cast<const CandidateList*>(
               &_CandidateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CandidateList& a, CandidateList& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateList* New() const final {
    return new CandidateList();
  }

  CandidateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidateList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidateList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.CandidateList";
  }
  protected:
  explicit CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 1,
    kFocusedFieldNumber = 2,
  };
  // repeated .khiin.proto.Candidate candidates = 1;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::khiin::proto::Candidate* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Candidate >*
      mutable_candidates();
  private:
  const ::khiin::proto::Candidate& _internal_candidates(int index) const;
  ::khiin::proto::Candidate* _internal_add_candidates();
  public:
  const ::khiin::proto::Candidate& candidates(int index) const;
  ::khiin::proto::Candidate* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Candidate >&
      candidates() const;

  // int32 focused = 2;
  void clear_focused();
  ::PROTOBUF_NAMESPACE_ID::int32 focused() const;
  void set_focused(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focused() const;
  void _internal_set_focused(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.CandidateList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Candidate > candidates_;
  ::PROTOBUF_NAMESPACE_ID::int32 focused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreeditFieldNumber = 2,
    kCandidateListFieldNumber = 3,
    kErrorFieldNumber = 1,
    kEditStateFieldNumber = 4,
    kConsumableFieldNumber = 5,
  };
  // .khiin.proto.Preedit preedit = 2;
  bool has_preedit() const;
  private:
  bool _internal_has_preedit() const;
  public:
  void clear_preedit();
  const ::khiin::proto::Preedit& preedit() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::Preedit* release_preedit();
  ::khiin::proto::Preedit* mutable_preedit();
  void set_allocated_preedit(::khiin::proto::Preedit* preedit);
  private:
  const ::khiin::proto::Preedit& _internal_preedit() const;
  ::khiin::proto::Preedit* _internal_mutable_preedit();
  public:
  void unsafe_arena_set_allocated_preedit(
      ::khiin::proto::Preedit* preedit);
  ::khiin::proto::Preedit* unsafe_arena_release_preedit();

  // .khiin.proto.CandidateList candidate_list = 3;
  bool has_candidate_list() const;
  private:
  bool _internal_has_candidate_list() const;
  public:
  void clear_candidate_list();
  const ::khiin::proto::CandidateList& candidate_list() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::CandidateList* release_candidate_list();
  ::khiin::proto::CandidateList* mutable_candidate_list();
  void set_allocated_candidate_list(::khiin::proto::CandidateList* candidate_list);
  private:
  const ::khiin::proto::CandidateList& _internal_candidate_list() const;
  ::khiin::proto::CandidateList* _internal_mutable_candidate_list();
  public:
  void unsafe_arena_set_allocated_candidate_list(
      ::khiin::proto::CandidateList* candidate_list);
  ::khiin::proto::CandidateList* unsafe_arena_release_candidate_list();

  // .khiin.proto.ErrorCode error = 1;
  void clear_error();
  ::khiin::proto::ErrorCode error() const;
  void set_error(::khiin::proto::ErrorCode value);
  private:
  ::khiin::proto::ErrorCode _internal_error() const;
  void _internal_set_error(::khiin::proto::ErrorCode value);
  public:

  // .khiin.proto.EditState edit_state = 4;
  void clear_edit_state();
  ::khiin::proto::EditState edit_state() const;
  void set_edit_state(::khiin::proto::EditState value);
  private:
  ::khiin::proto::EditState _internal_edit_state() const;
  void _internal_set_edit_state(::khiin::proto::EditState value);
  public:

  // bool consumable = 5;
  void clear_consumable();
  bool consumable() const;
  void set_consumable(bool value);
  private:
  bool _internal_consumable() const;
  void _internal_set_consumable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::proto::Preedit* preedit_;
  ::khiin::proto::CandidateList* candidate_list_;
  int error_;
  int edit_state_;
  bool consumable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return new Command();
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .khiin.proto.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::khiin::proto::Request& request() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::Request* release_request();
  ::khiin::proto::Request* mutable_request();
  void set_allocated_request(::khiin::proto::Request* request);
  private:
  const ::khiin::proto::Request& _internal_request() const;
  ::khiin::proto::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::khiin::proto::Request* request);
  ::khiin::proto::Request* unsafe_arena_release_request();

  // .khiin.proto.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::khiin::proto::Response& response() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::Response* release_response();
  ::khiin::proto::Response* mutable_response();
  void set_allocated_response(::khiin::proto::Response* response);
  private:
  const ::khiin::proto::Response& _internal_response() const;
  ::khiin::proto::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::khiin::proto::Response* response);
  ::khiin::proto::Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:khiin.proto.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::proto::Request* request_;
  ::khiin::proto::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyEvent

// int32 key_code = 1;
inline void KeyEvent::clear_key_code() {
  key_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyEvent::_internal_key_code() const {
  return key_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyEvent::key_code() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyEvent.key_code)
  return _internal_key_code();
}
inline void KeyEvent::_internal_set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_code_ = value;
}
inline void KeyEvent::set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_code(value);
  // @@protoc_insertion_point(field_set:khiin.proto.KeyEvent.key_code)
}

// .khiin.proto.SpecialKey special_key = 2;
inline void KeyEvent::clear_special_key() {
  special_key_ = 0;
}
inline ::khiin::proto::SpecialKey KeyEvent::_internal_special_key() const {
  return static_cast< ::khiin::proto::SpecialKey >(special_key_);
}
inline ::khiin::proto::SpecialKey KeyEvent::special_key() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyEvent.special_key)
  return _internal_special_key();
}
inline void KeyEvent::_internal_set_special_key(::khiin::proto::SpecialKey value) {
  
  special_key_ = value;
}
inline void KeyEvent::set_special_key(::khiin::proto::SpecialKey value) {
  _internal_set_special_key(value);
  // @@protoc_insertion_point(field_set:khiin.proto.KeyEvent.special_key)
}

// repeated .khiin.proto.ModifierKey modifier_keys = 3;
inline int KeyEvent::_internal_modifier_keys_size() const {
  return modifier_keys_.size();
}
inline int KeyEvent::modifier_keys_size() const {
  return _internal_modifier_keys_size();
}
inline void KeyEvent::clear_modifier_keys() {
  modifier_keys_.Clear();
}
inline ::khiin::proto::ModifierKey KeyEvent::_internal_modifier_keys(int index) const {
  return static_cast< ::khiin::proto::ModifierKey >(modifier_keys_.Get(index));
}
inline ::khiin::proto::ModifierKey KeyEvent::modifier_keys(int index) const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyEvent.modifier_keys)
  return _internal_modifier_keys(index);
}
inline void KeyEvent::set_modifier_keys(int index, ::khiin::proto::ModifierKey value) {
  modifier_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:khiin.proto.KeyEvent.modifier_keys)
}
inline void KeyEvent::_internal_add_modifier_keys(::khiin::proto::ModifierKey value) {
  modifier_keys_.Add(value);
}
inline void KeyEvent::add_modifier_keys(::khiin::proto::ModifierKey value) {
  _internal_add_modifier_keys(value);
  // @@protoc_insertion_point(field_add:khiin.proto.KeyEvent.modifier_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
KeyEvent::modifier_keys() const {
  // @@protoc_insertion_point(field_list:khiin.proto.KeyEvent.modifier_keys)
  return modifier_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeyEvent::_internal_mutable_modifier_keys() {
  return &modifier_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeyEvent::mutable_modifier_keys() {
  // @@protoc_insertion_point(field_mutable_list:khiin.proto.KeyEvent.modifier_keys)
  return _internal_mutable_modifier_keys();
}

// -------------------------------------------------------------------

// Request

// .khiin.proto.CommandType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::khiin::proto::CommandType Request::_internal_type() const {
  return static_cast< ::khiin::proto::CommandType >(type_);
}
inline ::khiin::proto::CommandType Request::type() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::khiin::proto::CommandType value) {
  
  type_ = value;
}
inline void Request::set_type(::khiin::proto::CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Request.type)
}

// .khiin.proto.KeyEvent key_event = 2;
inline bool Request::_internal_has_key_event() const {
  return this != internal_default_instance() && key_event_ != nullptr;
}
inline bool Request::has_key_event() const {
  return _internal_has_key_event();
}
inline void Request::clear_key_event() {
  if (GetArenaForAllocation() == nullptr && key_event_ != nullptr) {
    delete key_event_;
  }
  key_event_ = nullptr;
}
inline const ::khiin::proto::KeyEvent& Request::_internal_key_event() const {
  const ::khiin::proto::KeyEvent* p = key_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::KeyEvent&>(
      ::khiin::proto::_KeyEvent_default_instance_);
}
inline const ::khiin::proto::KeyEvent& Request::key_event() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Request.key_event)
  return _internal_key_event();
}
inline void Request::unsafe_arena_set_allocated_key_event(
    ::khiin::proto::KeyEvent* key_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_event_);
  }
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Request.key_event)
}
inline ::khiin::proto::KeyEvent* Request::release_key_event() {
  
  ::khiin::proto::KeyEvent* temp = key_event_;
  key_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::KeyEvent* Request::unsafe_arena_release_key_event() {
  // @@protoc_insertion_point(field_release:khiin.proto.Request.key_event)
  
  ::khiin::proto::KeyEvent* temp = key_event_;
  key_event_ = nullptr;
  return temp;
}
inline ::khiin::proto::KeyEvent* Request::_internal_mutable_key_event() {
  
  if (key_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::KeyEvent>(GetArenaForAllocation());
    key_event_ = p;
  }
  return key_event_;
}
inline ::khiin::proto::KeyEvent* Request::mutable_key_event() {
  ::khiin::proto::KeyEvent* _msg = _internal_mutable_key_event();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Request.key_event)
  return _msg;
}
inline void Request::set_allocated_key_event(::khiin::proto::KeyEvent* key_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_event_;
  }
  if (key_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::KeyEvent>::GetOwningArena(key_event);
    if (message_arena != submessage_arena) {
      key_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_event, submessage_arena);
    }
    
  } else {
    
  }
  key_event_ = key_event;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Request.key_event)
}

// int32 candidate_id = 3;
inline void Request::clear_candidate_id() {
  candidate_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::candidate_id() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Request.candidate_id)
  return _internal_candidate_id();
}
inline void Request::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candidate_id_ = value;
}
inline void Request::set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Request.candidate_id)
}

// int32 cursor_position = 4;
inline void Request::clear_cursor_position() {
  cursor_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_cursor_position() const {
  return cursor_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::cursor_position() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Request.cursor_position)
  return _internal_cursor_position();
}
inline void Request::_internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_position_ = value;
}
inline void Request::set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor_position(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Request.cursor_position)
}

// .khiin.proto.AppConfig config = 5;
inline bool Request::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Request::has_config() const {
  return _internal_has_config();
}
inline const ::khiin::proto::AppConfig& Request::_internal_config() const {
  const ::khiin::proto::AppConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::AppConfig&>(
      ::khiin::proto::_AppConfig_default_instance_);
}
inline const ::khiin::proto::AppConfig& Request::config() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Request.config)
  return _internal_config();
}
inline void Request::unsafe_arena_set_allocated_config(
    ::khiin::proto::AppConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Request.config)
}
inline ::khiin::proto::AppConfig* Request::release_config() {
  
  ::khiin::proto::AppConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::AppConfig* Request::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:khiin.proto.Request.config)
  
  ::khiin::proto::AppConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::khiin::proto::AppConfig* Request::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::AppConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::khiin::proto::AppConfig* Request::mutable_config() {
  ::khiin::proto::AppConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Request.config)
  return _msg;
}
inline void Request::set_allocated_config(::khiin::proto::AppConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Request.config)
}

// -------------------------------------------------------------------

// Preedit_Segment

// .khiin.proto.SegmentStatus status = 1;
inline void Preedit_Segment::clear_status() {
  status_ = 0;
}
inline ::khiin::proto::SegmentStatus Preedit_Segment::_internal_status() const {
  return static_cast< ::khiin::proto::SegmentStatus >(status_);
}
inline ::khiin::proto::SegmentStatus Preedit_Segment::status() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Preedit.Segment.status)
  return _internal_status();
}
inline void Preedit_Segment::_internal_set_status(::khiin::proto::SegmentStatus value) {
  
  status_ = value;
}
inline void Preedit_Segment::set_status(::khiin::proto::SegmentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Preedit.Segment.status)
}

// string value = 2;
inline void Preedit_Segment::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Preedit_Segment::value() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Preedit.Segment.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Preedit_Segment::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.Preedit.Segment.value)
}
inline std::string* Preedit_Segment::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Preedit.Segment.value)
  return _s;
}
inline const std::string& Preedit_Segment::_internal_value() const {
  return value_.Get();
}
inline void Preedit_Segment::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Preedit_Segment::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Preedit_Segment::release_value() {
  // @@protoc_insertion_point(field_release:khiin.proto.Preedit.Segment.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Preedit_Segment::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Preedit.Segment.value)
}

// -------------------------------------------------------------------

// Preedit

// repeated .khiin.proto.Preedit.Segment segments = 1;
inline int Preedit::_internal_segments_size() const {
  return segments_.size();
}
inline int Preedit::segments_size() const {
  return _internal_segments_size();
}
inline void Preedit::clear_segments() {
  segments_.Clear();
}
inline ::khiin::proto::Preedit_Segment* Preedit::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:khiin.proto.Preedit.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Preedit_Segment >*
Preedit::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:khiin.proto.Preedit.segments)
  return &segments_;
}
inline const ::khiin::proto::Preedit_Segment& Preedit::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::khiin::proto::Preedit_Segment& Preedit::segments(int index) const {
  // @@protoc_insertion_point(field_get:khiin.proto.Preedit.segments)
  return _internal_segments(index);
}
inline ::khiin::proto::Preedit_Segment* Preedit::_internal_add_segments() {
  return segments_.Add();
}
inline ::khiin::proto::Preedit_Segment* Preedit::add_segments() {
  ::khiin::proto::Preedit_Segment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:khiin.proto.Preedit.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Preedit_Segment >&
Preedit::segments() const {
  // @@protoc_insertion_point(field_list:khiin.proto.Preedit.segments)
  return segments_;
}

// int32 caret = 2;
inline void Preedit::clear_caret() {
  caret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Preedit::_internal_caret() const {
  return caret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Preedit::caret() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Preedit.caret)
  return _internal_caret();
}
inline void Preedit::_internal_set_caret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  caret_ = value;
}
inline void Preedit::set_caret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_caret(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Preedit.caret)
}

// int32 focused_caret = 3;
inline void Preedit::clear_focused_caret() {
  focused_caret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Preedit::_internal_focused_caret() const {
  return focused_caret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Preedit::focused_caret() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Preedit.focused_caret)
  return _internal_focused_caret();
}
inline void Preedit::_internal_set_focused_caret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  focused_caret_ = value;
}
inline void Preedit::set_focused_caret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focused_caret(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Preedit.focused_caret)
}

// -------------------------------------------------------------------

// Candidate

// int32 id = 1;
inline void Candidate::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidate::id() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Candidate.id)
  return _internal_id();
}
inline void Candidate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Candidate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Candidate.id)
}

// string value = 2;
inline void Candidate::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Candidate::value() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Candidate.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.Candidate.value)
}
inline std::string* Candidate::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Candidate.value)
  return _s;
}
inline const std::string& Candidate::_internal_value() const {
  return value_.Get();
}
inline void Candidate::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_value() {
  // @@protoc_insertion_point(field_release:khiin.proto.Candidate.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Candidate.value)
}

// string key = 3;
inline void Candidate::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Candidate::key() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Candidate.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.Candidate.key)
}
inline std::string* Candidate::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Candidate.key)
  return _s;
}
inline const std::string& Candidate::_internal_key() const {
  return key_.Get();
}
inline void Candidate::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_key() {
  // @@protoc_insertion_point(field_release:khiin.proto.Candidate.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Candidate.key)
}

// string annotation = 4;
inline void Candidate::clear_annotation() {
  annotation_.ClearToEmpty();
}
inline const std::string& Candidate::annotation() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Candidate.annotation)
  return _internal_annotation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_annotation(ArgT0&& arg0, ArgT... args) {
 
 annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.Candidate.annotation)
}
inline std::string* Candidate::mutable_annotation() {
  std::string* _s = _internal_mutable_annotation();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Candidate.annotation)
  return _s;
}
inline const std::string& Candidate::_internal_annotation() const {
  return annotation_.Get();
}
inline void Candidate::_internal_set_annotation(const std::string& value) {
  
  annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_annotation() {
  
  return annotation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_annotation() {
  // @@protoc_insertion_point(field_release:khiin.proto.Candidate.annotation)
  return annotation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_annotation(std::string* annotation) {
  if (annotation != nullptr) {
    
  } else {
    
  }
  annotation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Candidate.annotation)
}

// .khiin.proto.Candidate.Category category = 5;
inline void Candidate::clear_category() {
  category_ = 0;
}
inline ::khiin::proto::Candidate_Category Candidate::_internal_category() const {
  return static_cast< ::khiin::proto::Candidate_Category >(category_);
}
inline ::khiin::proto::Candidate_Category Candidate::category() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Candidate.category)
  return _internal_category();
}
inline void Candidate::_internal_set_category(::khiin::proto::Candidate_Category value) {
  
  category_ = value;
}
inline void Candidate::set_category(::khiin::proto::Candidate_Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Candidate.category)
}

// -------------------------------------------------------------------

// CandidateList

// repeated .khiin.proto.Candidate candidates = 1;
inline int CandidateList::_internal_candidates_size() const {
  return candidates_.size();
}
inline int CandidateList::candidates_size() const {
  return _internal_candidates_size();
}
inline void CandidateList::clear_candidates() {
  candidates_.Clear();
}
inline ::khiin::proto::Candidate* CandidateList::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:khiin.proto.CandidateList.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Candidate >*
CandidateList::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:khiin.proto.CandidateList.candidates)
  return &candidates_;
}
inline const ::khiin::proto::Candidate& CandidateList::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::khiin::proto::Candidate& CandidateList::candidates(int index) const {
  // @@protoc_insertion_point(field_get:khiin.proto.CandidateList.candidates)
  return _internal_candidates(index);
}
inline ::khiin::proto::Candidate* CandidateList::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::khiin::proto::Candidate* CandidateList::add_candidates() {
  ::khiin::proto::Candidate* _add = _internal_add_candidates();
  // @@protoc_insertion_point(field_add:khiin.proto.CandidateList.candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::proto::Candidate >&
CandidateList::candidates() const {
  // @@protoc_insertion_point(field_list:khiin.proto.CandidateList.candidates)
  return candidates_;
}

// int32 focused = 2;
inline void CandidateList::clear_focused() {
  focused_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateList::_internal_focused() const {
  return focused_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateList::focused() const {
  // @@protoc_insertion_point(field_get:khiin.proto.CandidateList.focused)
  return _internal_focused();
}
inline void CandidateList::_internal_set_focused(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  focused_ = value;
}
inline void CandidateList::set_focused(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focused(value);
  // @@protoc_insertion_point(field_set:khiin.proto.CandidateList.focused)
}

// -------------------------------------------------------------------

// Response

// .khiin.proto.ErrorCode error = 1;
inline void Response::clear_error() {
  error_ = 0;
}
inline ::khiin::proto::ErrorCode Response::_internal_error() const {
  return static_cast< ::khiin::proto::ErrorCode >(error_);
}
inline ::khiin::proto::ErrorCode Response::error() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Response.error)
  return _internal_error();
}
inline void Response::_internal_set_error(::khiin::proto::ErrorCode value) {
  
  error_ = value;
}
inline void Response::set_error(::khiin::proto::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Response.error)
}

// .khiin.proto.Preedit preedit = 2;
inline bool Response::_internal_has_preedit() const {
  return this != internal_default_instance() && preedit_ != nullptr;
}
inline bool Response::has_preedit() const {
  return _internal_has_preedit();
}
inline void Response::clear_preedit() {
  if (GetArenaForAllocation() == nullptr && preedit_ != nullptr) {
    delete preedit_;
  }
  preedit_ = nullptr;
}
inline const ::khiin::proto::Preedit& Response::_internal_preedit() const {
  const ::khiin::proto::Preedit* p = preedit_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::Preedit&>(
      ::khiin::proto::_Preedit_default_instance_);
}
inline const ::khiin::proto::Preedit& Response::preedit() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Response.preedit)
  return _internal_preedit();
}
inline void Response::unsafe_arena_set_allocated_preedit(
    ::khiin::proto::Preedit* preedit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preedit_);
  }
  preedit_ = preedit;
  if (preedit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Response.preedit)
}
inline ::khiin::proto::Preedit* Response::release_preedit() {
  
  ::khiin::proto::Preedit* temp = preedit_;
  preedit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::Preedit* Response::unsafe_arena_release_preedit() {
  // @@protoc_insertion_point(field_release:khiin.proto.Response.preedit)
  
  ::khiin::proto::Preedit* temp = preedit_;
  preedit_ = nullptr;
  return temp;
}
inline ::khiin::proto::Preedit* Response::_internal_mutable_preedit() {
  
  if (preedit_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::Preedit>(GetArenaForAllocation());
    preedit_ = p;
  }
  return preedit_;
}
inline ::khiin::proto::Preedit* Response::mutable_preedit() {
  ::khiin::proto::Preedit* _msg = _internal_mutable_preedit();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Response.preedit)
  return _msg;
}
inline void Response::set_allocated_preedit(::khiin::proto::Preedit* preedit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete preedit_;
  }
  if (preedit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::Preedit>::GetOwningArena(preedit);
    if (message_arena != submessage_arena) {
      preedit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preedit, submessage_arena);
    }
    
  } else {
    
  }
  preedit_ = preedit;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Response.preedit)
}

// .khiin.proto.CandidateList candidate_list = 3;
inline bool Response::_internal_has_candidate_list() const {
  return this != internal_default_instance() && candidate_list_ != nullptr;
}
inline bool Response::has_candidate_list() const {
  return _internal_has_candidate_list();
}
inline void Response::clear_candidate_list() {
  if (GetArenaForAllocation() == nullptr && candidate_list_ != nullptr) {
    delete candidate_list_;
  }
  candidate_list_ = nullptr;
}
inline const ::khiin::proto::CandidateList& Response::_internal_candidate_list() const {
  const ::khiin::proto::CandidateList* p = candidate_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::CandidateList&>(
      ::khiin::proto::_CandidateList_default_instance_);
}
inline const ::khiin::proto::CandidateList& Response::candidate_list() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Response.candidate_list)
  return _internal_candidate_list();
}
inline void Response::unsafe_arena_set_allocated_candidate_list(
    ::khiin::proto::CandidateList* candidate_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_list_);
  }
  candidate_list_ = candidate_list;
  if (candidate_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Response.candidate_list)
}
inline ::khiin::proto::CandidateList* Response::release_candidate_list() {
  
  ::khiin::proto::CandidateList* temp = candidate_list_;
  candidate_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::CandidateList* Response::unsafe_arena_release_candidate_list() {
  // @@protoc_insertion_point(field_release:khiin.proto.Response.candidate_list)
  
  ::khiin::proto::CandidateList* temp = candidate_list_;
  candidate_list_ = nullptr;
  return temp;
}
inline ::khiin::proto::CandidateList* Response::_internal_mutable_candidate_list() {
  
  if (candidate_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::CandidateList>(GetArenaForAllocation());
    candidate_list_ = p;
  }
  return candidate_list_;
}
inline ::khiin::proto::CandidateList* Response::mutable_candidate_list() {
  ::khiin::proto::CandidateList* _msg = _internal_mutable_candidate_list();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Response.candidate_list)
  return _msg;
}
inline void Response::set_allocated_candidate_list(::khiin::proto::CandidateList* candidate_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candidate_list_;
  }
  if (candidate_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::CandidateList>::GetOwningArena(candidate_list);
    if (message_arena != submessage_arena) {
      candidate_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_list, submessage_arena);
    }
    
  } else {
    
  }
  candidate_list_ = candidate_list;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Response.candidate_list)
}

// .khiin.proto.EditState edit_state = 4;
inline void Response::clear_edit_state() {
  edit_state_ = 0;
}
inline ::khiin::proto::EditState Response::_internal_edit_state() const {
  return static_cast< ::khiin::proto::EditState >(edit_state_);
}
inline ::khiin::proto::EditState Response::edit_state() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Response.edit_state)
  return _internal_edit_state();
}
inline void Response::_internal_set_edit_state(::khiin::proto::EditState value) {
  
  edit_state_ = value;
}
inline void Response::set_edit_state(::khiin::proto::EditState value) {
  _internal_set_edit_state(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Response.edit_state)
}

// bool consumable = 5;
inline void Response::clear_consumable() {
  consumable_ = false;
}
inline bool Response::_internal_consumable() const {
  return consumable_;
}
inline bool Response::consumable() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Response.consumable)
  return _internal_consumable();
}
inline void Response::_internal_set_consumable(bool value) {
  
  consumable_ = value;
}
inline void Response::set_consumable(bool value) {
  _internal_set_consumable(value);
  // @@protoc_insertion_point(field_set:khiin.proto.Response.consumable)
}

// -------------------------------------------------------------------

// Command

// .khiin.proto.Request request = 1;
inline bool Command::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool Command::has_request() const {
  return _internal_has_request();
}
inline void Command::clear_request() {
  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::khiin::proto::Request& Command::_internal_request() const {
  const ::khiin::proto::Request* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::Request&>(
      ::khiin::proto::_Request_default_instance_);
}
inline const ::khiin::proto::Request& Command::request() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Command.request)
  return _internal_request();
}
inline void Command::unsafe_arena_set_allocated_request(
    ::khiin::proto::Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Command.request)
}
inline ::khiin::proto::Request* Command::release_request() {
  
  ::khiin::proto::Request* temp = request_;
  request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::Request* Command::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:khiin.proto.Command.request)
  
  ::khiin::proto::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::khiin::proto::Request* Command::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::Request>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline ::khiin::proto::Request* Command::mutable_request() {
  ::khiin::proto::Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Command.request)
  return _msg;
}
inline void Command::set_allocated_request(::khiin::proto::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::Request>::GetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Command.request)
}

// .khiin.proto.Response response = 2;
inline bool Command::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool Command::has_response() const {
  return _internal_has_response();
}
inline void Command::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::khiin::proto::Response& Command::_internal_response() const {
  const ::khiin::proto::Response* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::Response&>(
      ::khiin::proto::_Response_default_instance_);
}
inline const ::khiin::proto::Response& Command::response() const {
  // @@protoc_insertion_point(field_get:khiin.proto.Command.response)
  return _internal_response();
}
inline void Command::unsafe_arena_set_allocated_response(
    ::khiin::proto::Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.Command.response)
}
inline ::khiin::proto::Response* Command::release_response() {
  
  ::khiin::proto::Response* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::Response* Command::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:khiin.proto.Command.response)
  
  ::khiin::proto::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::khiin::proto::Response* Command::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::Response>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::khiin::proto::Response* Command::mutable_response() {
  ::khiin::proto::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:khiin.proto.Command.response)
  return _msg;
}
inline void Command::set_allocated_response(::khiin::proto::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::Response>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.Command.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace khiin

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::khiin::proto::Candidate_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::Candidate_Category>() {
  return ::khiin::proto::Candidate_Category_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::SpecialKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::SpecialKey>() {
  return ::khiin::proto::SpecialKey_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::ModifierKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::ModifierKey>() {
  return ::khiin::proto::ModifierKey_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::CommandType>() {
  return ::khiin::proto::CommandType_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::SegmentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::SegmentStatus>() {
  return ::khiin::proto::SegmentStatus_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::ErrorCode>() {
  return ::khiin::proto::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::khiin::proto::EditState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::EditState>() {
  return ::khiin::proto::EditState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcommand_2eproto
