// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace khiin {
namespace messages {
constexpr KeyEvent::KeyEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modifier_keys_()
  , _modifier_keys_cached_byte_size_(0)
  , key_code_(0)
  , special_key_(0)
{}
struct KeyEventDefaultTypeInternal {
  constexpr KeyEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyEventDefaultTypeInternal() {}
  union {
    KeyEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
constexpr Input::Input(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_event_(nullptr)
  , candidate_id_(0)
  , cursor_position_(0){}
struct InputDefaultTypeInternal {
  constexpr InputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputDefaultTypeInternal() {}
  union {
    Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputDefaultTypeInternal _Input_default_instance_;
constexpr Preedit_Segment::Preedit_Segment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct Preedit_SegmentDefaultTypeInternal {
  constexpr Preedit_SegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Preedit_SegmentDefaultTypeInternal() {}
  union {
    Preedit_Segment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Preedit_SegmentDefaultTypeInternal _Preedit_Segment_default_instance_;
constexpr Preedit::Preedit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : segments_()
  , cursor_position_(0){}
struct PreeditDefaultTypeInternal {
  constexpr PreeditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreeditDefaultTypeInternal() {}
  union {
    Preedit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreeditDefaultTypeInternal _Preedit_default_instance_;
constexpr Candidate::Candidate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , category_(0)
{}
struct CandidateDefaultTypeInternal {
  constexpr CandidateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateDefaultTypeInternal() {}
  union {
    Candidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateDefaultTypeInternal _Candidate_default_instance_;
constexpr CandidateList::CandidateList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidates_()
  , focused_(0){}
struct CandidateListDefaultTypeInternal {
  constexpr CandidateListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateListDefaultTypeInternal() {}
  union {
    CandidateList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateListDefaultTypeInternal _CandidateList_default_instance_;
constexpr Output::Output(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preedit_(nullptr)
  , candidate_list_(nullptr)
  , error_(0)

  , edit_state_(0)

  , consumable_(false){}
struct OutputDefaultTypeInternal {
  constexpr OutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputDefaultTypeInternal _Output_default_instance_;
constexpr Command::Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_(nullptr)
  , output_(nullptr)
  , type_(0)
{}
struct CommandDefaultTypeInternal {
  constexpr CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace messages
}  // namespace khiin
namespace khiin {
namespace messages {
bool Candidate_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Candidate_Category_strings[3] = {};

static const char Candidate_Category_names[] =
  "BASIC"
  "EXTENDED"
  "FALLBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Candidate_Category_entries[] = {
  { {Candidate_Category_names + 0, 5}, 0 },
  { {Candidate_Category_names + 5, 8}, 1 },
  { {Candidate_Category_names + 13, 8}, 2 },
};

static const int Candidate_Category_entries_by_number[] = {
  0, // 0 -> BASIC
  1, // 1 -> EXTENDED
  2, // 2 -> FALLBACK
};

const std::string& Candidate_Category_Name(
    Candidate_Category value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Candidate_Category_entries,
          Candidate_Category_entries_by_number,
          3, Candidate_Category_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Candidate_Category_entries,
      Candidate_Category_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Candidate_Category_strings[idx].get();
}
bool Candidate_Category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Candidate_Category* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Candidate_Category_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Candidate_Category>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Candidate_Category Candidate::BASIC;
constexpr Candidate_Category Candidate::EXTENDED;
constexpr Candidate_Category Candidate::FALLBACK;
constexpr Candidate_Category Candidate::Category_MIN;
constexpr Candidate_Category Candidate::Category_MAX;
constexpr int Candidate::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SpecialKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SpecialKey_strings[15] = {};

static const char SpecialKey_names[] =
  "SK_BACKSPACE"
  "SK_DEL"
  "SK_DOWN"
  "SK_END"
  "SK_ENTER"
  "SK_ESC"
  "SK_HOME"
  "SK_LEFT"
  "SK_NONE"
  "SK_PGDN"
  "SK_PGUP"
  "SK_RIGHT"
  "SK_SPACE"
  "SK_TAB"
  "SK_UP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SpecialKey_entries[] = {
  { {SpecialKey_names + 0, 12}, 4 },
  { {SpecialKey_names + 12, 6}, 14 },
  { {SpecialKey_names + 18, 7}, 9 },
  { {SpecialKey_names + 25, 6}, 13 },
  { {SpecialKey_names + 31, 8}, 2 },
  { {SpecialKey_names + 39, 6}, 3 },
  { {SpecialKey_names + 45, 7}, 12 },
  { {SpecialKey_names + 52, 7}, 6 },
  { {SpecialKey_names + 59, 7}, 0 },
  { {SpecialKey_names + 66, 7}, 11 },
  { {SpecialKey_names + 73, 7}, 10 },
  { {SpecialKey_names + 80, 8}, 8 },
  { {SpecialKey_names + 88, 8}, 1 },
  { {SpecialKey_names + 96, 6}, 5 },
  { {SpecialKey_names + 102, 5}, 7 },
};

static const int SpecialKey_entries_by_number[] = {
  8, // 0 -> SK_NONE
  12, // 1 -> SK_SPACE
  4, // 2 -> SK_ENTER
  5, // 3 -> SK_ESC
  0, // 4 -> SK_BACKSPACE
  13, // 5 -> SK_TAB
  7, // 6 -> SK_LEFT
  14, // 7 -> SK_UP
  11, // 8 -> SK_RIGHT
  2, // 9 -> SK_DOWN
  10, // 10 -> SK_PGUP
  9, // 11 -> SK_PGDN
  6, // 12 -> SK_HOME
  3, // 13 -> SK_END
  1, // 14 -> SK_DEL
};

const std::string& SpecialKey_Name(
    SpecialKey value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SpecialKey_entries,
          SpecialKey_entries_by_number,
          15, SpecialKey_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SpecialKey_entries,
      SpecialKey_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SpecialKey_strings[idx].get();
}
bool SpecialKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpecialKey* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SpecialKey_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<SpecialKey>(int_value);
  }
  return success;
}
bool ModifierKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ModifierKey_strings[3] = {};

static const char ModifierKey_names[] =
  "ALT"
  "CTRL"
  "SHIFT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ModifierKey_entries[] = {
  { {ModifierKey_names + 0, 3}, 1 },
  { {ModifierKey_names + 3, 4}, 0 },
  { {ModifierKey_names + 7, 5}, 2 },
};

static const int ModifierKey_entries_by_number[] = {
  1, // 0 -> CTRL
  0, // 1 -> ALT
  2, // 2 -> SHIFT
};

const std::string& ModifierKey_Name(
    ModifierKey value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ModifierKey_entries,
          ModifierKey_entries_by_number,
          3, ModifierKey_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ModifierKey_entries,
      ModifierKey_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ModifierKey_strings[idx].get();
}
bool ModifierKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModifierKey* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ModifierKey_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ModifierKey>(int_value);
  }
  return success;
}
bool SegmentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SegmentStatus_strings[4] = {};

static const char SegmentStatus_names[] =
  "COMPOSING"
  "CONVERTED"
  "FOCUSED"
  "UNMARKED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SegmentStatus_entries[] = {
  { {SegmentStatus_names + 0, 9}, 1 },
  { {SegmentStatus_names + 9, 9}, 2 },
  { {SegmentStatus_names + 18, 7}, 3 },
  { {SegmentStatus_names + 25, 8}, 0 },
};

static const int SegmentStatus_entries_by_number[] = {
  3, // 0 -> UNMARKED
  0, // 1 -> COMPOSING
  1, // 2 -> CONVERTED
  2, // 3 -> FOCUSED
};

const std::string& SegmentStatus_Name(
    SegmentStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SegmentStatus_entries,
          SegmentStatus_entries_by_number,
          4, SegmentStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SegmentStatus_entries,
      SegmentStatus_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SegmentStatus_strings[idx].get();
}
bool SegmentStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SegmentStatus_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SegmentStatus>(int_value);
  }
  return success;
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ErrorCode_strings[2] = {};

static const char ErrorCode_names[] =
  "FAIL"
  "OK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ErrorCode_entries[] = {
  { {ErrorCode_names + 0, 4}, 1 },
  { {ErrorCode_names + 4, 2}, 0 },
};

static const int ErrorCode_entries_by_number[] = {
  1, // 0 -> OK
  0, // 1 -> FAIL
};

const std::string& ErrorCode_Name(
    ErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ErrorCode_entries,
          ErrorCode_entries_by_number,
          2, ErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ErrorCode_entries,
      ErrorCode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ErrorCode_strings[idx].get();
}
bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ErrorCode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ErrorCode>(int_value);
  }
  return success;
}
bool EditState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EditState_strings[4] = {};

static const char EditState_names[] =
  "EDIT_COMPOSING"
  "EDIT_CONVERTED"
  "EDIT_EMPTY"
  "EDIT_SELECTING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EditState_entries[] = {
  { {EditState_names + 0, 14}, 1 },
  { {EditState_names + 14, 14}, 2 },
  { {EditState_names + 28, 10}, 0 },
  { {EditState_names + 38, 14}, 3 },
};

static const int EditState_entries_by_number[] = {
  2, // 0 -> EDIT_EMPTY
  0, // 1 -> EDIT_COMPOSING
  1, // 2 -> EDIT_CONVERTED
  3, // 3 -> EDIT_SELECTING
};

const std::string& EditState_Name(
    EditState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EditState_entries,
          EditState_entries_by_number,
          4, EditState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EditState_entries,
      EditState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EditState_strings[idx].get();
}
bool EditState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EditState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EditState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<EditState>(int_value);
  }
  return success;
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommandType_strings[12] = {};

static const char CommandType_names[] =
  "COMMIT"
  "DISABLE"
  "ENABLE"
  "FOCUS_CANDIDATE"
  "PLACE_CURSOR"
  "RESET"
  "REVERT"
  "SELECT_CANDIDATE"
  "SEND_KEY"
  "SET_CONFIG"
  "SWITCH_INPUT_MODE"
  "TEST_SEND_KEY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommandType_entries[] = {
  { {CommandType_names + 0, 6}, 3 },
  { {CommandType_names + 6, 7}, 8 },
  { {CommandType_names + 13, 6}, 9 },
  { {CommandType_names + 19, 15}, 5 },
  { {CommandType_names + 34, 12}, 7 },
  { {CommandType_names + 46, 5}, 2 },
  { {CommandType_names + 51, 6}, 1 },
  { {CommandType_names + 57, 16}, 4 },
  { {CommandType_names + 73, 8}, 0 },
  { {CommandType_names + 81, 10}, 10 },
  { {CommandType_names + 91, 17}, 6 },
  { {CommandType_names + 108, 13}, 11 },
};

static const int CommandType_entries_by_number[] = {
  8, // 0 -> SEND_KEY
  6, // 1 -> REVERT
  5, // 2 -> RESET
  0, // 3 -> COMMIT
  7, // 4 -> SELECT_CANDIDATE
  3, // 5 -> FOCUS_CANDIDATE
  10, // 6 -> SWITCH_INPUT_MODE
  4, // 7 -> PLACE_CURSOR
  1, // 8 -> DISABLE
  2, // 9 -> ENABLE
  9, // 10 -> SET_CONFIG
  11, // 11 -> TEST_SEND_KEY
};

const std::string& CommandType_Name(
    CommandType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommandType_entries,
          CommandType_entries_by_number,
          12, CommandType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommandType_entries,
      CommandType_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommandType_strings[idx].get();
}
bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommandType_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<CommandType>(int_value);
  }
  return success;
}

// ===================================================================

class KeyEvent::_Internal {
 public:
};

KeyEvent::KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  modifier_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      modifier_keys_(from.modifier_keys_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
  // @@protoc_insertion_point(copy_constructor:khiin.messages.KeyEvent)
}

void KeyEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&special_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:khiin.messages.KeyEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void KeyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyEvent::ArenaDtor(void* object) {
  KeyEvent* _this = reinterpret_cast< KeyEvent* >(object);
  (void)_this;
}
void KeyEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&special_key_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(special_key_));
  _internal_metadata_.Clear<std::string>();
}

const char* KeyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.SpecialKey special_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_special_key(static_cast<::khiin::messages::SpecialKey>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .khiin.messages.ModifierKey modifier_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_modifier_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_modifier_keys(static_cast<::khiin::messages::ModifierKey>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key_code = 1;
  if (this->_internal_key_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_code(), target);
  }

  // .khiin.messages.SpecialKey special_key = 2;
  if (this->_internal_special_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_special_key(), target);
  }

  // repeated .khiin.messages.ModifierKey modifier_keys = 3;
  {
    int byte_size = _modifier_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, modifier_keys_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.KeyEvent)
  return target;
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.KeyEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.messages.ModifierKey modifier_keys = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modifier_keys(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _modifier_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 key_code = 1;
  if (this->_internal_key_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key_code());
  }

  // .khiin.messages.SpecialKey special_key = 2;
  if (this->_internal_special_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KeyEvent*>(
      &from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  if (from._internal_key_code() != 0) {
    _internal_set_key_code(from._internal_key_code());
  }
  if (from._internal_special_key() != 0) {
    _internal_set_special_key(from._internal_special_key());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::InternalSwap(KeyEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyEvent, special_key_)
      + sizeof(KeyEvent::special_key_)
      - PROTOBUF_FIELD_OFFSET(KeyEvent, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

std::string KeyEvent::GetTypeName() const {
  return "khiin.messages.KeyEvent";
}


// ===================================================================

class Input::_Internal {
 public:
  static const ::khiin::messages::KeyEvent& key_event(const Input* msg);
};

const ::khiin::messages::KeyEvent&
Input::_Internal::key_event(const Input* msg) {
  return *msg->key_event_;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_key_event()) {
    key_event_ = new ::khiin::messages::KeyEvent(*from.key_event_);
  } else {
    key_event_ = nullptr;
  }
  ::memcpy(&candidate_id_, &from.candidate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursor_position_) -
    reinterpret_cast<char*>(&candidate_id_)) + sizeof(cursor_position_));
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Input)
}

void Input::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cursor_position_) -
    reinterpret_cast<char*>(&key_event_)) + sizeof(cursor_position_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:khiin.messages.Input)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_event_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_event_ != nullptr) {
    delete key_event_;
  }
  key_event_ = nullptr;
  ::memset(&candidate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_position_) -
      reinterpret_cast<char*>(&candidate_id_)) + sizeof(cursor_position_));
  _internal_metadata_.Clear<std::string>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.messages.KeyEvent key_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 candidate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cursor_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.messages.KeyEvent key_event = 1;
  if (this->_internal_has_key_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_event(this), target, stream);
  }

  // int32 candidate_id = 2;
  if (this->_internal_candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidate_id(), target);
  }

  // int32 cursor_position = 3;
  if (this->_internal_cursor_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cursor_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.messages.KeyEvent key_event = 1;
  if (this->_internal_has_key_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_event_);
  }

  // int32 candidate_id = 2;
  if (this->_internal_candidate_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_candidate_id());
  }

  // int32 cursor_position = 3;
  if (this->_internal_cursor_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cursor_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Input*>(
      &from));
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Input)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_event()) {
    _internal_mutable_key_event()->::khiin::messages::KeyEvent::MergeFrom(from._internal_key_event());
  }
  if (from._internal_candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  if (from._internal_cursor_position() != 0) {
    _internal_set_cursor_position(from._internal_cursor_position());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, cursor_position_)
      + sizeof(Input::cursor_position_)
      - PROTOBUF_FIELD_OFFSET(Input, key_event_)>(
          reinterpret_cast<char*>(&key_event_),
          reinterpret_cast<char*>(&other->key_event_));
}

std::string Input::GetTypeName() const {
  return "khiin.messages.Input";
}


// ===================================================================

class Preedit_Segment::_Internal {
 public:
};

Preedit_Segment::Preedit_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Preedit.Segment)
}
Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Preedit.Segment)
}

void Preedit_Segment::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

Preedit_Segment::~Preedit_Segment() {
  // @@protoc_insertion_point(destructor:khiin.messages.Preedit.Segment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Preedit_Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Preedit_Segment::ArenaDtor(void* object) {
  Preedit_Segment* _this = reinterpret_cast< Preedit_Segment* >(object);
  (void)_this;
}
void Preedit_Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preedit_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Preedit_Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.messages.SegmentStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::khiin::messages::SegmentStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit_Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.messages.SegmentStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.messages.Preedit.Segment.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Preedit.Segment)
  return target;
}

size_t Preedit_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Preedit.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .khiin.messages.SegmentStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit_Segment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Preedit_Segment*>(
      &from));
}

void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  return true;
}

void Preedit_Segment::InternalSwap(Preedit_Segment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(status_, other->status_);
}

std::string Preedit_Segment::GetTypeName() const {
  return "khiin.messages.Preedit.Segment";
}


// ===================================================================

class Preedit::_Internal {
 public:
};

Preedit::Preedit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  segments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Preedit)
}
Preedit::Preedit(const Preedit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cursor_position_ = from.cursor_position_;
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Preedit)
}

void Preedit::SharedCtor() {
cursor_position_ = 0;
}

Preedit::~Preedit() {
  // @@protoc_insertion_point(destructor:khiin.messages.Preedit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Preedit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Preedit::ArenaDtor(void* object) {
  Preedit* _this = reinterpret_cast< Preedit* >(object);
  (void)_this;
}
void Preedit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Preedit::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  cursor_position_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Preedit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .khiin.messages.Preedit.Segment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 cursor_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .khiin.messages.Preedit.Segment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  // int32 cursor_position = 2;
  if (this->_internal_cursor_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cursor_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Preedit)
  return target;
}

size_t Preedit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Preedit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.messages.Preedit.Segment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 cursor_position = 2;
  if (this->_internal_cursor_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cursor_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Preedit*>(
      &from));
}

void Preedit::MergeFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from._internal_cursor_position() != 0) {
    _internal_set_cursor_position(from._internal_cursor_position());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Preedit::CopyFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  return true;
}

void Preedit::InternalSwap(Preedit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  swap(cursor_position_, other->cursor_position_);
}

std::string Preedit::GetTypeName() const {
  return "khiin.messages.Preedit";
}


// ===================================================================

class Candidate::_Internal {
 public:
};

Candidate::Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Candidate)
}
Candidate::Candidate(const Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_annotation().empty()) {
    annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Candidate)
}

void Candidate::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
}

Candidate::~Candidate() {
  // @@protoc_insertion_point(destructor:khiin.messages.Candidate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candidate::ArenaDtor(void* object) {
  Candidate* _this = reinterpret_cast< Candidate* >(object);
  (void)_this;
}
void Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_.ClearToEmpty();
  annotation_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear<std::string>();
}

const char* Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_annotation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.Candidate.Category category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::khiin::messages::Candidate_Category>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.messages.Candidate.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.messages.Candidate.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string annotation = 4;
  if (!this->_internal_annotation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation().data(), static_cast<int>(this->_internal_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "khiin.messages.Candidate.annotation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_annotation(), target);
  }

  // .khiin.messages.Candidate.Category category = 5;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Candidate)
  return target;
}

size_t Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Candidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string annotation = 4;
  if (!this->_internal_annotation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .khiin.messages.Candidate.Category category = 5;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candidate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Candidate*>(
      &from));
}

void Candidate::MergeFrom(const Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_annotation().empty()) {
    _internal_set_annotation(from._internal_annotation());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_category() != 0) {
    _internal_set_category(from._internal_category());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Candidate::CopyFrom(const Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidate::IsInitialized() const {
  return true;
}

void Candidate::InternalSwap(Candidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotation_, lhs_arena,
      &other->annotation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candidate, category_)
      + sizeof(Candidate::category_)
      - PROTOBUF_FIELD_OFFSET(Candidate, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string Candidate::GetTypeName() const {
  return "khiin.messages.Candidate";
}


// ===================================================================

class CandidateList::_Internal {
 public:
};

CandidateList::CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.CandidateList)
}
CandidateList::CandidateList(const CandidateList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  focused_ = from.focused_;
  // @@protoc_insertion_point(copy_constructor:khiin.messages.CandidateList)
}

void CandidateList::SharedCtor() {
focused_ = 0;
}

CandidateList::~CandidateList() {
  // @@protoc_insertion_point(destructor:khiin.messages.CandidateList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CandidateList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CandidateList::ArenaDtor(void* object) {
  CandidateList* _this = reinterpret_cast< CandidateList* >(object);
  (void)_this;
}
void CandidateList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  focused_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* CandidateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .khiin.messages.Candidate candidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 focused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          focused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .khiin.messages.Candidate candidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candidates(i), target, stream);
  }

  // int32 focused = 2;
  if (this->_internal_focused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_focused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.CandidateList)
  return target;
}

size_t CandidateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.CandidateList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .khiin.messages.Candidate candidates = 1;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 focused = 2;
  if (this->_internal_focused() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_focused());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CandidateList*>(
      &from));
}

void CandidateList::MergeFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from._internal_focused() != 0) {
    _internal_set_focused(from._internal_focused());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CandidateList::CopyFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {
  return true;
}

void CandidateList::InternalSwap(CandidateList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  candidates_.InternalSwap(&other->candidates_);
  swap(focused_, other->focused_);
}

std::string CandidateList::GetTypeName() const {
  return "khiin.messages.CandidateList";
}


// ===================================================================

class Output::_Internal {
 public:
  static const ::khiin::messages::Preedit& preedit(const Output* msg);
  static const ::khiin::messages::CandidateList& candidate_list(const Output* msg);
};

const ::khiin::messages::Preedit&
Output::_Internal::preedit(const Output* msg) {
  return *msg->preedit_;
}
const ::khiin::messages::CandidateList&
Output::_Internal::candidate_list(const Output* msg) {
  return *msg->candidate_list_;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_preedit()) {
    preedit_ = new ::khiin::messages::Preedit(*from.preedit_);
  } else {
    preedit_ = nullptr;
  }
  if (from._internal_has_candidate_list()) {
    candidate_list_ = new ::khiin::messages::CandidateList(*from.candidate_list_);
  } else {
    candidate_list_ = nullptr;
  }
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&consumable_) -
    reinterpret_cast<char*>(&error_)) + sizeof(consumable_));
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Output)
}

void Output::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preedit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consumable_) -
    reinterpret_cast<char*>(&preedit_)) + sizeof(consumable_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:khiin.messages.Output)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preedit_;
  if (this != internal_default_instance()) delete candidate_list_;
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && preedit_ != nullptr) {
    delete preedit_;
  }
  preedit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && candidate_list_ != nullptr) {
    delete candidate_list_;
  }
  candidate_list_ = nullptr;
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consumable_) -
      reinterpret_cast<char*>(&error_)) + sizeof(consumable_));
  _internal_metadata_.Clear<std::string>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.messages.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::khiin::messages::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.Preedit preedit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preedit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.CandidateList candidate_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.EditState edit_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edit_state(static_cast<::khiin::messages::EditState>(val));
        } else
          goto handle_unusual;
        continue;
      // bool consumable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          consumable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.messages.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // .khiin.messages.Preedit preedit = 2;
  if (this->_internal_has_preedit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preedit(this), target, stream);
  }

  // .khiin.messages.CandidateList candidate_list = 3;
  if (this->_internal_has_candidate_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::candidate_list(this), target, stream);
  }

  // .khiin.messages.EditState edit_state = 4;
  if (this->_internal_edit_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_edit_state(), target);
  }

  // bool consumable = 5;
  if (this->_internal_consumable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_consumable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.messages.Preedit preedit = 2;
  if (this->_internal_has_preedit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preedit_);
  }

  // .khiin.messages.CandidateList candidate_list = 3;
  if (this->_internal_has_candidate_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_list_);
  }

  // .khiin.messages.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // .khiin.messages.EditState edit_state = 4;
  if (this->_internal_edit_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edit_state());
  }

  // bool consumable = 5;
  if (this->_internal_consumable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Output*>(
      &from));
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Output)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preedit()) {
    _internal_mutable_preedit()->::khiin::messages::Preedit::MergeFrom(from._internal_preedit());
  }
  if (from._internal_has_candidate_list()) {
    _internal_mutable_candidate_list()->::khiin::messages::CandidateList::MergeFrom(from._internal_candidate_list());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_edit_state() != 0) {
    _internal_set_edit_state(from._internal_edit_state());
  }
  if (from._internal_consumable() != 0) {
    _internal_set_consumable(from._internal_consumable());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, consumable_)
      + sizeof(Output::consumable_)
      - PROTOBUF_FIELD_OFFSET(Output, preedit_)>(
          reinterpret_cast<char*>(&preedit_),
          reinterpret_cast<char*>(&other->preedit_));
}

std::string Output::GetTypeName() const {
  return "khiin.messages.Output";
}


// ===================================================================

class Command::_Internal {
 public:
  static const ::khiin::messages::Input& input(const Command* msg);
  static const ::khiin::messages::Output& output(const Command* msg);
};

const ::khiin::messages::Input&
Command::_Internal::input(const Command* msg) {
  return *msg->input_;
}
const ::khiin::messages::Output&
Command::_Internal::output(const Command* msg) {
  return *msg->output_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:khiin.messages.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::khiin::messages::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::khiin::messages::Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:khiin.messages.Command)
}

void Command::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&input_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&input_)) + sizeof(type_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:khiin.messages.Command)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:khiin.messages.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .khiin.messages.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::khiin::messages::CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .khiin.messages.Output output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:khiin.messages.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .khiin.messages.CommandType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .khiin.messages.Input input = 2;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  // .khiin.messages.Output output = 3;
  if (this->_internal_has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:khiin.messages.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:khiin.messages.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .khiin.messages.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .khiin.messages.Output output = 3;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  // .khiin.messages.CommandType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Command*>(
      &from));
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:khiin.messages.Command)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _internal_mutable_input()->::khiin::messages::Input::MergeFrom(from._internal_input());
  }
  if (from._internal_has_output()) {
    _internal_mutable_output()->::khiin::messages::Output::MergeFrom(from._internal_output());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:khiin.messages.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, type_)
      + sizeof(Command::type_)
      - PROTOBUF_FIELD_OFFSET(Command, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

std::string Command::GetTypeName() const {
  return "khiin.messages.Command";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::khiin::messages::KeyEvent* Arena::CreateMaybeMessage< ::khiin::messages::KeyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::KeyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Input* Arena::CreateMaybeMessage< ::khiin::messages::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Preedit_Segment* Arena::CreateMaybeMessage< ::khiin::messages::Preedit_Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Preedit_Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Preedit* Arena::CreateMaybeMessage< ::khiin::messages::Preedit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Preedit >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Candidate* Arena::CreateMaybeMessage< ::khiin::messages::Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::CandidateList* Arena::CreateMaybeMessage< ::khiin::messages::CandidateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::CandidateList >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Output* Arena::CreateMaybeMessage< ::khiin::messages::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::khiin::messages::Command* Arena::CreateMaybeMessage< ::khiin::messages::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::khiin::messages::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
