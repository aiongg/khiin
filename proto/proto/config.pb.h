// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconfig_2eproto;
namespace khiin {
namespace proto {
class AppConfig;
struct AppConfigDefaultTypeInternal;
extern AppConfigDefaultTypeInternal _AppConfig_default_instance_;
class BoolValue;
struct BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class KeyConfiguration;
struct KeyConfigurationDefaultTypeInternal;
extern KeyConfigurationDefaultTypeInternal _KeyConfiguration_default_instance_;
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> ::khiin::proto::AppConfig* Arena::CreateMaybeMessage<::khiin::proto::AppConfig>(Arena*);
template<> ::khiin::proto::BoolValue* Arena::CreateMaybeMessage<::khiin::proto::BoolValue>(Arena*);
template<> ::khiin::proto::KeyConfiguration* Arena::CreateMaybeMessage<::khiin::proto::KeyConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace khiin {
namespace proto {

enum InputMode : int {
  IM_UNSPECIFIED = 0,
  IM_ALPHA = 1,
  IM_CONTINUOUS = 2,
  IM_BASIC = 3,
  IM_PRO = 4,
  InputMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InputMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InputMode_IsValid(int value);
constexpr InputMode InputMode_MIN = IM_UNSPECIFIED;
constexpr InputMode InputMode_MAX = IM_PRO;
constexpr int InputMode_ARRAYSIZE = InputMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputMode_descriptor();
template<typename T>
inline const std::string& InputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InputMode_descriptor(), enum_t_value);
}
inline bool InputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InputMode>(
    InputMode_descriptor(), name, value);
}
// ===================================================================

class BoolValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.BoolValue) */ {
 public:
  inline BoolValue() : BoolValue(nullptr) {}
  ~BoolValue() override;
  explicit constexpr BoolValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolValue(const BoolValue& from);
  BoolValue(BoolValue&& from) noexcept
    : BoolValue() {
    *this = ::std::move(from);
  }

  inline BoolValue& operator=(const BoolValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolValue& operator=(BoolValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolValue* internal_default_instance() {
    return reinterpret_cast<const BoolValue*>(
               &_BoolValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoolValue& a, BoolValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolValue* New() const final {
    return new BoolValue();
  }

  BoolValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.BoolValue";
  }
  protected:
  explicit BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.BoolValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class KeyConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.KeyConfiguration) */ {
 public:
  inline KeyConfiguration() : KeyConfiguration(nullptr) {}
  ~KeyConfiguration() override;
  explicit constexpr KeyConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyConfiguration(const KeyConfiguration& from);
  KeyConfiguration(KeyConfiguration&& from) noexcept
    : KeyConfiguration() {
    *this = ::std::move(from);
  }

  inline KeyConfiguration& operator=(const KeyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyConfiguration& operator=(KeyConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyConfiguration* internal_default_instance() {
    return reinterpret_cast<const KeyConfiguration*>(
               &_KeyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyConfiguration& a, KeyConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyConfiguration* New() const final {
    return new KeyConfiguration();
  }

  KeyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.KeyConfiguration";
  }
  protected:
  explicit KeyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelexT2FieldNumber = 1,
    kTelexT3FieldNumber = 2,
    kTelexT5FieldNumber = 3,
    kTelexT6FieldNumber = 4,
    kTelexT7FieldNumber = 5,
    kTelexT8FieldNumber = 6,
    kTelexT9FieldNumber = 7,
    kTelexKhinFieldNumber = 8,
    kAltHyphenFieldNumber = 9,
    kNasalFieldNumber = 10,
    kDotAboveRightFieldNumber = 11,
    kDotsBelowFieldNumber = 12,
    kEnableUppercaseNasalFieldNumber = 13,
    kUseDigitsAsFallbackFieldNumber = 14,
  };
  // string telex_t2 = 1;
  void clear_telex_t2();
  const std::string& telex_t2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t2();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t2();
  void set_allocated_telex_t2(std::string* telex_t2);
  private:
  const std::string& _internal_telex_t2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t2(const std::string& value);
  std::string* _internal_mutable_telex_t2();
  public:

  // string telex_t3 = 2;
  void clear_telex_t3();
  const std::string& telex_t3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t3();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t3();
  void set_allocated_telex_t3(std::string* telex_t3);
  private:
  const std::string& _internal_telex_t3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t3(const std::string& value);
  std::string* _internal_mutable_telex_t3();
  public:

  // string telex_t5 = 3;
  void clear_telex_t5();
  const std::string& telex_t5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t5();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t5();
  void set_allocated_telex_t5(std::string* telex_t5);
  private:
  const std::string& _internal_telex_t5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t5(const std::string& value);
  std::string* _internal_mutable_telex_t5();
  public:

  // string telex_t6 = 4;
  void clear_telex_t6();
  const std::string& telex_t6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t6();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t6();
  void set_allocated_telex_t6(std::string* telex_t6);
  private:
  const std::string& _internal_telex_t6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t6(const std::string& value);
  std::string* _internal_mutable_telex_t6();
  public:

  // string telex_t7 = 5;
  void clear_telex_t7();
  const std::string& telex_t7() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t7(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t7();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t7();
  void set_allocated_telex_t7(std::string* telex_t7);
  private:
  const std::string& _internal_telex_t7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t7(const std::string& value);
  std::string* _internal_mutable_telex_t7();
  public:

  // string telex_t8 = 6;
  void clear_telex_t8();
  const std::string& telex_t8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t8();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t8();
  void set_allocated_telex_t8(std::string* telex_t8);
  private:
  const std::string& _internal_telex_t8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t8(const std::string& value);
  std::string* _internal_mutable_telex_t8();
  public:

  // string telex_t9 = 7;
  void clear_telex_t9();
  const std::string& telex_t9() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t9(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t9();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_t9();
  void set_allocated_telex_t9(std::string* telex_t9);
  private:
  const std::string& _internal_telex_t9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t9(const std::string& value);
  std::string* _internal_mutable_telex_t9();
  public:

  // string telex_khin = 8;
  void clear_telex_khin();
  const std::string& telex_khin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_khin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_khin();
  PROTOBUF_MUST_USE_RESULT std::string* release_telex_khin();
  void set_allocated_telex_khin(std::string* telex_khin);
  private:
  const std::string& _internal_telex_khin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_khin(const std::string& value);
  std::string* _internal_mutable_telex_khin();
  public:

  // string alt_hyphen = 9;
  void clear_alt_hyphen();
  const std::string& alt_hyphen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alt_hyphen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alt_hyphen();
  PROTOBUF_MUST_USE_RESULT std::string* release_alt_hyphen();
  void set_allocated_alt_hyphen(std::string* alt_hyphen);
  private:
  const std::string& _internal_alt_hyphen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alt_hyphen(const std::string& value);
  std::string* _internal_mutable_alt_hyphen();
  public:

  // string nasal = 10;
  void clear_nasal();
  const std::string& nasal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nasal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nasal();
  PROTOBUF_MUST_USE_RESULT std::string* release_nasal();
  void set_allocated_nasal(std::string* nasal);
  private:
  const std::string& _internal_nasal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nasal(const std::string& value);
  std::string* _internal_mutable_nasal();
  public:

  // string dot_above_right = 11;
  void clear_dot_above_right();
  const std::string& dot_above_right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dot_above_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dot_above_right();
  PROTOBUF_MUST_USE_RESULT std::string* release_dot_above_right();
  void set_allocated_dot_above_right(std::string* dot_above_right);
  private:
  const std::string& _internal_dot_above_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dot_above_right(const std::string& value);
  std::string* _internal_mutable_dot_above_right();
  public:

  // string dots_below = 12;
  void clear_dots_below();
  const std::string& dots_below() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dots_below(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dots_below();
  PROTOBUF_MUST_USE_RESULT std::string* release_dots_below();
  void set_allocated_dots_below(std::string* dots_below);
  private:
  const std::string& _internal_dots_below() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dots_below(const std::string& value);
  std::string* _internal_mutable_dots_below();
  public:

  // bool enable_uppercase_nasal = 13;
  void clear_enable_uppercase_nasal();
  bool enable_uppercase_nasal() const;
  void set_enable_uppercase_nasal(bool value);
  private:
  bool _internal_enable_uppercase_nasal() const;
  void _internal_set_enable_uppercase_nasal(bool value);
  public:

  // bool use_digits_as_fallback = 14;
  void clear_use_digits_as_fallback();
  bool use_digits_as_fallback() const;
  void set_use_digits_as_fallback(bool value);
  private:
  bool _internal_use_digits_as_fallback() const;
  void _internal_set_use_digits_as_fallback(bool value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.KeyConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_khin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alt_hyphen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nasal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dot_above_right_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dots_below_;
  bool enable_uppercase_nasal_;
  bool use_digits_as_fallback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AppConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:khiin.proto.AppConfig) */ {
 public:
  inline AppConfig() : AppConfig(nullptr) {}
  ~AppConfig() override;
  explicit constexpr AppConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppConfig(const AppConfig& from);
  AppConfig(AppConfig&& from) noexcept
    : AppConfig() {
    *this = ::std::move(from);
  }

  inline AppConfig& operator=(const AppConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConfig& operator=(AppConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppConfig* internal_default_instance() {
    return reinterpret_cast<const AppConfig*>(
               &_AppConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppConfig& a, AppConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConfig* New() const final {
    return new AppConfig();
  }

  AppConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.AppConfig";
  }
  protected:
  explicit AppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyConfigFieldNumber = 1,
    kDottedKhinFieldNumber = 3,
    kInputModeFieldNumber = 2,
  };
  // .khiin.proto.KeyConfiguration key_config = 1;
  bool has_key_config() const;
  private:
  bool _internal_has_key_config() const;
  public:
  void clear_key_config();
  const ::khiin::proto::KeyConfiguration& key_config() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::KeyConfiguration* release_key_config();
  ::khiin::proto::KeyConfiguration* mutable_key_config();
  void set_allocated_key_config(::khiin::proto::KeyConfiguration* key_config);
  private:
  const ::khiin::proto::KeyConfiguration& _internal_key_config() const;
  ::khiin::proto::KeyConfiguration* _internal_mutable_key_config();
  public:
  void unsafe_arena_set_allocated_key_config(
      ::khiin::proto::KeyConfiguration* key_config);
  ::khiin::proto::KeyConfiguration* unsafe_arena_release_key_config();

  // .khiin.proto.BoolValue dotted_khin = 3;
  bool has_dotted_khin() const;
  private:
  bool _internal_has_dotted_khin() const;
  public:
  void clear_dotted_khin();
  const ::khiin::proto::BoolValue& dotted_khin() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::proto::BoolValue* release_dotted_khin();
  ::khiin::proto::BoolValue* mutable_dotted_khin();
  void set_allocated_dotted_khin(::khiin::proto::BoolValue* dotted_khin);
  private:
  const ::khiin::proto::BoolValue& _internal_dotted_khin() const;
  ::khiin::proto::BoolValue* _internal_mutable_dotted_khin();
  public:
  void unsafe_arena_set_allocated_dotted_khin(
      ::khiin::proto::BoolValue* dotted_khin);
  ::khiin::proto::BoolValue* unsafe_arena_release_dotted_khin();

  // .khiin.proto.InputMode input_mode = 2;
  void clear_input_mode();
  ::khiin::proto::InputMode input_mode() const;
  void set_input_mode(::khiin::proto::InputMode value);
  private:
  ::khiin::proto::InputMode _internal_input_mode() const;
  void _internal_set_input_mode(::khiin::proto::InputMode value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.AppConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::proto::KeyConfiguration* key_config_;
  ::khiin::proto::BoolValue* dotted_khin_;
  int input_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoolValue

// bool value = 1;
inline void BoolValue::clear_value() {
  value_ = false;
}
inline bool BoolValue::_internal_value() const {
  return value_;
}
inline bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:khiin.proto.BoolValue.value)
  return _internal_value();
}
inline void BoolValue::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void BoolValue::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:khiin.proto.BoolValue.value)
}

// -------------------------------------------------------------------

// KeyConfiguration

// string telex_t2 = 1;
inline void KeyConfiguration::clear_telex_t2() {
  telex_t2_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t2() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t2)
  return _internal_telex_t2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t2(ArgT0&& arg0, ArgT... args) {
 
 telex_t2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t2)
}
inline std::string* KeyConfiguration::mutable_telex_t2() {
  std::string* _s = _internal_mutable_telex_t2();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t2)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t2() const {
  return telex_t2_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t2(const std::string& value) {
  
  telex_t2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t2() {
  
  return telex_t2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t2() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t2)
  return telex_t2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t2(std::string* telex_t2) {
  if (telex_t2 != nullptr) {
    
  } else {
    
  }
  telex_t2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t2)
}

// string telex_t3 = 2;
inline void KeyConfiguration::clear_telex_t3() {
  telex_t3_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t3() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t3)
  return _internal_telex_t3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t3(ArgT0&& arg0, ArgT... args) {
 
 telex_t3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t3)
}
inline std::string* KeyConfiguration::mutable_telex_t3() {
  std::string* _s = _internal_mutable_telex_t3();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t3)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t3() const {
  return telex_t3_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t3(const std::string& value) {
  
  telex_t3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t3() {
  
  return telex_t3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t3() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t3)
  return telex_t3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t3(std::string* telex_t3) {
  if (telex_t3 != nullptr) {
    
  } else {
    
  }
  telex_t3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t3,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t3)
}

// string telex_t5 = 3;
inline void KeyConfiguration::clear_telex_t5() {
  telex_t5_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t5() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t5)
  return _internal_telex_t5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t5(ArgT0&& arg0, ArgT... args) {
 
 telex_t5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t5)
}
inline std::string* KeyConfiguration::mutable_telex_t5() {
  std::string* _s = _internal_mutable_telex_t5();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t5)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t5() const {
  return telex_t5_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t5(const std::string& value) {
  
  telex_t5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t5() {
  
  return telex_t5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t5() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t5)
  return telex_t5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t5(std::string* telex_t5) {
  if (telex_t5 != nullptr) {
    
  } else {
    
  }
  telex_t5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t5)
}

// string telex_t6 = 4;
inline void KeyConfiguration::clear_telex_t6() {
  telex_t6_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t6() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t6)
  return _internal_telex_t6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t6(ArgT0&& arg0, ArgT... args) {
 
 telex_t6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t6)
}
inline std::string* KeyConfiguration::mutable_telex_t6() {
  std::string* _s = _internal_mutable_telex_t6();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t6)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t6() const {
  return telex_t6_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t6(const std::string& value) {
  
  telex_t6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t6() {
  
  return telex_t6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t6() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t6)
  return telex_t6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t6(std::string* telex_t6) {
  if (telex_t6 != nullptr) {
    
  } else {
    
  }
  telex_t6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t6,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t6)
}

// string telex_t7 = 5;
inline void KeyConfiguration::clear_telex_t7() {
  telex_t7_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t7() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t7)
  return _internal_telex_t7();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t7(ArgT0&& arg0, ArgT... args) {
 
 telex_t7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t7)
}
inline std::string* KeyConfiguration::mutable_telex_t7() {
  std::string* _s = _internal_mutable_telex_t7();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t7)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t7() const {
  return telex_t7_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t7(const std::string& value) {
  
  telex_t7_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t7() {
  
  return telex_t7_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t7() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t7)
  return telex_t7_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t7(std::string* telex_t7) {
  if (telex_t7 != nullptr) {
    
  } else {
    
  }
  telex_t7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t7,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t7)
}

// string telex_t8 = 6;
inline void KeyConfiguration::clear_telex_t8() {
  telex_t8_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t8() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t8)
  return _internal_telex_t8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t8(ArgT0&& arg0, ArgT... args) {
 
 telex_t8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t8)
}
inline std::string* KeyConfiguration::mutable_telex_t8() {
  std::string* _s = _internal_mutable_telex_t8();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t8)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t8() const {
  return telex_t8_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t8(const std::string& value) {
  
  telex_t8_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t8() {
  
  return telex_t8_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t8() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t8)
  return telex_t8_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t8(std::string* telex_t8) {
  if (telex_t8 != nullptr) {
    
  } else {
    
  }
  telex_t8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t8,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t8)
}

// string telex_t9 = 7;
inline void KeyConfiguration::clear_telex_t9() {
  telex_t9_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t9() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t9)
  return _internal_telex_t9();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t9(ArgT0&& arg0, ArgT... args) {
 
 telex_t9_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t9)
}
inline std::string* KeyConfiguration::mutable_telex_t9() {
  std::string* _s = _internal_mutable_telex_t9();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t9)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t9() const {
  return telex_t9_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t9(const std::string& value) {
  
  telex_t9_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t9() {
  
  return telex_t9_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t9() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t9)
  return telex_t9_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_t9(std::string* telex_t9) {
  if (telex_t9 != nullptr) {
    
  } else {
    
  }
  telex_t9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_t9,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t9)
}

// string telex_khin = 8;
inline void KeyConfiguration::clear_telex_khin() {
  telex_khin_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_khin() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_khin)
  return _internal_telex_khin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_khin(ArgT0&& arg0, ArgT... args) {
 
 telex_khin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_khin)
}
inline std::string* KeyConfiguration::mutable_telex_khin() {
  std::string* _s = _internal_mutable_telex_khin();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_khin)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_khin() const {
  return telex_khin_.Get();
}
inline void KeyConfiguration::_internal_set_telex_khin(const std::string& value) {
  
  telex_khin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_khin() {
  
  return telex_khin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_khin() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_khin)
  return telex_khin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_telex_khin(std::string* telex_khin) {
  if (telex_khin != nullptr) {
    
  } else {
    
  }
  telex_khin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telex_khin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_khin)
}

// string alt_hyphen = 9;
inline void KeyConfiguration::clear_alt_hyphen() {
  alt_hyphen_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::alt_hyphen() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.alt_hyphen)
  return _internal_alt_hyphen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_alt_hyphen(ArgT0&& arg0, ArgT... args) {
 
 alt_hyphen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.alt_hyphen)
}
inline std::string* KeyConfiguration::mutable_alt_hyphen() {
  std::string* _s = _internal_mutable_alt_hyphen();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.alt_hyphen)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_alt_hyphen() const {
  return alt_hyphen_.Get();
}
inline void KeyConfiguration::_internal_set_alt_hyphen(const std::string& value) {
  
  alt_hyphen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_alt_hyphen() {
  
  return alt_hyphen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_alt_hyphen() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.alt_hyphen)
  return alt_hyphen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_alt_hyphen(std::string* alt_hyphen) {
  if (alt_hyphen != nullptr) {
    
  } else {
    
  }
  alt_hyphen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alt_hyphen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.alt_hyphen)
}

// string nasal = 10;
inline void KeyConfiguration::clear_nasal() {
  nasal_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::nasal() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.nasal)
  return _internal_nasal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_nasal(ArgT0&& arg0, ArgT... args) {
 
 nasal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.nasal)
}
inline std::string* KeyConfiguration::mutable_nasal() {
  std::string* _s = _internal_mutable_nasal();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.nasal)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_nasal() const {
  return nasal_.Get();
}
inline void KeyConfiguration::_internal_set_nasal(const std::string& value) {
  
  nasal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_nasal() {
  
  return nasal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_nasal() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.nasal)
  return nasal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_nasal(std::string* nasal) {
  if (nasal != nullptr) {
    
  } else {
    
  }
  nasal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nasal,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.nasal)
}

// string dot_above_right = 11;
inline void KeyConfiguration::clear_dot_above_right() {
  dot_above_right_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::dot_above_right() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.dot_above_right)
  return _internal_dot_above_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_dot_above_right(ArgT0&& arg0, ArgT... args) {
 
 dot_above_right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.dot_above_right)
}
inline std::string* KeyConfiguration::mutable_dot_above_right() {
  std::string* _s = _internal_mutable_dot_above_right();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.dot_above_right)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_dot_above_right() const {
  return dot_above_right_.Get();
}
inline void KeyConfiguration::_internal_set_dot_above_right(const std::string& value) {
  
  dot_above_right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_dot_above_right() {
  
  return dot_above_right_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_dot_above_right() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.dot_above_right)
  return dot_above_right_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_dot_above_right(std::string* dot_above_right) {
  if (dot_above_right != nullptr) {
    
  } else {
    
  }
  dot_above_right_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dot_above_right,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.dot_above_right)
}

// string dots_below = 12;
inline void KeyConfiguration::clear_dots_below() {
  dots_below_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::dots_below() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.dots_below)
  return _internal_dots_below();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_dots_below(ArgT0&& arg0, ArgT... args) {
 
 dots_below_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.dots_below)
}
inline std::string* KeyConfiguration::mutable_dots_below() {
  std::string* _s = _internal_mutable_dots_below();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.dots_below)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_dots_below() const {
  return dots_below_.Get();
}
inline void KeyConfiguration::_internal_set_dots_below(const std::string& value) {
  
  dots_below_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_dots_below() {
  
  return dots_below_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_dots_below() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.dots_below)
  return dots_below_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyConfiguration::set_allocated_dots_below(std::string* dots_below) {
  if (dots_below != nullptr) {
    
  } else {
    
  }
  dots_below_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dots_below,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.dots_below)
}

// bool enable_uppercase_nasal = 13;
inline void KeyConfiguration::clear_enable_uppercase_nasal() {
  enable_uppercase_nasal_ = false;
}
inline bool KeyConfiguration::_internal_enable_uppercase_nasal() const {
  return enable_uppercase_nasal_;
}
inline bool KeyConfiguration::enable_uppercase_nasal() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
  return _internal_enable_uppercase_nasal();
}
inline void KeyConfiguration::_internal_set_enable_uppercase_nasal(bool value) {
  
  enable_uppercase_nasal_ = value;
}
inline void KeyConfiguration::set_enable_uppercase_nasal(bool value) {
  _internal_set_enable_uppercase_nasal(value);
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
}

// bool use_digits_as_fallback = 14;
inline void KeyConfiguration::clear_use_digits_as_fallback() {
  use_digits_as_fallback_ = false;
}
inline bool KeyConfiguration::_internal_use_digits_as_fallback() const {
  return use_digits_as_fallback_;
}
inline bool KeyConfiguration::use_digits_as_fallback() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.use_digits_as_fallback)
  return _internal_use_digits_as_fallback();
}
inline void KeyConfiguration::_internal_set_use_digits_as_fallback(bool value) {
  
  use_digits_as_fallback_ = value;
}
inline void KeyConfiguration::set_use_digits_as_fallback(bool value) {
  _internal_set_use_digits_as_fallback(value);
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.use_digits_as_fallback)
}

// -------------------------------------------------------------------

// AppConfig

// .khiin.proto.KeyConfiguration key_config = 1;
inline bool AppConfig::_internal_has_key_config() const {
  return this != internal_default_instance() && key_config_ != nullptr;
}
inline bool AppConfig::has_key_config() const {
  return _internal_has_key_config();
}
inline void AppConfig::clear_key_config() {
  if (GetArenaForAllocation() == nullptr && key_config_ != nullptr) {
    delete key_config_;
  }
  key_config_ = nullptr;
}
inline const ::khiin::proto::KeyConfiguration& AppConfig::_internal_key_config() const {
  const ::khiin::proto::KeyConfiguration* p = key_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::KeyConfiguration&>(
      ::khiin::proto::_KeyConfiguration_default_instance_);
}
inline const ::khiin::proto::KeyConfiguration& AppConfig::key_config() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.key_config)
  return _internal_key_config();
}
inline void AppConfig::unsafe_arena_set_allocated_key_config(
    ::khiin::proto::KeyConfiguration* key_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_config_);
  }
  key_config_ = key_config;
  if (key_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.key_config)
}
inline ::khiin::proto::KeyConfiguration* AppConfig::release_key_config() {
  
  ::khiin::proto::KeyConfiguration* temp = key_config_;
  key_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::unsafe_arena_release_key_config() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.key_config)
  
  ::khiin::proto::KeyConfiguration* temp = key_config_;
  key_config_ = nullptr;
  return temp;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::_internal_mutable_key_config() {
  
  if (key_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::KeyConfiguration>(GetArenaForAllocation());
    key_config_ = p;
  }
  return key_config_;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::mutable_key_config() {
  ::khiin::proto::KeyConfiguration* _msg = _internal_mutable_key_config();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.key_config)
  return _msg;
}
inline void AppConfig::set_allocated_key_config(::khiin::proto::KeyConfiguration* key_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_config_;
  }
  if (key_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::KeyConfiguration>::GetOwningArena(key_config);
    if (message_arena != submessage_arena) {
      key_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_config, submessage_arena);
    }
    
  } else {
    
  }
  key_config_ = key_config;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.key_config)
}

// .khiin.proto.InputMode input_mode = 2;
inline void AppConfig::clear_input_mode() {
  input_mode_ = 0;
}
inline ::khiin::proto::InputMode AppConfig::_internal_input_mode() const {
  return static_cast< ::khiin::proto::InputMode >(input_mode_);
}
inline ::khiin::proto::InputMode AppConfig::input_mode() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.input_mode)
  return _internal_input_mode();
}
inline void AppConfig::_internal_set_input_mode(::khiin::proto::InputMode value) {
  
  input_mode_ = value;
}
inline void AppConfig::set_input_mode(::khiin::proto::InputMode value) {
  _internal_set_input_mode(value);
  // @@protoc_insertion_point(field_set:khiin.proto.AppConfig.input_mode)
}

// .khiin.proto.BoolValue dotted_khin = 3;
inline bool AppConfig::_internal_has_dotted_khin() const {
  return this != internal_default_instance() && dotted_khin_ != nullptr;
}
inline bool AppConfig::has_dotted_khin() const {
  return _internal_has_dotted_khin();
}
inline void AppConfig::clear_dotted_khin() {
  if (GetArenaForAllocation() == nullptr && dotted_khin_ != nullptr) {
    delete dotted_khin_;
  }
  dotted_khin_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_dotted_khin() const {
  const ::khiin::proto::BoolValue* p = dotted_khin_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::dotted_khin() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.dotted_khin)
  return _internal_dotted_khin();
}
inline void AppConfig::unsafe_arena_set_allocated_dotted_khin(
    ::khiin::proto::BoolValue* dotted_khin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dotted_khin_);
  }
  dotted_khin_ = dotted_khin;
  if (dotted_khin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.dotted_khin)
}
inline ::khiin::proto::BoolValue* AppConfig::release_dotted_khin() {
  
  ::khiin::proto::BoolValue* temp = dotted_khin_;
  dotted_khin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_dotted_khin() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.dotted_khin)
  
  ::khiin::proto::BoolValue* temp = dotted_khin_;
  dotted_khin_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_dotted_khin() {
  
  if (dotted_khin_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    dotted_khin_ = p;
  }
  return dotted_khin_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_dotted_khin() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_dotted_khin();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.dotted_khin)
  return _msg;
}
inline void AppConfig::set_allocated_dotted_khin(::khiin::proto::BoolValue* dotted_khin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dotted_khin_;
  }
  if (dotted_khin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::proto::BoolValue>::GetOwningArena(dotted_khin);
    if (message_arena != submessage_arena) {
      dotted_khin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dotted_khin, submessage_arena);
    }
    
  } else {
    
  }
  dotted_khin_ = dotted_khin;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.dotted_khin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace khiin

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::khiin::proto::InputMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::khiin::proto::InputMode>() {
  return ::khiin::proto::InputMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto
