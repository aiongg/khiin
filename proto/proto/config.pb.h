// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fconfig_2eproto {
  static const uint32_t offsets[];
};
namespace khiin {
namespace proto {
class AppConfig;
struct AppConfigDefaultTypeInternal;
extern AppConfigDefaultTypeInternal _AppConfig_default_instance_;
class BoolValue;
struct BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class KeyConfiguration;
struct KeyConfigurationDefaultTypeInternal;
extern KeyConfigurationDefaultTypeInternal _KeyConfiguration_default_instance_;
}  // namespace proto
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> ::khiin::proto::AppConfig* Arena::CreateMaybeMessage<::khiin::proto::AppConfig>(Arena*);
template<> ::khiin::proto::BoolValue* Arena::CreateMaybeMessage<::khiin::proto::BoolValue>(Arena*);
template<> ::khiin::proto::KeyConfiguration* Arena::CreateMaybeMessage<::khiin::proto::KeyConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace khiin {
namespace proto {

enum InputMode : int {
  IM_UNSPECIFIED = 0,
  IM_CONTINUOUS = 1,
  IM_BASIC = 2,
  IM_PRO = 3,
  InputMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InputMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InputMode_IsValid(int value);
constexpr InputMode InputMode_MIN = IM_UNSPECIFIED;
constexpr InputMode InputMode_MAX = IM_PRO;
constexpr int InputMode_ARRAYSIZE = InputMode_MAX + 1;

const std::string& InputMode_Name(InputMode value);
template<typename T>
inline const std::string& InputMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputMode_Name.");
  return InputMode_Name(static_cast<InputMode>(enum_t_value));
}
bool InputMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputMode* value);
enum DefaultPunctuation : int {
  PUNCT_UNSPECIFIED = 0,
  PUNCT_HALF = 1,
  PUNCT_WHOLE = 2,
  DefaultPunctuation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DefaultPunctuation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DefaultPunctuation_IsValid(int value);
constexpr DefaultPunctuation DefaultPunctuation_MIN = PUNCT_UNSPECIFIED;
constexpr DefaultPunctuation DefaultPunctuation_MAX = PUNCT_WHOLE;
constexpr int DefaultPunctuation_ARRAYSIZE = DefaultPunctuation_MAX + 1;

const std::string& DefaultPunctuation_Name(DefaultPunctuation value);
template<typename T>
inline const std::string& DefaultPunctuation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DefaultPunctuation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DefaultPunctuation_Name.");
  return DefaultPunctuation_Name(static_cast<DefaultPunctuation>(enum_t_value));
}
bool DefaultPunctuation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DefaultPunctuation* value);
// ===================================================================

class BoolValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.proto.BoolValue) */ {
 public:
  inline BoolValue() : BoolValue(nullptr) {}
  ~BoolValue() override;
  explicit PROTOBUF_CONSTEXPR BoolValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolValue(const BoolValue& from);
  BoolValue(BoolValue&& from) noexcept
    : BoolValue() {
    *this = ::std::move(from);
  }

  inline BoolValue& operator=(const BoolValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolValue& operator=(BoolValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoolValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolValue* internal_default_instance() {
    return reinterpret_cast<const BoolValue*>(
               &_BoolValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoolValue& a, BoolValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoolValue& from);
  void MergeFrom(const BoolValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.BoolValue";
  }
  protected:
  explicit BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.BoolValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class KeyConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.proto.KeyConfiguration) */ {
 public:
  inline KeyConfiguration() : KeyConfiguration(nullptr) {}
  ~KeyConfiguration() override;
  explicit PROTOBUF_CONSTEXPR KeyConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyConfiguration(const KeyConfiguration& from);
  KeyConfiguration(KeyConfiguration&& from) noexcept
    : KeyConfiguration() {
    *this = ::std::move(from);
  }

  inline KeyConfiguration& operator=(const KeyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyConfiguration& operator=(KeyConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const KeyConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyConfiguration* internal_default_instance() {
    return reinterpret_cast<const KeyConfiguration*>(
               &_KeyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyConfiguration& a, KeyConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KeyConfiguration& from);
  void MergeFrom(const KeyConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.KeyConfiguration";
  }
  protected:
  explicit KeyConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelexT2FieldNumber = 1,
    kTelexT3FieldNumber = 2,
    kTelexT5FieldNumber = 3,
    kTelexT6FieldNumber = 4,
    kTelexT7FieldNumber = 5,
    kTelexT8FieldNumber = 6,
    kTelexT9FieldNumber = 7,
    kTelexKhinFieldNumber = 8,
    kAltHyphenFieldNumber = 9,
    kNasalFieldNumber = 10,
    kDotAboveRightFieldNumber = 11,
    kDotsBelowFieldNumber = 12,
    kEnableUppercaseNasalFieldNumber = 13,
    kUseDigitsAsFallbackFieldNumber = 14,
  };
  // string telex_t2 = 1;
  void clear_telex_t2();
  const std::string& telex_t2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t2();
  PROTOBUF_NODISCARD std::string* release_telex_t2();
  void set_allocated_telex_t2(std::string* telex_t2);
  private:
  const std::string& _internal_telex_t2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t2(const std::string& value);
  std::string* _internal_mutable_telex_t2();
  public:

  // string telex_t3 = 2;
  void clear_telex_t3();
  const std::string& telex_t3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t3();
  PROTOBUF_NODISCARD std::string* release_telex_t3();
  void set_allocated_telex_t3(std::string* telex_t3);
  private:
  const std::string& _internal_telex_t3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t3(const std::string& value);
  std::string* _internal_mutable_telex_t3();
  public:

  // string telex_t5 = 3;
  void clear_telex_t5();
  const std::string& telex_t5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t5();
  PROTOBUF_NODISCARD std::string* release_telex_t5();
  void set_allocated_telex_t5(std::string* telex_t5);
  private:
  const std::string& _internal_telex_t5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t5(const std::string& value);
  std::string* _internal_mutable_telex_t5();
  public:

  // string telex_t6 = 4;
  void clear_telex_t6();
  const std::string& telex_t6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t6();
  PROTOBUF_NODISCARD std::string* release_telex_t6();
  void set_allocated_telex_t6(std::string* telex_t6);
  private:
  const std::string& _internal_telex_t6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t6(const std::string& value);
  std::string* _internal_mutable_telex_t6();
  public:

  // string telex_t7 = 5;
  void clear_telex_t7();
  const std::string& telex_t7() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t7(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t7();
  PROTOBUF_NODISCARD std::string* release_telex_t7();
  void set_allocated_telex_t7(std::string* telex_t7);
  private:
  const std::string& _internal_telex_t7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t7(const std::string& value);
  std::string* _internal_mutable_telex_t7();
  public:

  // string telex_t8 = 6;
  void clear_telex_t8();
  const std::string& telex_t8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t8();
  PROTOBUF_NODISCARD std::string* release_telex_t8();
  void set_allocated_telex_t8(std::string* telex_t8);
  private:
  const std::string& _internal_telex_t8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t8(const std::string& value);
  std::string* _internal_mutable_telex_t8();
  public:

  // string telex_t9 = 7;
  void clear_telex_t9();
  const std::string& telex_t9() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_t9(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_t9();
  PROTOBUF_NODISCARD std::string* release_telex_t9();
  void set_allocated_telex_t9(std::string* telex_t9);
  private:
  const std::string& _internal_telex_t9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_t9(const std::string& value);
  std::string* _internal_mutable_telex_t9();
  public:

  // string telex_khin = 8;
  void clear_telex_khin();
  const std::string& telex_khin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telex_khin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telex_khin();
  PROTOBUF_NODISCARD std::string* release_telex_khin();
  void set_allocated_telex_khin(std::string* telex_khin);
  private:
  const std::string& _internal_telex_khin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telex_khin(const std::string& value);
  std::string* _internal_mutable_telex_khin();
  public:

  // string alt_hyphen = 9;
  void clear_alt_hyphen();
  const std::string& alt_hyphen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alt_hyphen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alt_hyphen();
  PROTOBUF_NODISCARD std::string* release_alt_hyphen();
  void set_allocated_alt_hyphen(std::string* alt_hyphen);
  private:
  const std::string& _internal_alt_hyphen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alt_hyphen(const std::string& value);
  std::string* _internal_mutable_alt_hyphen();
  public:

  // string nasal = 10;
  void clear_nasal();
  const std::string& nasal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nasal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nasal();
  PROTOBUF_NODISCARD std::string* release_nasal();
  void set_allocated_nasal(std::string* nasal);
  private:
  const std::string& _internal_nasal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nasal(const std::string& value);
  std::string* _internal_mutable_nasal();
  public:

  // string dot_above_right = 11;
  void clear_dot_above_right();
  const std::string& dot_above_right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dot_above_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dot_above_right();
  PROTOBUF_NODISCARD std::string* release_dot_above_right();
  void set_allocated_dot_above_right(std::string* dot_above_right);
  private:
  const std::string& _internal_dot_above_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dot_above_right(const std::string& value);
  std::string* _internal_mutable_dot_above_right();
  public:

  // string dots_below = 12;
  void clear_dots_below();
  const std::string& dots_below() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dots_below(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dots_below();
  PROTOBUF_NODISCARD std::string* release_dots_below();
  void set_allocated_dots_below(std::string* dots_below);
  private:
  const std::string& _internal_dots_below() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dots_below(const std::string& value);
  std::string* _internal_mutable_dots_below();
  public:

  // .khiin.proto.BoolValue enable_uppercase_nasal = 13;
  bool has_enable_uppercase_nasal() const;
  private:
  bool _internal_has_enable_uppercase_nasal() const;
  public:
  void clear_enable_uppercase_nasal();
  const ::khiin::proto::BoolValue& enable_uppercase_nasal() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_enable_uppercase_nasal();
  ::khiin::proto::BoolValue* mutable_enable_uppercase_nasal();
  void set_allocated_enable_uppercase_nasal(::khiin::proto::BoolValue* enable_uppercase_nasal);
  private:
  const ::khiin::proto::BoolValue& _internal_enable_uppercase_nasal() const;
  ::khiin::proto::BoolValue* _internal_mutable_enable_uppercase_nasal();
  public:
  void unsafe_arena_set_allocated_enable_uppercase_nasal(
      ::khiin::proto::BoolValue* enable_uppercase_nasal);
  ::khiin::proto::BoolValue* unsafe_arena_release_enable_uppercase_nasal();

  // .khiin.proto.BoolValue use_digits_as_fallback = 14;
  bool has_use_digits_as_fallback() const;
  private:
  bool _internal_has_use_digits_as_fallback() const;
  public:
  void clear_use_digits_as_fallback();
  const ::khiin::proto::BoolValue& use_digits_as_fallback() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_use_digits_as_fallback();
  ::khiin::proto::BoolValue* mutable_use_digits_as_fallback();
  void set_allocated_use_digits_as_fallback(::khiin::proto::BoolValue* use_digits_as_fallback);
  private:
  const ::khiin::proto::BoolValue& _internal_use_digits_as_fallback() const;
  ::khiin::proto::BoolValue* _internal_mutable_use_digits_as_fallback();
  public:
  void unsafe_arena_set_allocated_use_digits_as_fallback(
      ::khiin::proto::BoolValue* use_digits_as_fallback);
  ::khiin::proto::BoolValue* unsafe_arena_release_use_digits_as_fallback();

  // @@protoc_insertion_point(class_scope:khiin.proto.KeyConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t6_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t7_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t8_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_t9_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telex_khin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alt_hyphen_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nasal_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dot_above_right_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dots_below_;
    ::khiin::proto::BoolValue* enable_uppercase_nasal_;
    ::khiin::proto::BoolValue* use_digits_as_fallback_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AppConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.proto.AppConfig) */ {
 public:
  inline AppConfig() : AppConfig(nullptr) {}
  ~AppConfig() override;
  explicit PROTOBUF_CONSTEXPR AppConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppConfig(const AppConfig& from);
  AppConfig(AppConfig&& from) noexcept
    : AppConfig() {
    *this = ::std::move(from);
  }

  inline AppConfig& operator=(const AppConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConfig& operator=(AppConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AppConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppConfig* internal_default_instance() {
    return reinterpret_cast<const AppConfig*>(
               &_AppConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppConfig& a, AppConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AppConfig& from);
  void MergeFrom(const AppConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.proto.AppConfig";
  }
  protected:
  explicit AppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImeEnabledFieldNumber = 1,
    kKeyConfigFieldNumber = 2,
    kTelexEnabledFieldNumber = 4,
    kDottedKhinFieldNumber = 5,
    kAutokhinFieldNumber = 6,
    kEasyChFieldNumber = 8,
    kUppercaseNasalFieldNumber = 9,
    kInputModeFieldNumber = 3,
    kDefaultPunctuationFieldNumber = 7,
  };
  // .khiin.proto.BoolValue ime_enabled = 1;
  bool has_ime_enabled() const;
  private:
  bool _internal_has_ime_enabled() const;
  public:
  void clear_ime_enabled();
  const ::khiin::proto::BoolValue& ime_enabled() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_ime_enabled();
  ::khiin::proto::BoolValue* mutable_ime_enabled();
  void set_allocated_ime_enabled(::khiin::proto::BoolValue* ime_enabled);
  private:
  const ::khiin::proto::BoolValue& _internal_ime_enabled() const;
  ::khiin::proto::BoolValue* _internal_mutable_ime_enabled();
  public:
  void unsafe_arena_set_allocated_ime_enabled(
      ::khiin::proto::BoolValue* ime_enabled);
  ::khiin::proto::BoolValue* unsafe_arena_release_ime_enabled();

  // .khiin.proto.KeyConfiguration key_config = 2;
  bool has_key_config() const;
  private:
  bool _internal_has_key_config() const;
  public:
  void clear_key_config();
  const ::khiin::proto::KeyConfiguration& key_config() const;
  PROTOBUF_NODISCARD ::khiin::proto::KeyConfiguration* release_key_config();
  ::khiin::proto::KeyConfiguration* mutable_key_config();
  void set_allocated_key_config(::khiin::proto::KeyConfiguration* key_config);
  private:
  const ::khiin::proto::KeyConfiguration& _internal_key_config() const;
  ::khiin::proto::KeyConfiguration* _internal_mutable_key_config();
  public:
  void unsafe_arena_set_allocated_key_config(
      ::khiin::proto::KeyConfiguration* key_config);
  ::khiin::proto::KeyConfiguration* unsafe_arena_release_key_config();

  // .khiin.proto.BoolValue telex_enabled = 4;
  bool has_telex_enabled() const;
  private:
  bool _internal_has_telex_enabled() const;
  public:
  void clear_telex_enabled();
  const ::khiin::proto::BoolValue& telex_enabled() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_telex_enabled();
  ::khiin::proto::BoolValue* mutable_telex_enabled();
  void set_allocated_telex_enabled(::khiin::proto::BoolValue* telex_enabled);
  private:
  const ::khiin::proto::BoolValue& _internal_telex_enabled() const;
  ::khiin::proto::BoolValue* _internal_mutable_telex_enabled();
  public:
  void unsafe_arena_set_allocated_telex_enabled(
      ::khiin::proto::BoolValue* telex_enabled);
  ::khiin::proto::BoolValue* unsafe_arena_release_telex_enabled();

  // .khiin.proto.BoolValue dotted_khin = 5;
  bool has_dotted_khin() const;
  private:
  bool _internal_has_dotted_khin() const;
  public:
  void clear_dotted_khin();
  const ::khiin::proto::BoolValue& dotted_khin() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_dotted_khin();
  ::khiin::proto::BoolValue* mutable_dotted_khin();
  void set_allocated_dotted_khin(::khiin::proto::BoolValue* dotted_khin);
  private:
  const ::khiin::proto::BoolValue& _internal_dotted_khin() const;
  ::khiin::proto::BoolValue* _internal_mutable_dotted_khin();
  public:
  void unsafe_arena_set_allocated_dotted_khin(
      ::khiin::proto::BoolValue* dotted_khin);
  ::khiin::proto::BoolValue* unsafe_arena_release_dotted_khin();

  // .khiin.proto.BoolValue autokhin = 6;
  bool has_autokhin() const;
  private:
  bool _internal_has_autokhin() const;
  public:
  void clear_autokhin();
  const ::khiin::proto::BoolValue& autokhin() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_autokhin();
  ::khiin::proto::BoolValue* mutable_autokhin();
  void set_allocated_autokhin(::khiin::proto::BoolValue* autokhin);
  private:
  const ::khiin::proto::BoolValue& _internal_autokhin() const;
  ::khiin::proto::BoolValue* _internal_mutable_autokhin();
  public:
  void unsafe_arena_set_allocated_autokhin(
      ::khiin::proto::BoolValue* autokhin);
  ::khiin::proto::BoolValue* unsafe_arena_release_autokhin();

  // .khiin.proto.BoolValue easy_ch = 8;
  bool has_easy_ch() const;
  private:
  bool _internal_has_easy_ch() const;
  public:
  void clear_easy_ch();
  const ::khiin::proto::BoolValue& easy_ch() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_easy_ch();
  ::khiin::proto::BoolValue* mutable_easy_ch();
  void set_allocated_easy_ch(::khiin::proto::BoolValue* easy_ch);
  private:
  const ::khiin::proto::BoolValue& _internal_easy_ch() const;
  ::khiin::proto::BoolValue* _internal_mutable_easy_ch();
  public:
  void unsafe_arena_set_allocated_easy_ch(
      ::khiin::proto::BoolValue* easy_ch);
  ::khiin::proto::BoolValue* unsafe_arena_release_easy_ch();

  // .khiin.proto.BoolValue uppercase_nasal = 9;
  bool has_uppercase_nasal() const;
  private:
  bool _internal_has_uppercase_nasal() const;
  public:
  void clear_uppercase_nasal();
  const ::khiin::proto::BoolValue& uppercase_nasal() const;
  PROTOBUF_NODISCARD ::khiin::proto::BoolValue* release_uppercase_nasal();
  ::khiin::proto::BoolValue* mutable_uppercase_nasal();
  void set_allocated_uppercase_nasal(::khiin::proto::BoolValue* uppercase_nasal);
  private:
  const ::khiin::proto::BoolValue& _internal_uppercase_nasal() const;
  ::khiin::proto::BoolValue* _internal_mutable_uppercase_nasal();
  public:
  void unsafe_arena_set_allocated_uppercase_nasal(
      ::khiin::proto::BoolValue* uppercase_nasal);
  ::khiin::proto::BoolValue* unsafe_arena_release_uppercase_nasal();

  // .khiin.proto.InputMode input_mode = 3;
  void clear_input_mode();
  ::khiin::proto::InputMode input_mode() const;
  void set_input_mode(::khiin::proto::InputMode value);
  private:
  ::khiin::proto::InputMode _internal_input_mode() const;
  void _internal_set_input_mode(::khiin::proto::InputMode value);
  public:

  // .khiin.proto.DefaultPunctuation default_punctuation = 7;
  void clear_default_punctuation();
  ::khiin::proto::DefaultPunctuation default_punctuation() const;
  void set_default_punctuation(::khiin::proto::DefaultPunctuation value);
  private:
  ::khiin::proto::DefaultPunctuation _internal_default_punctuation() const;
  void _internal_set_default_punctuation(::khiin::proto::DefaultPunctuation value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.proto.AppConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::khiin::proto::BoolValue* ime_enabled_;
    ::khiin::proto::KeyConfiguration* key_config_;
    ::khiin::proto::BoolValue* telex_enabled_;
    ::khiin::proto::BoolValue* dotted_khin_;
    ::khiin::proto::BoolValue* autokhin_;
    ::khiin::proto::BoolValue* easy_ch_;
    ::khiin::proto::BoolValue* uppercase_nasal_;
    int input_mode_;
    int default_punctuation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoolValue

// bool value = 1;
inline void BoolValue::clear_value() {
  _impl_.value_ = false;
}
inline bool BoolValue::_internal_value() const {
  return _impl_.value_;
}
inline bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:khiin.proto.BoolValue.value)
  return _internal_value();
}
inline void BoolValue::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void BoolValue::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:khiin.proto.BoolValue.value)
}

// -------------------------------------------------------------------

// KeyConfiguration

// string telex_t2 = 1;
inline void KeyConfiguration::clear_telex_t2() {
  _impl_.telex_t2_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t2() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t2)
  return _internal_telex_t2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t2)
}
inline std::string* KeyConfiguration::mutable_telex_t2() {
  std::string* _s = _internal_mutable_telex_t2();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t2)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t2() const {
  return _impl_.telex_t2_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t2(const std::string& value) {
  
  _impl_.telex_t2_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t2() {
  
  return _impl_.telex_t2_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t2() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t2)
  return _impl_.telex_t2_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t2(std::string* telex_t2) {
  if (telex_t2 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t2_.SetAllocated(telex_t2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t2_.IsDefault()) {
    _impl_.telex_t2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t2)
}

// string telex_t3 = 2;
inline void KeyConfiguration::clear_telex_t3() {
  _impl_.telex_t3_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t3() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t3)
  return _internal_telex_t3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t3)
}
inline std::string* KeyConfiguration::mutable_telex_t3() {
  std::string* _s = _internal_mutable_telex_t3();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t3)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t3() const {
  return _impl_.telex_t3_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t3(const std::string& value) {
  
  _impl_.telex_t3_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t3() {
  
  return _impl_.telex_t3_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t3() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t3)
  return _impl_.telex_t3_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t3(std::string* telex_t3) {
  if (telex_t3 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t3_.SetAllocated(telex_t3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t3_.IsDefault()) {
    _impl_.telex_t3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t3)
}

// string telex_t5 = 3;
inline void KeyConfiguration::clear_telex_t5() {
  _impl_.telex_t5_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t5() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t5)
  return _internal_telex_t5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t5)
}
inline std::string* KeyConfiguration::mutable_telex_t5() {
  std::string* _s = _internal_mutable_telex_t5();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t5)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t5() const {
  return _impl_.telex_t5_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t5(const std::string& value) {
  
  _impl_.telex_t5_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t5() {
  
  return _impl_.telex_t5_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t5() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t5)
  return _impl_.telex_t5_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t5(std::string* telex_t5) {
  if (telex_t5 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t5_.SetAllocated(telex_t5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t5_.IsDefault()) {
    _impl_.telex_t5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t5)
}

// string telex_t6 = 4;
inline void KeyConfiguration::clear_telex_t6() {
  _impl_.telex_t6_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t6() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t6)
  return _internal_telex_t6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t6(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t6)
}
inline std::string* KeyConfiguration::mutable_telex_t6() {
  std::string* _s = _internal_mutable_telex_t6();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t6)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t6() const {
  return _impl_.telex_t6_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t6(const std::string& value) {
  
  _impl_.telex_t6_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t6() {
  
  return _impl_.telex_t6_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t6() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t6)
  return _impl_.telex_t6_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t6(std::string* telex_t6) {
  if (telex_t6 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t6_.SetAllocated(telex_t6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t6_.IsDefault()) {
    _impl_.telex_t6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t6)
}

// string telex_t7 = 5;
inline void KeyConfiguration::clear_telex_t7() {
  _impl_.telex_t7_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t7() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t7)
  return _internal_telex_t7();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t7(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t7_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t7)
}
inline std::string* KeyConfiguration::mutable_telex_t7() {
  std::string* _s = _internal_mutable_telex_t7();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t7)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t7() const {
  return _impl_.telex_t7_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t7(const std::string& value) {
  
  _impl_.telex_t7_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t7() {
  
  return _impl_.telex_t7_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t7() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t7)
  return _impl_.telex_t7_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t7(std::string* telex_t7) {
  if (telex_t7 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t7_.SetAllocated(telex_t7, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t7_.IsDefault()) {
    _impl_.telex_t7_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t7)
}

// string telex_t8 = 6;
inline void KeyConfiguration::clear_telex_t8() {
  _impl_.telex_t8_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t8() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t8)
  return _internal_telex_t8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t8(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t8_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t8)
}
inline std::string* KeyConfiguration::mutable_telex_t8() {
  std::string* _s = _internal_mutable_telex_t8();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t8)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t8() const {
  return _impl_.telex_t8_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t8(const std::string& value) {
  
  _impl_.telex_t8_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t8() {
  
  return _impl_.telex_t8_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t8() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t8)
  return _impl_.telex_t8_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t8(std::string* telex_t8) {
  if (telex_t8 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t8_.SetAllocated(telex_t8, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t8_.IsDefault()) {
    _impl_.telex_t8_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t8)
}

// string telex_t9 = 7;
inline void KeyConfiguration::clear_telex_t9() {
  _impl_.telex_t9_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_t9() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_t9)
  return _internal_telex_t9();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_t9(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_t9_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_t9)
}
inline std::string* KeyConfiguration::mutable_telex_t9() {
  std::string* _s = _internal_mutable_telex_t9();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_t9)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_t9() const {
  return _impl_.telex_t9_.Get();
}
inline void KeyConfiguration::_internal_set_telex_t9(const std::string& value) {
  
  _impl_.telex_t9_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_t9() {
  
  return _impl_.telex_t9_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_t9() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_t9)
  return _impl_.telex_t9_.Release();
}
inline void KeyConfiguration::set_allocated_telex_t9(std::string* telex_t9) {
  if (telex_t9 != nullptr) {
    
  } else {
    
  }
  _impl_.telex_t9_.SetAllocated(telex_t9, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_t9_.IsDefault()) {
    _impl_.telex_t9_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_t9)
}

// string telex_khin = 8;
inline void KeyConfiguration::clear_telex_khin() {
  _impl_.telex_khin_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::telex_khin() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.telex_khin)
  return _internal_telex_khin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_telex_khin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telex_khin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.telex_khin)
}
inline std::string* KeyConfiguration::mutable_telex_khin() {
  std::string* _s = _internal_mutable_telex_khin();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.telex_khin)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_telex_khin() const {
  return _impl_.telex_khin_.Get();
}
inline void KeyConfiguration::_internal_set_telex_khin(const std::string& value) {
  
  _impl_.telex_khin_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_telex_khin() {
  
  return _impl_.telex_khin_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_telex_khin() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.telex_khin)
  return _impl_.telex_khin_.Release();
}
inline void KeyConfiguration::set_allocated_telex_khin(std::string* telex_khin) {
  if (telex_khin != nullptr) {
    
  } else {
    
  }
  _impl_.telex_khin_.SetAllocated(telex_khin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telex_khin_.IsDefault()) {
    _impl_.telex_khin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.telex_khin)
}

// string alt_hyphen = 9;
inline void KeyConfiguration::clear_alt_hyphen() {
  _impl_.alt_hyphen_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::alt_hyphen() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.alt_hyphen)
  return _internal_alt_hyphen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_alt_hyphen(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alt_hyphen_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.alt_hyphen)
}
inline std::string* KeyConfiguration::mutable_alt_hyphen() {
  std::string* _s = _internal_mutable_alt_hyphen();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.alt_hyphen)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_alt_hyphen() const {
  return _impl_.alt_hyphen_.Get();
}
inline void KeyConfiguration::_internal_set_alt_hyphen(const std::string& value) {
  
  _impl_.alt_hyphen_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_alt_hyphen() {
  
  return _impl_.alt_hyphen_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_alt_hyphen() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.alt_hyphen)
  return _impl_.alt_hyphen_.Release();
}
inline void KeyConfiguration::set_allocated_alt_hyphen(std::string* alt_hyphen) {
  if (alt_hyphen != nullptr) {
    
  } else {
    
  }
  _impl_.alt_hyphen_.SetAllocated(alt_hyphen, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alt_hyphen_.IsDefault()) {
    _impl_.alt_hyphen_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.alt_hyphen)
}

// string nasal = 10;
inline void KeyConfiguration::clear_nasal() {
  _impl_.nasal_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::nasal() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.nasal)
  return _internal_nasal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_nasal(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nasal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.nasal)
}
inline std::string* KeyConfiguration::mutable_nasal() {
  std::string* _s = _internal_mutable_nasal();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.nasal)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_nasal() const {
  return _impl_.nasal_.Get();
}
inline void KeyConfiguration::_internal_set_nasal(const std::string& value) {
  
  _impl_.nasal_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_nasal() {
  
  return _impl_.nasal_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_nasal() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.nasal)
  return _impl_.nasal_.Release();
}
inline void KeyConfiguration::set_allocated_nasal(std::string* nasal) {
  if (nasal != nullptr) {
    
  } else {
    
  }
  _impl_.nasal_.SetAllocated(nasal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nasal_.IsDefault()) {
    _impl_.nasal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.nasal)
}

// string dot_above_right = 11;
inline void KeyConfiguration::clear_dot_above_right() {
  _impl_.dot_above_right_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::dot_above_right() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.dot_above_right)
  return _internal_dot_above_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_dot_above_right(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dot_above_right_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.dot_above_right)
}
inline std::string* KeyConfiguration::mutable_dot_above_right() {
  std::string* _s = _internal_mutable_dot_above_right();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.dot_above_right)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_dot_above_right() const {
  return _impl_.dot_above_right_.Get();
}
inline void KeyConfiguration::_internal_set_dot_above_right(const std::string& value) {
  
  _impl_.dot_above_right_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_dot_above_right() {
  
  return _impl_.dot_above_right_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_dot_above_right() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.dot_above_right)
  return _impl_.dot_above_right_.Release();
}
inline void KeyConfiguration::set_allocated_dot_above_right(std::string* dot_above_right) {
  if (dot_above_right != nullptr) {
    
  } else {
    
  }
  _impl_.dot_above_right_.SetAllocated(dot_above_right, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dot_above_right_.IsDefault()) {
    _impl_.dot_above_right_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.dot_above_right)
}

// string dots_below = 12;
inline void KeyConfiguration::clear_dots_below() {
  _impl_.dots_below_.ClearToEmpty();
}
inline const std::string& KeyConfiguration::dots_below() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.dots_below)
  return _internal_dots_below();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyConfiguration::set_dots_below(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dots_below_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.proto.KeyConfiguration.dots_below)
}
inline std::string* KeyConfiguration::mutable_dots_below() {
  std::string* _s = _internal_mutable_dots_below();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.dots_below)
  return _s;
}
inline const std::string& KeyConfiguration::_internal_dots_below() const {
  return _impl_.dots_below_.Get();
}
inline void KeyConfiguration::_internal_set_dots_below(const std::string& value) {
  
  _impl_.dots_below_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyConfiguration::_internal_mutable_dots_below() {
  
  return _impl_.dots_below_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyConfiguration::release_dots_below() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.dots_below)
  return _impl_.dots_below_.Release();
}
inline void KeyConfiguration::set_allocated_dots_below(std::string* dots_below) {
  if (dots_below != nullptr) {
    
  } else {
    
  }
  _impl_.dots_below_.SetAllocated(dots_below, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dots_below_.IsDefault()) {
    _impl_.dots_below_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.dots_below)
}

// .khiin.proto.BoolValue enable_uppercase_nasal = 13;
inline bool KeyConfiguration::_internal_has_enable_uppercase_nasal() const {
  return this != internal_default_instance() && _impl_.enable_uppercase_nasal_ != nullptr;
}
inline bool KeyConfiguration::has_enable_uppercase_nasal() const {
  return _internal_has_enable_uppercase_nasal();
}
inline void KeyConfiguration::clear_enable_uppercase_nasal() {
  if (GetArenaForAllocation() == nullptr && _impl_.enable_uppercase_nasal_ != nullptr) {
    delete _impl_.enable_uppercase_nasal_;
  }
  _impl_.enable_uppercase_nasal_ = nullptr;
}
inline const ::khiin::proto::BoolValue& KeyConfiguration::_internal_enable_uppercase_nasal() const {
  const ::khiin::proto::BoolValue* p = _impl_.enable_uppercase_nasal_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& KeyConfiguration::enable_uppercase_nasal() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
  return _internal_enable_uppercase_nasal();
}
inline void KeyConfiguration::unsafe_arena_set_allocated_enable_uppercase_nasal(
    ::khiin::proto::BoolValue* enable_uppercase_nasal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enable_uppercase_nasal_);
  }
  _impl_.enable_uppercase_nasal_ = enable_uppercase_nasal;
  if (enable_uppercase_nasal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
}
inline ::khiin::proto::BoolValue* KeyConfiguration::release_enable_uppercase_nasal() {
  
  ::khiin::proto::BoolValue* temp = _impl_.enable_uppercase_nasal_;
  _impl_.enable_uppercase_nasal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::unsafe_arena_release_enable_uppercase_nasal() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
  
  ::khiin::proto::BoolValue* temp = _impl_.enable_uppercase_nasal_;
  _impl_.enable_uppercase_nasal_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::_internal_mutable_enable_uppercase_nasal() {
  
  if (_impl_.enable_uppercase_nasal_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.enable_uppercase_nasal_ = p;
  }
  return _impl_.enable_uppercase_nasal_;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::mutable_enable_uppercase_nasal() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_enable_uppercase_nasal();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
  return _msg;
}
inline void KeyConfiguration::set_allocated_enable_uppercase_nasal(::khiin::proto::BoolValue* enable_uppercase_nasal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enable_uppercase_nasal_;
  }
  if (enable_uppercase_nasal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enable_uppercase_nasal);
    if (message_arena != submessage_arena) {
      enable_uppercase_nasal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_uppercase_nasal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enable_uppercase_nasal_ = enable_uppercase_nasal;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.enable_uppercase_nasal)
}

// .khiin.proto.BoolValue use_digits_as_fallback = 14;
inline bool KeyConfiguration::_internal_has_use_digits_as_fallback() const {
  return this != internal_default_instance() && _impl_.use_digits_as_fallback_ != nullptr;
}
inline bool KeyConfiguration::has_use_digits_as_fallback() const {
  return _internal_has_use_digits_as_fallback();
}
inline void KeyConfiguration::clear_use_digits_as_fallback() {
  if (GetArenaForAllocation() == nullptr && _impl_.use_digits_as_fallback_ != nullptr) {
    delete _impl_.use_digits_as_fallback_;
  }
  _impl_.use_digits_as_fallback_ = nullptr;
}
inline const ::khiin::proto::BoolValue& KeyConfiguration::_internal_use_digits_as_fallback() const {
  const ::khiin::proto::BoolValue* p = _impl_.use_digits_as_fallback_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& KeyConfiguration::use_digits_as_fallback() const {
  // @@protoc_insertion_point(field_get:khiin.proto.KeyConfiguration.use_digits_as_fallback)
  return _internal_use_digits_as_fallback();
}
inline void KeyConfiguration::unsafe_arena_set_allocated_use_digits_as_fallback(
    ::khiin::proto::BoolValue* use_digits_as_fallback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_digits_as_fallback_);
  }
  _impl_.use_digits_as_fallback_ = use_digits_as_fallback;
  if (use_digits_as_fallback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.KeyConfiguration.use_digits_as_fallback)
}
inline ::khiin::proto::BoolValue* KeyConfiguration::release_use_digits_as_fallback() {
  
  ::khiin::proto::BoolValue* temp = _impl_.use_digits_as_fallback_;
  _impl_.use_digits_as_fallback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::unsafe_arena_release_use_digits_as_fallback() {
  // @@protoc_insertion_point(field_release:khiin.proto.KeyConfiguration.use_digits_as_fallback)
  
  ::khiin::proto::BoolValue* temp = _impl_.use_digits_as_fallback_;
  _impl_.use_digits_as_fallback_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::_internal_mutable_use_digits_as_fallback() {
  
  if (_impl_.use_digits_as_fallback_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.use_digits_as_fallback_ = p;
  }
  return _impl_.use_digits_as_fallback_;
}
inline ::khiin::proto::BoolValue* KeyConfiguration::mutable_use_digits_as_fallback() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_use_digits_as_fallback();
  // @@protoc_insertion_point(field_mutable:khiin.proto.KeyConfiguration.use_digits_as_fallback)
  return _msg;
}
inline void KeyConfiguration::set_allocated_use_digits_as_fallback(::khiin::proto::BoolValue* use_digits_as_fallback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.use_digits_as_fallback_;
  }
  if (use_digits_as_fallback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_digits_as_fallback);
    if (message_arena != submessage_arena) {
      use_digits_as_fallback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_digits_as_fallback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_digits_as_fallback_ = use_digits_as_fallback;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.KeyConfiguration.use_digits_as_fallback)
}

// -------------------------------------------------------------------

// AppConfig

// .khiin.proto.BoolValue ime_enabled = 1;
inline bool AppConfig::_internal_has_ime_enabled() const {
  return this != internal_default_instance() && _impl_.ime_enabled_ != nullptr;
}
inline bool AppConfig::has_ime_enabled() const {
  return _internal_has_ime_enabled();
}
inline void AppConfig::clear_ime_enabled() {
  if (GetArenaForAllocation() == nullptr && _impl_.ime_enabled_ != nullptr) {
    delete _impl_.ime_enabled_;
  }
  _impl_.ime_enabled_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_ime_enabled() const {
  const ::khiin::proto::BoolValue* p = _impl_.ime_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::ime_enabled() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.ime_enabled)
  return _internal_ime_enabled();
}
inline void AppConfig::unsafe_arena_set_allocated_ime_enabled(
    ::khiin::proto::BoolValue* ime_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ime_enabled_);
  }
  _impl_.ime_enabled_ = ime_enabled;
  if (ime_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.ime_enabled)
}
inline ::khiin::proto::BoolValue* AppConfig::release_ime_enabled() {
  
  ::khiin::proto::BoolValue* temp = _impl_.ime_enabled_;
  _impl_.ime_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_ime_enabled() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.ime_enabled)
  
  ::khiin::proto::BoolValue* temp = _impl_.ime_enabled_;
  _impl_.ime_enabled_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_ime_enabled() {
  
  if (_impl_.ime_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.ime_enabled_ = p;
  }
  return _impl_.ime_enabled_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_ime_enabled() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_ime_enabled();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.ime_enabled)
  return _msg;
}
inline void AppConfig::set_allocated_ime_enabled(::khiin::proto::BoolValue* ime_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ime_enabled_;
  }
  if (ime_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ime_enabled);
    if (message_arena != submessage_arena) {
      ime_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ime_enabled, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ime_enabled_ = ime_enabled;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.ime_enabled)
}

// .khiin.proto.KeyConfiguration key_config = 2;
inline bool AppConfig::_internal_has_key_config() const {
  return this != internal_default_instance() && _impl_.key_config_ != nullptr;
}
inline bool AppConfig::has_key_config() const {
  return _internal_has_key_config();
}
inline void AppConfig::clear_key_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_config_ != nullptr) {
    delete _impl_.key_config_;
  }
  _impl_.key_config_ = nullptr;
}
inline const ::khiin::proto::KeyConfiguration& AppConfig::_internal_key_config() const {
  const ::khiin::proto::KeyConfiguration* p = _impl_.key_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::KeyConfiguration&>(
      ::khiin::proto::_KeyConfiguration_default_instance_);
}
inline const ::khiin::proto::KeyConfiguration& AppConfig::key_config() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.key_config)
  return _internal_key_config();
}
inline void AppConfig::unsafe_arena_set_allocated_key_config(
    ::khiin::proto::KeyConfiguration* key_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_config_);
  }
  _impl_.key_config_ = key_config;
  if (key_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.key_config)
}
inline ::khiin::proto::KeyConfiguration* AppConfig::release_key_config() {
  
  ::khiin::proto::KeyConfiguration* temp = _impl_.key_config_;
  _impl_.key_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::unsafe_arena_release_key_config() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.key_config)
  
  ::khiin::proto::KeyConfiguration* temp = _impl_.key_config_;
  _impl_.key_config_ = nullptr;
  return temp;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::_internal_mutable_key_config() {
  
  if (_impl_.key_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::KeyConfiguration>(GetArenaForAllocation());
    _impl_.key_config_ = p;
  }
  return _impl_.key_config_;
}
inline ::khiin::proto::KeyConfiguration* AppConfig::mutable_key_config() {
  ::khiin::proto::KeyConfiguration* _msg = _internal_mutable_key_config();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.key_config)
  return _msg;
}
inline void AppConfig::set_allocated_key_config(::khiin::proto::KeyConfiguration* key_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_config_;
  }
  if (key_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key_config);
    if (message_arena != submessage_arena) {
      key_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_config_ = key_config;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.key_config)
}

// .khiin.proto.InputMode input_mode = 3;
inline void AppConfig::clear_input_mode() {
  _impl_.input_mode_ = 0;
}
inline ::khiin::proto::InputMode AppConfig::_internal_input_mode() const {
  return static_cast< ::khiin::proto::InputMode >(_impl_.input_mode_);
}
inline ::khiin::proto::InputMode AppConfig::input_mode() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.input_mode)
  return _internal_input_mode();
}
inline void AppConfig::_internal_set_input_mode(::khiin::proto::InputMode value) {
  
  _impl_.input_mode_ = value;
}
inline void AppConfig::set_input_mode(::khiin::proto::InputMode value) {
  _internal_set_input_mode(value);
  // @@protoc_insertion_point(field_set:khiin.proto.AppConfig.input_mode)
}

// .khiin.proto.BoolValue telex_enabled = 4;
inline bool AppConfig::_internal_has_telex_enabled() const {
  return this != internal_default_instance() && _impl_.telex_enabled_ != nullptr;
}
inline bool AppConfig::has_telex_enabled() const {
  return _internal_has_telex_enabled();
}
inline void AppConfig::clear_telex_enabled() {
  if (GetArenaForAllocation() == nullptr && _impl_.telex_enabled_ != nullptr) {
    delete _impl_.telex_enabled_;
  }
  _impl_.telex_enabled_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_telex_enabled() const {
  const ::khiin::proto::BoolValue* p = _impl_.telex_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::telex_enabled() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.telex_enabled)
  return _internal_telex_enabled();
}
inline void AppConfig::unsafe_arena_set_allocated_telex_enabled(
    ::khiin::proto::BoolValue* telex_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telex_enabled_);
  }
  _impl_.telex_enabled_ = telex_enabled;
  if (telex_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.telex_enabled)
}
inline ::khiin::proto::BoolValue* AppConfig::release_telex_enabled() {
  
  ::khiin::proto::BoolValue* temp = _impl_.telex_enabled_;
  _impl_.telex_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_telex_enabled() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.telex_enabled)
  
  ::khiin::proto::BoolValue* temp = _impl_.telex_enabled_;
  _impl_.telex_enabled_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_telex_enabled() {
  
  if (_impl_.telex_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.telex_enabled_ = p;
  }
  return _impl_.telex_enabled_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_telex_enabled() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_telex_enabled();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.telex_enabled)
  return _msg;
}
inline void AppConfig::set_allocated_telex_enabled(::khiin::proto::BoolValue* telex_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.telex_enabled_;
  }
  if (telex_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telex_enabled);
    if (message_arena != submessage_arena) {
      telex_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telex_enabled, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.telex_enabled_ = telex_enabled;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.telex_enabled)
}

// .khiin.proto.BoolValue dotted_khin = 5;
inline bool AppConfig::_internal_has_dotted_khin() const {
  return this != internal_default_instance() && _impl_.dotted_khin_ != nullptr;
}
inline bool AppConfig::has_dotted_khin() const {
  return _internal_has_dotted_khin();
}
inline void AppConfig::clear_dotted_khin() {
  if (GetArenaForAllocation() == nullptr && _impl_.dotted_khin_ != nullptr) {
    delete _impl_.dotted_khin_;
  }
  _impl_.dotted_khin_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_dotted_khin() const {
  const ::khiin::proto::BoolValue* p = _impl_.dotted_khin_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::dotted_khin() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.dotted_khin)
  return _internal_dotted_khin();
}
inline void AppConfig::unsafe_arena_set_allocated_dotted_khin(
    ::khiin::proto::BoolValue* dotted_khin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dotted_khin_);
  }
  _impl_.dotted_khin_ = dotted_khin;
  if (dotted_khin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.dotted_khin)
}
inline ::khiin::proto::BoolValue* AppConfig::release_dotted_khin() {
  
  ::khiin::proto::BoolValue* temp = _impl_.dotted_khin_;
  _impl_.dotted_khin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_dotted_khin() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.dotted_khin)
  
  ::khiin::proto::BoolValue* temp = _impl_.dotted_khin_;
  _impl_.dotted_khin_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_dotted_khin() {
  
  if (_impl_.dotted_khin_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.dotted_khin_ = p;
  }
  return _impl_.dotted_khin_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_dotted_khin() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_dotted_khin();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.dotted_khin)
  return _msg;
}
inline void AppConfig::set_allocated_dotted_khin(::khiin::proto::BoolValue* dotted_khin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dotted_khin_;
  }
  if (dotted_khin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dotted_khin);
    if (message_arena != submessage_arena) {
      dotted_khin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dotted_khin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dotted_khin_ = dotted_khin;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.dotted_khin)
}

// .khiin.proto.BoolValue autokhin = 6;
inline bool AppConfig::_internal_has_autokhin() const {
  return this != internal_default_instance() && _impl_.autokhin_ != nullptr;
}
inline bool AppConfig::has_autokhin() const {
  return _internal_has_autokhin();
}
inline void AppConfig::clear_autokhin() {
  if (GetArenaForAllocation() == nullptr && _impl_.autokhin_ != nullptr) {
    delete _impl_.autokhin_;
  }
  _impl_.autokhin_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_autokhin() const {
  const ::khiin::proto::BoolValue* p = _impl_.autokhin_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::autokhin() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.autokhin)
  return _internal_autokhin();
}
inline void AppConfig::unsafe_arena_set_allocated_autokhin(
    ::khiin::proto::BoolValue* autokhin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autokhin_);
  }
  _impl_.autokhin_ = autokhin;
  if (autokhin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.autokhin)
}
inline ::khiin::proto::BoolValue* AppConfig::release_autokhin() {
  
  ::khiin::proto::BoolValue* temp = _impl_.autokhin_;
  _impl_.autokhin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_autokhin() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.autokhin)
  
  ::khiin::proto::BoolValue* temp = _impl_.autokhin_;
  _impl_.autokhin_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_autokhin() {
  
  if (_impl_.autokhin_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.autokhin_ = p;
  }
  return _impl_.autokhin_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_autokhin() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_autokhin();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.autokhin)
  return _msg;
}
inline void AppConfig::set_allocated_autokhin(::khiin::proto::BoolValue* autokhin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.autokhin_;
  }
  if (autokhin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(autokhin);
    if (message_arena != submessage_arena) {
      autokhin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autokhin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autokhin_ = autokhin;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.autokhin)
}

// .khiin.proto.DefaultPunctuation default_punctuation = 7;
inline void AppConfig::clear_default_punctuation() {
  _impl_.default_punctuation_ = 0;
}
inline ::khiin::proto::DefaultPunctuation AppConfig::_internal_default_punctuation() const {
  return static_cast< ::khiin::proto::DefaultPunctuation >(_impl_.default_punctuation_);
}
inline ::khiin::proto::DefaultPunctuation AppConfig::default_punctuation() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.default_punctuation)
  return _internal_default_punctuation();
}
inline void AppConfig::_internal_set_default_punctuation(::khiin::proto::DefaultPunctuation value) {
  
  _impl_.default_punctuation_ = value;
}
inline void AppConfig::set_default_punctuation(::khiin::proto::DefaultPunctuation value) {
  _internal_set_default_punctuation(value);
  // @@protoc_insertion_point(field_set:khiin.proto.AppConfig.default_punctuation)
}

// .khiin.proto.BoolValue easy_ch = 8;
inline bool AppConfig::_internal_has_easy_ch() const {
  return this != internal_default_instance() && _impl_.easy_ch_ != nullptr;
}
inline bool AppConfig::has_easy_ch() const {
  return _internal_has_easy_ch();
}
inline void AppConfig::clear_easy_ch() {
  if (GetArenaForAllocation() == nullptr && _impl_.easy_ch_ != nullptr) {
    delete _impl_.easy_ch_;
  }
  _impl_.easy_ch_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_easy_ch() const {
  const ::khiin::proto::BoolValue* p = _impl_.easy_ch_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::easy_ch() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.easy_ch)
  return _internal_easy_ch();
}
inline void AppConfig::unsafe_arena_set_allocated_easy_ch(
    ::khiin::proto::BoolValue* easy_ch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.easy_ch_);
  }
  _impl_.easy_ch_ = easy_ch;
  if (easy_ch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.easy_ch)
}
inline ::khiin::proto::BoolValue* AppConfig::release_easy_ch() {
  
  ::khiin::proto::BoolValue* temp = _impl_.easy_ch_;
  _impl_.easy_ch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_easy_ch() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.easy_ch)
  
  ::khiin::proto::BoolValue* temp = _impl_.easy_ch_;
  _impl_.easy_ch_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_easy_ch() {
  
  if (_impl_.easy_ch_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.easy_ch_ = p;
  }
  return _impl_.easy_ch_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_easy_ch() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_easy_ch();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.easy_ch)
  return _msg;
}
inline void AppConfig::set_allocated_easy_ch(::khiin::proto::BoolValue* easy_ch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.easy_ch_;
  }
  if (easy_ch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(easy_ch);
    if (message_arena != submessage_arena) {
      easy_ch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, easy_ch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.easy_ch_ = easy_ch;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.easy_ch)
}

// .khiin.proto.BoolValue uppercase_nasal = 9;
inline bool AppConfig::_internal_has_uppercase_nasal() const {
  return this != internal_default_instance() && _impl_.uppercase_nasal_ != nullptr;
}
inline bool AppConfig::has_uppercase_nasal() const {
  return _internal_has_uppercase_nasal();
}
inline void AppConfig::clear_uppercase_nasal() {
  if (GetArenaForAllocation() == nullptr && _impl_.uppercase_nasal_ != nullptr) {
    delete _impl_.uppercase_nasal_;
  }
  _impl_.uppercase_nasal_ = nullptr;
}
inline const ::khiin::proto::BoolValue& AppConfig::_internal_uppercase_nasal() const {
  const ::khiin::proto::BoolValue* p = _impl_.uppercase_nasal_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::proto::BoolValue&>(
      ::khiin::proto::_BoolValue_default_instance_);
}
inline const ::khiin::proto::BoolValue& AppConfig::uppercase_nasal() const {
  // @@protoc_insertion_point(field_get:khiin.proto.AppConfig.uppercase_nasal)
  return _internal_uppercase_nasal();
}
inline void AppConfig::unsafe_arena_set_allocated_uppercase_nasal(
    ::khiin::proto::BoolValue* uppercase_nasal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uppercase_nasal_);
  }
  _impl_.uppercase_nasal_ = uppercase_nasal;
  if (uppercase_nasal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.proto.AppConfig.uppercase_nasal)
}
inline ::khiin::proto::BoolValue* AppConfig::release_uppercase_nasal() {
  
  ::khiin::proto::BoolValue* temp = _impl_.uppercase_nasal_;
  _impl_.uppercase_nasal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::unsafe_arena_release_uppercase_nasal() {
  // @@protoc_insertion_point(field_release:khiin.proto.AppConfig.uppercase_nasal)
  
  ::khiin::proto::BoolValue* temp = _impl_.uppercase_nasal_;
  _impl_.uppercase_nasal_ = nullptr;
  return temp;
}
inline ::khiin::proto::BoolValue* AppConfig::_internal_mutable_uppercase_nasal() {
  
  if (_impl_.uppercase_nasal_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::proto::BoolValue>(GetArenaForAllocation());
    _impl_.uppercase_nasal_ = p;
  }
  return _impl_.uppercase_nasal_;
}
inline ::khiin::proto::BoolValue* AppConfig::mutable_uppercase_nasal() {
  ::khiin::proto::BoolValue* _msg = _internal_mutable_uppercase_nasal();
  // @@protoc_insertion_point(field_mutable:khiin.proto.AppConfig.uppercase_nasal)
  return _msg;
}
inline void AppConfig::set_allocated_uppercase_nasal(::khiin::proto::BoolValue* uppercase_nasal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uppercase_nasal_;
  }
  if (uppercase_nasal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uppercase_nasal);
    if (message_arena != submessage_arena) {
      uppercase_nasal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uppercase_nasal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uppercase_nasal_ = uppercase_nasal;
  // @@protoc_insertion_point(field_set_allocated:khiin.proto.AppConfig.uppercase_nasal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace khiin

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::khiin::proto::InputMode> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::proto::DefaultPunctuation> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fconfig_2eproto
