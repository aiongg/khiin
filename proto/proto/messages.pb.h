// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace khiin {
namespace messages {
class Candidate;
struct CandidateDefaultTypeInternal;
extern CandidateDefaultTypeInternal _Candidate_default_instance_;
class CandidateList;
struct CandidateListDefaultTypeInternal;
extern CandidateListDefaultTypeInternal _CandidateList_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Composition;
struct CompositionDefaultTypeInternal;
extern CompositionDefaultTypeInternal _Composition_default_instance_;
class Composition_Segment;
struct Composition_SegmentDefaultTypeInternal;
extern Composition_SegmentDefaultTypeInternal _Composition_Segment_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class KeyEvent;
struct KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
}  // namespace messages
}  // namespace khiin
PROTOBUF_NAMESPACE_OPEN
template<> ::khiin::messages::Candidate* Arena::CreateMaybeMessage<::khiin::messages::Candidate>(Arena*);
template<> ::khiin::messages::CandidateList* Arena::CreateMaybeMessage<::khiin::messages::CandidateList>(Arena*);
template<> ::khiin::messages::Command* Arena::CreateMaybeMessage<::khiin::messages::Command>(Arena*);
template<> ::khiin::messages::Composition* Arena::CreateMaybeMessage<::khiin::messages::Composition>(Arena*);
template<> ::khiin::messages::Composition_Segment* Arena::CreateMaybeMessage<::khiin::messages::Composition_Segment>(Arena*);
template<> ::khiin::messages::Input* Arena::CreateMaybeMessage<::khiin::messages::Input>(Arena*);
template<> ::khiin::messages::KeyEvent* Arena::CreateMaybeMessage<::khiin::messages::KeyEvent>(Arena*);
template<> ::khiin::messages::Output* Arena::CreateMaybeMessage<::khiin::messages::Output>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace khiin {
namespace messages {

enum Candidate_Category : int {
  Candidate_Category_NORMAL = 0,
  Candidate_Category_KANA = 1,
  Candidate_Category_RARE = 2,
  Candidate_Category_Candidate_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Candidate_Category_Candidate_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Candidate_Category_IsValid(int value);
constexpr Candidate_Category Candidate_Category_Category_MIN = Candidate_Category_NORMAL;
constexpr Candidate_Category Candidate_Category_Category_MAX = Candidate_Category_RARE;
constexpr int Candidate_Category_Category_ARRAYSIZE = Candidate_Category_Category_MAX + 1;

const std::string& Candidate_Category_Name(Candidate_Category value);
template<typename T>
inline const std::string& Candidate_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Candidate_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Candidate_Category_Name.");
  return Candidate_Category_Name(static_cast<Candidate_Category>(enum_t_value));
}
bool Candidate_Category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Candidate_Category* value);
enum SpecialKey : int {
  SK_NONE = 0,
  SK_SPACE = 1,
  SK_ENTER = 2,
  SK_ESC = 3,
  SK_BACKSPACE = 4,
  SK_TAB = 5,
  SK_LEFT = 6,
  SK_UP = 7,
  SK_RIGHT = 8,
  SK_DOWN = 9,
  SK_PGUP = 10,
  SK_PGDN = 11,
  SK_HOME = 12,
  SK_END = 13,
  SK_DEL = 14,
  SpecialKey_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpecialKey_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpecialKey_IsValid(int value);
constexpr SpecialKey SpecialKey_MIN = SK_NONE;
constexpr SpecialKey SpecialKey_MAX = SK_DEL;
constexpr int SpecialKey_ARRAYSIZE = SpecialKey_MAX + 1;

const std::string& SpecialKey_Name(SpecialKey value);
template<typename T>
inline const std::string& SpecialKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpecialKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpecialKey_Name.");
  return SpecialKey_Name(static_cast<SpecialKey>(enum_t_value));
}
bool SpecialKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpecialKey* value);
enum ModifierKey : int {
  CTRL = 0,
  ALT = 1,
  SHIFT = 2,
  ModifierKey_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModifierKey_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModifierKey_IsValid(int value);
constexpr ModifierKey ModifierKey_MIN = CTRL;
constexpr ModifierKey ModifierKey_MAX = SHIFT;
constexpr int ModifierKey_ARRAYSIZE = ModifierKey_MAX + 1;

const std::string& ModifierKey_Name(ModifierKey value);
template<typename T>
inline const std::string& ModifierKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModifierKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModifierKey_Name.");
  return ModifierKey_Name(static_cast<ModifierKey>(enum_t_value));
}
bool ModifierKey_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModifierKey* value);
enum SegmentStatus : int {
  UNMARKED = 0,
  COMPOSING = 1,
  CONVERTED = 2,
  FOCUSED = 3,
  SegmentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SegmentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SegmentStatus_IsValid(int value);
constexpr SegmentStatus SegmentStatus_MIN = UNMARKED;
constexpr SegmentStatus SegmentStatus_MAX = FOCUSED;
constexpr int SegmentStatus_ARRAYSIZE = SegmentStatus_MAX + 1;

const std::string& SegmentStatus_Name(SegmentStatus value);
template<typename T>
inline const std::string& SegmentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentStatus_Name.");
  return SegmentStatus_Name(static_cast<SegmentStatus>(enum_t_value));
}
bool SegmentStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentStatus* value);
enum ErrorCode : int {
  OK = 0,
  FAIL = 1,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = OK;
constexpr ErrorCode ErrorCode_MAX = FAIL;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const std::string& ErrorCode_Name(ErrorCode value);
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ErrorCode_Name(static_cast<ErrorCode>(enum_t_value));
}
bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value);
enum CommandType : int {
  SEND_KEY = 0,
  REVERT = 1,
  RESET = 2,
  COMMIT = 3,
  SELECT_CANDIDATE = 4,
  FOCUS_CANDIDATE = 5,
  SWITCH_INPUT_MODE = 6,
  PLACE_CURSOR = 7,
  DISABLE = 8,
  ENABLE = 9,
  SET_CONFIG = 10,
  TEST_SEND_KEY = 11,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = SEND_KEY;
constexpr CommandType CommandType_MAX = TEST_SEND_KEY;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const std::string& CommandType_Name(CommandType value);
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return CommandType_Name(static_cast<CommandType>(enum_t_value));
}
bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value);
// ===================================================================

class KeyEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.KeyEvent) */ {
 public:
  inline KeyEvent() : KeyEvent(nullptr) {}
  ~KeyEvent() override;
  explicit constexpr KeyEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyEvent(const KeyEvent& from);
  KeyEvent(KeyEvent&& from) noexcept
    : KeyEvent() {
    *this = ::std::move(from);
  }

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyEvent& operator=(KeyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const KeyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyEvent& a, KeyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyEvent* New() const final {
    return new KeyEvent();
  }

  KeyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KeyEvent& from);
  void MergeFrom(const KeyEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.KeyEvent";
  }
  protected:
  explicit KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifierKeysFieldNumber = 3,
    kKeyCodeFieldNumber = 1,
    kSpecialKeyFieldNumber = 2,
  };
  // repeated .khiin.messages.ModifierKey modifier_keys = 3;
  int modifier_keys_size() const;
  private:
  int _internal_modifier_keys_size() const;
  public:
  void clear_modifier_keys();
  private:
  ::khiin::messages::ModifierKey _internal_modifier_keys(int index) const;
  void _internal_add_modifier_keys(::khiin::messages::ModifierKey value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_modifier_keys();
  public:
  ::khiin::messages::ModifierKey modifier_keys(int index) const;
  void set_modifier_keys(int index, ::khiin::messages::ModifierKey value);
  void add_modifier_keys(::khiin::messages::ModifierKey value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& modifier_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_modifier_keys();

  // int32 key_code = 1;
  void clear_key_code();
  ::PROTOBUF_NAMESPACE_ID::int32 key_code() const;
  void set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_code() const;
  void _internal_set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .khiin.messages.SpecialKey special_key = 2;
  void clear_special_key();
  ::khiin::messages::SpecialKey special_key() const;
  void set_special_key(::khiin::messages::SpecialKey value);
  private:
  ::khiin::messages::SpecialKey _internal_special_key() const;
  void _internal_set_special_key(::khiin::messages::SpecialKey value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.KeyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> modifier_keys_;
  mutable std::atomic<int> _modifier_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_code_;
  int special_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit constexpr Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return new Input();
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyEventFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kCursorPositionFieldNumber = 3,
  };
  // .khiin.messages.KeyEvent key_event = 1;
  bool has_key_event() const;
  private:
  bool _internal_has_key_event() const;
  public:
  void clear_key_event();
  const ::khiin::messages::KeyEvent& key_event() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::messages::KeyEvent* release_key_event();
  ::khiin::messages::KeyEvent* mutable_key_event();
  void set_allocated_key_event(::khiin::messages::KeyEvent* key_event);
  private:
  const ::khiin::messages::KeyEvent& _internal_key_event() const;
  ::khiin::messages::KeyEvent* _internal_mutable_key_event();
  public:
  void unsafe_arena_set_allocated_key_event(
      ::khiin::messages::KeyEvent* key_event);
  ::khiin::messages::KeyEvent* unsafe_arena_release_key_event();

  // int32 candidate_id = 2;
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cursor_position = 3;
  void clear_cursor_position();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position() const;
  void set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor_position() const;
  void _internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::messages::KeyEvent* key_event_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Composition_Segment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Composition.Segment) */ {
 public:
  inline Composition_Segment() : Composition_Segment(nullptr) {}
  ~Composition_Segment() override;
  explicit constexpr Composition_Segment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Composition_Segment(const Composition_Segment& from);
  Composition_Segment(Composition_Segment&& from) noexcept
    : Composition_Segment() {
    *this = ::std::move(from);
  }

  inline Composition_Segment& operator=(const Composition_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Composition_Segment& operator=(Composition_Segment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Composition_Segment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Composition_Segment* internal_default_instance() {
    return reinterpret_cast<const Composition_Segment*>(
               &_Composition_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Composition_Segment& a, Composition_Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Composition_Segment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Composition_Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Composition_Segment* New() const final {
    return new Composition_Segment();
  }

  Composition_Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Composition_Segment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Composition_Segment& from);
  void MergeFrom(const Composition_Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Composition_Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Composition.Segment";
  }
  protected:
  explicit Composition_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .khiin.messages.SegmentStatus status = 1;
  void clear_status();
  ::khiin::messages::SegmentStatus status() const;
  void set_status(::khiin::messages::SegmentStatus value);
  private:
  ::khiin::messages::SegmentStatus _internal_status() const;
  void _internal_set_status(::khiin::messages::SegmentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Composition.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Composition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Composition) */ {
 public:
  inline Composition() : Composition(nullptr) {}
  ~Composition() override;
  explicit constexpr Composition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Composition(const Composition& from);
  Composition(Composition&& from) noexcept
    : Composition() {
    *this = ::std::move(from);
  }

  inline Composition& operator=(const Composition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Composition& operator=(Composition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Composition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Composition* internal_default_instance() {
    return reinterpret_cast<const Composition*>(
               &_Composition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Composition& a, Composition& b) {
    a.Swap(&b);
  }
  inline void Swap(Composition* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Composition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Composition* New() const final {
    return new Composition();
  }

  Composition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Composition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Composition& from);
  void MergeFrom(const Composition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Composition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Composition";
  }
  protected:
  explicit Composition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Composition_Segment Segment;

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
    kCursorPositionFieldNumber = 2,
  };
  // repeated .khiin.messages.Composition.Segment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::khiin::messages::Composition_Segment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Composition_Segment >*
      mutable_segments();
  private:
  const ::khiin::messages::Composition_Segment& _internal_segments(int index) const;
  ::khiin::messages::Composition_Segment* _internal_add_segments();
  public:
  const ::khiin::messages::Composition_Segment& segments(int index) const;
  ::khiin::messages::Composition_Segment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Composition_Segment >&
      segments() const;

  // int32 cursor_position = 2;
  void clear_cursor_position();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position() const;
  void set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor_position() const;
  void _internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Composition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Composition_Segment > segments_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Candidate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Candidate) */ {
 public:
  inline Candidate() : Candidate(nullptr) {}
  ~Candidate() override;
  explicit constexpr Candidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Candidate(const Candidate& from);
  Candidate(Candidate&& from) noexcept
    : Candidate() {
    *this = ::std::move(from);
  }

  inline Candidate& operator=(const Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candidate& operator=(Candidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Candidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Candidate* internal_default_instance() {
    return reinterpret_cast<const Candidate*>(
               &_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Candidate& a, Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(Candidate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candidate* New() const final {
    return new Candidate();
  }

  Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candidate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Candidate& from);
  void MergeFrom(const Candidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Candidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Candidate";
  }
  protected:
  explicit Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Candidate_Category Category;
  static constexpr Category NORMAL =
    Candidate_Category_NORMAL;
  static constexpr Category KANA =
    Candidate_Category_KANA;
  static constexpr Category RARE =
    Candidate_Category_RARE;
  static inline bool Category_IsValid(int value) {
    return Candidate_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    Candidate_Category_Category_MIN;
  static constexpr Category Category_MAX =
    Candidate_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    Candidate_Category_Category_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return Candidate_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Category* value) {
    return Candidate_Category_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 3,
    kAnnotationFieldNumber = 4,
    kIdFieldNumber = 1,
    kCategoryFieldNumber = 5,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string annotation = 4;
  void clear_annotation();
  const std::string& annotation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation();
  PROTOBUF_MUST_USE_RESULT std::string* release_annotation();
  void set_allocated_annotation(std::string* annotation);
  private:
  const std::string& _internal_annotation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation(const std::string& value);
  std::string* _internal_mutable_annotation();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .khiin.messages.Candidate.Category category = 5;
  void clear_category();
  ::khiin::messages::Candidate_Category category() const;
  void set_category(::khiin::messages::Candidate_Category value);
  private:
  ::khiin::messages::Candidate_Category _internal_category() const;
  void _internal_set_category(::khiin::messages::Candidate_Category value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Candidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CandidateList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.CandidateList) */ {
 public:
  inline CandidateList() : CandidateList(nullptr) {}
  ~CandidateList() override;
  explicit constexpr CandidateList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidateList(const CandidateList& from);
  CandidateList(CandidateList&& from) noexcept
    : CandidateList() {
    *this = ::std::move(from);
  }

  inline CandidateList& operator=(const CandidateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateList& operator=(CandidateList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CandidateList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidateList* internal_default_instance() {
    return reinterpret_cast<const CandidateList*>(
               &_CandidateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CandidateList& a, CandidateList& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateList* New() const final {
    return new CandidateList();
  }

  CandidateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CandidateList& from);
  void MergeFrom(const CandidateList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CandidateList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.CandidateList";
  }
  protected:
  explicit CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 1,
    kFocusedFieldNumber = 2,
  };
  // repeated .khiin.messages.Candidate candidates = 1;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::khiin::messages::Candidate* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Candidate >*
      mutable_candidates();
  private:
  const ::khiin::messages::Candidate& _internal_candidates(int index) const;
  ::khiin::messages::Candidate* _internal_add_candidates();
  public:
  const ::khiin::messages::Candidate& candidates(int index) const;
  ::khiin::messages::Candidate* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Candidate >&
      candidates() const;

  // int32 focused = 2;
  void clear_focused();
  ::PROTOBUF_NAMESPACE_ID::int32 focused() const;
  void set_focused(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focused() const;
  void _internal_set_focused(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.CandidateList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Candidate > candidates_;
  ::PROTOBUF_NAMESPACE_ID::int32 focused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  explicit constexpr Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Output* New() const final {
    return new Output();
  }

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompositionFieldNumber = 2,
    kCandidateListFieldNumber = 3,
    kErrorFieldNumber = 1,
    kConsumableFieldNumber = 4,
  };
  // .khiin.messages.Composition composition = 2;
  bool has_composition() const;
  private:
  bool _internal_has_composition() const;
  public:
  void clear_composition();
  const ::khiin::messages::Composition& composition() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::messages::Composition* release_composition();
  ::khiin::messages::Composition* mutable_composition();
  void set_allocated_composition(::khiin::messages::Composition* composition);
  private:
  const ::khiin::messages::Composition& _internal_composition() const;
  ::khiin::messages::Composition* _internal_mutable_composition();
  public:
  void unsafe_arena_set_allocated_composition(
      ::khiin::messages::Composition* composition);
  ::khiin::messages::Composition* unsafe_arena_release_composition();

  // .khiin.messages.CandidateList candidate_list = 3;
  bool has_candidate_list() const;
  private:
  bool _internal_has_candidate_list() const;
  public:
  void clear_candidate_list();
  const ::khiin::messages::CandidateList& candidate_list() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::messages::CandidateList* release_candidate_list();
  ::khiin::messages::CandidateList* mutable_candidate_list();
  void set_allocated_candidate_list(::khiin::messages::CandidateList* candidate_list);
  private:
  const ::khiin::messages::CandidateList& _internal_candidate_list() const;
  ::khiin::messages::CandidateList* _internal_mutable_candidate_list();
  public:
  void unsafe_arena_set_allocated_candidate_list(
      ::khiin::messages::CandidateList* candidate_list);
  ::khiin::messages::CandidateList* unsafe_arena_release_candidate_list();

  // .khiin.messages.ErrorCode error = 1;
  void clear_error();
  ::khiin::messages::ErrorCode error() const;
  void set_error(::khiin::messages::ErrorCode value);
  private:
  ::khiin::messages::ErrorCode _internal_error() const;
  void _internal_set_error(::khiin::messages::ErrorCode value);
  public:

  // bool consumable = 4;
  void clear_consumable();
  bool consumable() const;
  void set_consumable(bool value);
  private:
  bool _internal_consumable() const;
  void _internal_set_consumable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::messages::Composition* composition_;
  ::khiin::messages::CandidateList* candidate_list_;
  int error_;
  bool consumable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:khiin.messages.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return new Command();
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "khiin.messages.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kOutputFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .khiin.messages.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::khiin::messages::Input& input() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::messages::Input* release_input();
  ::khiin::messages::Input* mutable_input();
  void set_allocated_input(::khiin::messages::Input* input);
  private:
  const ::khiin::messages::Input& _internal_input() const;
  ::khiin::messages::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::khiin::messages::Input* input);
  ::khiin::messages::Input* unsafe_arena_release_input();

  // .khiin.messages.Output output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::khiin::messages::Output& output() const;
  PROTOBUF_MUST_USE_RESULT ::khiin::messages::Output* release_output();
  ::khiin::messages::Output* mutable_output();
  void set_allocated_output(::khiin::messages::Output* output);
  private:
  const ::khiin::messages::Output& _internal_output() const;
  ::khiin::messages::Output* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::khiin::messages::Output* output);
  ::khiin::messages::Output* unsafe_arena_release_output();

  // .khiin.messages.CommandType type = 1;
  void clear_type();
  ::khiin::messages::CommandType type() const;
  void set_type(::khiin::messages::CommandType value);
  private:
  ::khiin::messages::CommandType _internal_type() const;
  void _internal_set_type(::khiin::messages::CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:khiin.messages.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::khiin::messages::Input* input_;
  ::khiin::messages::Output* output_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyEvent

// int32 key_code = 1;
inline void KeyEvent::clear_key_code() {
  key_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyEvent::_internal_key_code() const {
  return key_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyEvent::key_code() const {
  // @@protoc_insertion_point(field_get:khiin.messages.KeyEvent.key_code)
  return _internal_key_code();
}
inline void KeyEvent::_internal_set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_code_ = value;
}
inline void KeyEvent::set_key_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_code(value);
  // @@protoc_insertion_point(field_set:khiin.messages.KeyEvent.key_code)
}

// .khiin.messages.SpecialKey special_key = 2;
inline void KeyEvent::clear_special_key() {
  special_key_ = 0;
}
inline ::khiin::messages::SpecialKey KeyEvent::_internal_special_key() const {
  return static_cast< ::khiin::messages::SpecialKey >(special_key_);
}
inline ::khiin::messages::SpecialKey KeyEvent::special_key() const {
  // @@protoc_insertion_point(field_get:khiin.messages.KeyEvent.special_key)
  return _internal_special_key();
}
inline void KeyEvent::_internal_set_special_key(::khiin::messages::SpecialKey value) {
  
  special_key_ = value;
}
inline void KeyEvent::set_special_key(::khiin::messages::SpecialKey value) {
  _internal_set_special_key(value);
  // @@protoc_insertion_point(field_set:khiin.messages.KeyEvent.special_key)
}

// repeated .khiin.messages.ModifierKey modifier_keys = 3;
inline int KeyEvent::_internal_modifier_keys_size() const {
  return modifier_keys_.size();
}
inline int KeyEvent::modifier_keys_size() const {
  return _internal_modifier_keys_size();
}
inline void KeyEvent::clear_modifier_keys() {
  modifier_keys_.Clear();
}
inline ::khiin::messages::ModifierKey KeyEvent::_internal_modifier_keys(int index) const {
  return static_cast< ::khiin::messages::ModifierKey >(modifier_keys_.Get(index));
}
inline ::khiin::messages::ModifierKey KeyEvent::modifier_keys(int index) const {
  // @@protoc_insertion_point(field_get:khiin.messages.KeyEvent.modifier_keys)
  return _internal_modifier_keys(index);
}
inline void KeyEvent::set_modifier_keys(int index, ::khiin::messages::ModifierKey value) {
  modifier_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:khiin.messages.KeyEvent.modifier_keys)
}
inline void KeyEvent::_internal_add_modifier_keys(::khiin::messages::ModifierKey value) {
  modifier_keys_.Add(value);
}
inline void KeyEvent::add_modifier_keys(::khiin::messages::ModifierKey value) {
  _internal_add_modifier_keys(value);
  // @@protoc_insertion_point(field_add:khiin.messages.KeyEvent.modifier_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
KeyEvent::modifier_keys() const {
  // @@protoc_insertion_point(field_list:khiin.messages.KeyEvent.modifier_keys)
  return modifier_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeyEvent::_internal_mutable_modifier_keys() {
  return &modifier_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
KeyEvent::mutable_modifier_keys() {
  // @@protoc_insertion_point(field_mutable_list:khiin.messages.KeyEvent.modifier_keys)
  return _internal_mutable_modifier_keys();
}

// -------------------------------------------------------------------

// Input

// .khiin.messages.KeyEvent key_event = 1;
inline bool Input::_internal_has_key_event() const {
  return this != internal_default_instance() && key_event_ != nullptr;
}
inline bool Input::has_key_event() const {
  return _internal_has_key_event();
}
inline void Input::clear_key_event() {
  if (GetArenaForAllocation() == nullptr && key_event_ != nullptr) {
    delete key_event_;
  }
  key_event_ = nullptr;
}
inline const ::khiin::messages::KeyEvent& Input::_internal_key_event() const {
  const ::khiin::messages::KeyEvent* p = key_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::messages::KeyEvent&>(
      ::khiin::messages::_KeyEvent_default_instance_);
}
inline const ::khiin::messages::KeyEvent& Input::key_event() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Input.key_event)
  return _internal_key_event();
}
inline void Input::unsafe_arena_set_allocated_key_event(
    ::khiin::messages::KeyEvent* key_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_event_);
  }
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.messages.Input.key_event)
}
inline ::khiin::messages::KeyEvent* Input::release_key_event() {
  
  ::khiin::messages::KeyEvent* temp = key_event_;
  key_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::messages::KeyEvent* Input::unsafe_arena_release_key_event() {
  // @@protoc_insertion_point(field_release:khiin.messages.Input.key_event)
  
  ::khiin::messages::KeyEvent* temp = key_event_;
  key_event_ = nullptr;
  return temp;
}
inline ::khiin::messages::KeyEvent* Input::_internal_mutable_key_event() {
  
  if (key_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::messages::KeyEvent>(GetArenaForAllocation());
    key_event_ = p;
  }
  return key_event_;
}
inline ::khiin::messages::KeyEvent* Input::mutable_key_event() {
  ::khiin::messages::KeyEvent* _msg = _internal_mutable_key_event();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Input.key_event)
  return _msg;
}
inline void Input::set_allocated_key_event(::khiin::messages::KeyEvent* key_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_event_;
  }
  if (key_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::messages::KeyEvent>::GetOwningArena(key_event);
    if (message_arena != submessage_arena) {
      key_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_event, submessage_arena);
    }
    
  } else {
    
  }
  key_event_ = key_event;
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Input.key_event)
}

// int32 candidate_id = 2;
inline void Input::clear_candidate_id() {
  candidate_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::candidate_id() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Input.candidate_id)
  return _internal_candidate_id();
}
inline void Input::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candidate_id_ = value;
}
inline void Input::set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Input.candidate_id)
}

// int32 cursor_position = 3;
inline void Input::clear_cursor_position() {
  cursor_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::_internal_cursor_position() const {
  return cursor_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::cursor_position() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Input.cursor_position)
  return _internal_cursor_position();
}
inline void Input::_internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_position_ = value;
}
inline void Input::set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor_position(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Input.cursor_position)
}

// -------------------------------------------------------------------

// Composition_Segment

// .khiin.messages.SegmentStatus status = 1;
inline void Composition_Segment::clear_status() {
  status_ = 0;
}
inline ::khiin::messages::SegmentStatus Composition_Segment::_internal_status() const {
  return static_cast< ::khiin::messages::SegmentStatus >(status_);
}
inline ::khiin::messages::SegmentStatus Composition_Segment::status() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Composition.Segment.status)
  return _internal_status();
}
inline void Composition_Segment::_internal_set_status(::khiin::messages::SegmentStatus value) {
  
  status_ = value;
}
inline void Composition_Segment::set_status(::khiin::messages::SegmentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Composition.Segment.status)
}

// string value = 2;
inline void Composition_Segment::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Composition_Segment::value() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Composition.Segment.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Composition_Segment::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.messages.Composition.Segment.value)
}
inline std::string* Composition_Segment::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Composition.Segment.value)
  return _s;
}
inline const std::string& Composition_Segment::_internal_value() const {
  return value_.Get();
}
inline void Composition_Segment::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Composition_Segment::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Composition_Segment::release_value() {
  // @@protoc_insertion_point(field_release:khiin.messages.Composition.Segment.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Composition_Segment::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Composition.Segment.value)
}

// -------------------------------------------------------------------

// Composition

// repeated .khiin.messages.Composition.Segment segments = 1;
inline int Composition::_internal_segments_size() const {
  return segments_.size();
}
inline int Composition::segments_size() const {
  return _internal_segments_size();
}
inline void Composition::clear_segments() {
  segments_.Clear();
}
inline ::khiin::messages::Composition_Segment* Composition::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:khiin.messages.Composition.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Composition_Segment >*
Composition::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:khiin.messages.Composition.segments)
  return &segments_;
}
inline const ::khiin::messages::Composition_Segment& Composition::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::khiin::messages::Composition_Segment& Composition::segments(int index) const {
  // @@protoc_insertion_point(field_get:khiin.messages.Composition.segments)
  return _internal_segments(index);
}
inline ::khiin::messages::Composition_Segment* Composition::_internal_add_segments() {
  return segments_.Add();
}
inline ::khiin::messages::Composition_Segment* Composition::add_segments() {
  ::khiin::messages::Composition_Segment* _add = _internal_add_segments();
  // @@protoc_insertion_point(field_add:khiin.messages.Composition.segments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Composition_Segment >&
Composition::segments() const {
  // @@protoc_insertion_point(field_list:khiin.messages.Composition.segments)
  return segments_;
}

// int32 cursor_position = 2;
inline void Composition::clear_cursor_position() {
  cursor_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Composition::_internal_cursor_position() const {
  return cursor_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Composition::cursor_position() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Composition.cursor_position)
  return _internal_cursor_position();
}
inline void Composition::_internal_set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_position_ = value;
}
inline void Composition::set_cursor_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor_position(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Composition.cursor_position)
}

// -------------------------------------------------------------------

// Candidate

// int32 id = 1;
inline void Candidate::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidate::id() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Candidate.id)
  return _internal_id();
}
inline void Candidate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Candidate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Candidate.id)
}

// string value = 2;
inline void Candidate::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Candidate::value() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Candidate.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.messages.Candidate.value)
}
inline std::string* Candidate::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Candidate.value)
  return _s;
}
inline const std::string& Candidate::_internal_value() const {
  return value_.Get();
}
inline void Candidate::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_value() {
  // @@protoc_insertion_point(field_release:khiin.messages.Candidate.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Candidate.value)
}

// string key = 3;
inline void Candidate::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Candidate::key() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Candidate.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.messages.Candidate.key)
}
inline std::string* Candidate::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Candidate.key)
  return _s;
}
inline const std::string& Candidate::_internal_key() const {
  return key_.Get();
}
inline void Candidate::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_key() {
  // @@protoc_insertion_point(field_release:khiin.messages.Candidate.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Candidate.key)
}

// string annotation = 4;
inline void Candidate::clear_annotation() {
  annotation_.ClearToEmpty();
}
inline const std::string& Candidate::annotation() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Candidate.annotation)
  return _internal_annotation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Candidate::set_annotation(ArgT0&& arg0, ArgT... args) {
 
 annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:khiin.messages.Candidate.annotation)
}
inline std::string* Candidate::mutable_annotation() {
  std::string* _s = _internal_mutable_annotation();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Candidate.annotation)
  return _s;
}
inline const std::string& Candidate::_internal_annotation() const {
  return annotation_.Get();
}
inline void Candidate::_internal_set_annotation(const std::string& value) {
  
  annotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Candidate::_internal_mutable_annotation() {
  
  return annotation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Candidate::release_annotation() {
  // @@protoc_insertion_point(field_release:khiin.messages.Candidate.annotation)
  return annotation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Candidate::set_allocated_annotation(std::string* annotation) {
  if (annotation != nullptr) {
    
  } else {
    
  }
  annotation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), annotation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Candidate.annotation)
}

// .khiin.messages.Candidate.Category category = 5;
inline void Candidate::clear_category() {
  category_ = 0;
}
inline ::khiin::messages::Candidate_Category Candidate::_internal_category() const {
  return static_cast< ::khiin::messages::Candidate_Category >(category_);
}
inline ::khiin::messages::Candidate_Category Candidate::category() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Candidate.category)
  return _internal_category();
}
inline void Candidate::_internal_set_category(::khiin::messages::Candidate_Category value) {
  
  category_ = value;
}
inline void Candidate::set_category(::khiin::messages::Candidate_Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Candidate.category)
}

// -------------------------------------------------------------------

// CandidateList

// repeated .khiin.messages.Candidate candidates = 1;
inline int CandidateList::_internal_candidates_size() const {
  return candidates_.size();
}
inline int CandidateList::candidates_size() const {
  return _internal_candidates_size();
}
inline void CandidateList::clear_candidates() {
  candidates_.Clear();
}
inline ::khiin::messages::Candidate* CandidateList::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:khiin.messages.CandidateList.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Candidate >*
CandidateList::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:khiin.messages.CandidateList.candidates)
  return &candidates_;
}
inline const ::khiin::messages::Candidate& CandidateList::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::khiin::messages::Candidate& CandidateList::candidates(int index) const {
  // @@protoc_insertion_point(field_get:khiin.messages.CandidateList.candidates)
  return _internal_candidates(index);
}
inline ::khiin::messages::Candidate* CandidateList::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::khiin::messages::Candidate* CandidateList::add_candidates() {
  ::khiin::messages::Candidate* _add = _internal_add_candidates();
  // @@protoc_insertion_point(field_add:khiin.messages.CandidateList.candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::khiin::messages::Candidate >&
CandidateList::candidates() const {
  // @@protoc_insertion_point(field_list:khiin.messages.CandidateList.candidates)
  return candidates_;
}

// int32 focused = 2;
inline void CandidateList::clear_focused() {
  focused_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateList::_internal_focused() const {
  return focused_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateList::focused() const {
  // @@protoc_insertion_point(field_get:khiin.messages.CandidateList.focused)
  return _internal_focused();
}
inline void CandidateList::_internal_set_focused(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  focused_ = value;
}
inline void CandidateList::set_focused(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focused(value);
  // @@protoc_insertion_point(field_set:khiin.messages.CandidateList.focused)
}

// -------------------------------------------------------------------

// Output

// .khiin.messages.ErrorCode error = 1;
inline void Output::clear_error() {
  error_ = 0;
}
inline ::khiin::messages::ErrorCode Output::_internal_error() const {
  return static_cast< ::khiin::messages::ErrorCode >(error_);
}
inline ::khiin::messages::ErrorCode Output::error() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Output.error)
  return _internal_error();
}
inline void Output::_internal_set_error(::khiin::messages::ErrorCode value) {
  
  error_ = value;
}
inline void Output::set_error(::khiin::messages::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Output.error)
}

// .khiin.messages.Composition composition = 2;
inline bool Output::_internal_has_composition() const {
  return this != internal_default_instance() && composition_ != nullptr;
}
inline bool Output::has_composition() const {
  return _internal_has_composition();
}
inline void Output::clear_composition() {
  if (GetArenaForAllocation() == nullptr && composition_ != nullptr) {
    delete composition_;
  }
  composition_ = nullptr;
}
inline const ::khiin::messages::Composition& Output::_internal_composition() const {
  const ::khiin::messages::Composition* p = composition_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::messages::Composition&>(
      ::khiin::messages::_Composition_default_instance_);
}
inline const ::khiin::messages::Composition& Output::composition() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Output.composition)
  return _internal_composition();
}
inline void Output::unsafe_arena_set_allocated_composition(
    ::khiin::messages::Composition* composition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(composition_);
  }
  composition_ = composition;
  if (composition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.messages.Output.composition)
}
inline ::khiin::messages::Composition* Output::release_composition() {
  
  ::khiin::messages::Composition* temp = composition_;
  composition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::messages::Composition* Output::unsafe_arena_release_composition() {
  // @@protoc_insertion_point(field_release:khiin.messages.Output.composition)
  
  ::khiin::messages::Composition* temp = composition_;
  composition_ = nullptr;
  return temp;
}
inline ::khiin::messages::Composition* Output::_internal_mutable_composition() {
  
  if (composition_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::messages::Composition>(GetArenaForAllocation());
    composition_ = p;
  }
  return composition_;
}
inline ::khiin::messages::Composition* Output::mutable_composition() {
  ::khiin::messages::Composition* _msg = _internal_mutable_composition();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Output.composition)
  return _msg;
}
inline void Output::set_allocated_composition(::khiin::messages::Composition* composition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete composition_;
  }
  if (composition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::messages::Composition>::GetOwningArena(composition);
    if (message_arena != submessage_arena) {
      composition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composition, submessage_arena);
    }
    
  } else {
    
  }
  composition_ = composition;
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Output.composition)
}

// .khiin.messages.CandidateList candidate_list = 3;
inline bool Output::_internal_has_candidate_list() const {
  return this != internal_default_instance() && candidate_list_ != nullptr;
}
inline bool Output::has_candidate_list() const {
  return _internal_has_candidate_list();
}
inline void Output::clear_candidate_list() {
  if (GetArenaForAllocation() == nullptr && candidate_list_ != nullptr) {
    delete candidate_list_;
  }
  candidate_list_ = nullptr;
}
inline const ::khiin::messages::CandidateList& Output::_internal_candidate_list() const {
  const ::khiin::messages::CandidateList* p = candidate_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::messages::CandidateList&>(
      ::khiin::messages::_CandidateList_default_instance_);
}
inline const ::khiin::messages::CandidateList& Output::candidate_list() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Output.candidate_list)
  return _internal_candidate_list();
}
inline void Output::unsafe_arena_set_allocated_candidate_list(
    ::khiin::messages::CandidateList* candidate_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_list_);
  }
  candidate_list_ = candidate_list;
  if (candidate_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.messages.Output.candidate_list)
}
inline ::khiin::messages::CandidateList* Output::release_candidate_list() {
  
  ::khiin::messages::CandidateList* temp = candidate_list_;
  candidate_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::messages::CandidateList* Output::unsafe_arena_release_candidate_list() {
  // @@protoc_insertion_point(field_release:khiin.messages.Output.candidate_list)
  
  ::khiin::messages::CandidateList* temp = candidate_list_;
  candidate_list_ = nullptr;
  return temp;
}
inline ::khiin::messages::CandidateList* Output::_internal_mutable_candidate_list() {
  
  if (candidate_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::messages::CandidateList>(GetArenaForAllocation());
    candidate_list_ = p;
  }
  return candidate_list_;
}
inline ::khiin::messages::CandidateList* Output::mutable_candidate_list() {
  ::khiin::messages::CandidateList* _msg = _internal_mutable_candidate_list();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Output.candidate_list)
  return _msg;
}
inline void Output::set_allocated_candidate_list(::khiin::messages::CandidateList* candidate_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candidate_list_;
  }
  if (candidate_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::messages::CandidateList>::GetOwningArena(candidate_list);
    if (message_arena != submessage_arena) {
      candidate_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_list, submessage_arena);
    }
    
  } else {
    
  }
  candidate_list_ = candidate_list;
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Output.candidate_list)
}

// bool consumable = 4;
inline void Output::clear_consumable() {
  consumable_ = false;
}
inline bool Output::_internal_consumable() const {
  return consumable_;
}
inline bool Output::consumable() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Output.consumable)
  return _internal_consumable();
}
inline void Output::_internal_set_consumable(bool value) {
  
  consumable_ = value;
}
inline void Output::set_consumable(bool value) {
  _internal_set_consumable(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Output.consumable)
}

// -------------------------------------------------------------------

// Command

// .khiin.messages.CommandType type = 1;
inline void Command::clear_type() {
  type_ = 0;
}
inline ::khiin::messages::CommandType Command::_internal_type() const {
  return static_cast< ::khiin::messages::CommandType >(type_);
}
inline ::khiin::messages::CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Command.type)
  return _internal_type();
}
inline void Command::_internal_set_type(::khiin::messages::CommandType value) {
  
  type_ = value;
}
inline void Command::set_type(::khiin::messages::CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:khiin.messages.Command.type)
}

// .khiin.messages.Input input = 2;
inline bool Command::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool Command::has_input() const {
  return _internal_has_input();
}
inline void Command::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::khiin::messages::Input& Command::_internal_input() const {
  const ::khiin::messages::Input* p = input_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::messages::Input&>(
      ::khiin::messages::_Input_default_instance_);
}
inline const ::khiin::messages::Input& Command::input() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Command.input)
  return _internal_input();
}
inline void Command::unsafe_arena_set_allocated_input(
    ::khiin::messages::Input* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.messages.Command.input)
}
inline ::khiin::messages::Input* Command::release_input() {
  
  ::khiin::messages::Input* temp = input_;
  input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::messages::Input* Command::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:khiin.messages.Command.input)
  
  ::khiin::messages::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::khiin::messages::Input* Command::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::messages::Input>(GetArenaForAllocation());
    input_ = p;
  }
  return input_;
}
inline ::khiin::messages::Input* Command::mutable_input() {
  ::khiin::messages::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Command.input)
  return _msg;
}
inline void Command::set_allocated_input(::khiin::messages::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::messages::Input>::GetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Command.input)
}

// .khiin.messages.Output output = 3;
inline bool Command::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool Command::has_output() const {
  return _internal_has_output();
}
inline void Command::clear_output() {
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::khiin::messages::Output& Command::_internal_output() const {
  const ::khiin::messages::Output* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::khiin::messages::Output&>(
      ::khiin::messages::_Output_default_instance_);
}
inline const ::khiin::messages::Output& Command::output() const {
  // @@protoc_insertion_point(field_get:khiin.messages.Command.output)
  return _internal_output();
}
inline void Command::unsafe_arena_set_allocated_output(
    ::khiin::messages::Output* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:khiin.messages.Command.output)
}
inline ::khiin::messages::Output* Command::release_output() {
  
  ::khiin::messages::Output* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::khiin::messages::Output* Command::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:khiin.messages.Command.output)
  
  ::khiin::messages::Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::khiin::messages::Output* Command::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::khiin::messages::Output>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::khiin::messages::Output* Command::mutable_output() {
  ::khiin::messages::Output* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:khiin.messages.Command.output)
  return _msg;
}
inline void Command::set_allocated_output(::khiin::messages::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::khiin::messages::Output>::GetOwningArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:khiin.messages.Command.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace khiin

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::khiin::messages::Candidate_Category> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::messages::SpecialKey> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::messages::ModifierKey> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::messages::SegmentStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::messages::ErrorCode> : ::std::true_type {};
template <> struct is_proto_enum< ::khiin::messages::CommandType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
